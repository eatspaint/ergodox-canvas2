
kiibohd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a584  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .usbdescriptortable 00000160  1fff8000  1fff8000  00028000  2**2
                  ALLOC
  2 .dmabuffers   00000000  1fff8160  1fff8160  000190c4  2**0
                  CONTENTS
  3 .usbbuffers   00000870  1fff8160  1fff8160  00028000  2**0
                  ALLOC
  4 .data         000006f4  1fff89d0  0000c584  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001534  1fff90c4  0000cc78  000190c4  2**2
                  ALLOC
  6 .debug_info   00011498  00000000  00000000  000190c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002df2  00000000  00000000  0002a55c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000928  00000000  00000000  0002d34e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000fd0  00000000  00000000  0002dc76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000a811  00000000  00000000  0002ec46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007f94  00000000  00000000  00039457  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0002569b  00000000  00000000  000413eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000006e  00000000  00000000  00066a86  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000033  00000000  00000000  00066af4  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001ad8  00000000  00000000  00066b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000072bc  00000000  00000000  00068600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <_app_rom>:
    2000:	20008000 	.word	0x20008000
    2004:	000021bd 	.word	0x000021bd
    2008:	00002485 	.word	0x00002485
    200c:	00002491 	.word	0x00002491
    2010:	000024c5 	.word	0x000024c5
    2014:	00002505 	.word	0x00002505
    2018:	00002545 	.word	0x00002545
    201c:	0000243d 	.word	0x0000243d
    2020:	0000243d 	.word	0x0000243d
    2024:	0000243d 	.word	0x0000243d
    2028:	0000243d 	.word	0x0000243d
    202c:	0000247d 	.word	0x0000247d
    2030:	0000247d 	.word	0x0000247d
    2034:	0000243d 	.word	0x0000243d
    2038:	0000247d 	.word	0x0000247d
    203c:	0000242d 	.word	0x0000242d
    2040:	0000247d 	.word	0x0000247d
    2044:	0000247d 	.word	0x0000247d
    2048:	0000247d 	.word	0x0000247d
    204c:	0000247d 	.word	0x0000247d
    2050:	0000247d 	.word	0x0000247d
    2054:	0000247d 	.word	0x0000247d
    2058:	0000247d 	.word	0x0000247d
    205c:	0000247d 	.word	0x0000247d
    2060:	0000247d 	.word	0x0000247d
    2064:	0000247d 	.word	0x0000247d
    2068:	0000247d 	.word	0x0000247d
    206c:	0000247d 	.word	0x0000247d
    2070:	0000247d 	.word	0x0000247d
    2074:	0000247d 	.word	0x0000247d
    2078:	0000247d 	.word	0x0000247d
    207c:	0000247d 	.word	0x0000247d
    2080:	0000247d 	.word	0x0000247d
    2084:	0000247d 	.word	0x0000247d
    2088:	0000247d 	.word	0x0000247d
    208c:	0000247d 	.word	0x0000247d
    2090:	0000247d 	.word	0x0000247d
    2094:	0000247d 	.word	0x0000247d
    2098:	0000247d 	.word	0x0000247d
    209c:	0000247d 	.word	0x0000247d
    20a0:	0000271d 	.word	0x0000271d
    20a4:	0000247d 	.word	0x0000247d
    20a8:	0000247d 	.word	0x0000247d
    20ac:	0000247d 	.word	0x0000247d
    20b0:	0000247d 	.word	0x0000247d
    20b4:	0000247d 	.word	0x0000247d
    20b8:	0000247d 	.word	0x0000247d
    20bc:	0000247d 	.word	0x0000247d
    20c0:	0000247d 	.word	0x0000247d
    20c4:	0000247d 	.word	0x0000247d
    20c8:	0000247d 	.word	0x0000247d
    20cc:	0000247d 	.word	0x0000247d
    20d0:	0000247d 	.word	0x0000247d
    20d4:	0000247d 	.word	0x0000247d
    20d8:	0000247d 	.word	0x0000247d
    20dc:	0000247d 	.word	0x0000247d
    20e0:	0000247d 	.word	0x0000247d
    20e4:	0000247d 	.word	0x0000247d
    20e8:	0000247d 	.word	0x0000247d
    20ec:	0000247d 	.word	0x0000247d
    20f0:	0000247d 	.word	0x0000247d
    20f4:	0000247d 	.word	0x0000247d
    20f8:	0000247d 	.word	0x0000247d
    20fc:	0000247d 	.word	0x0000247d
    2100:	0000247d 	.word	0x0000247d
    2104:	0000247d 	.word	0x0000247d
    2108:	0000247d 	.word	0x0000247d
    210c:	0000247d 	.word	0x0000247d
    2110:	0000247d 	.word	0x0000247d
    2114:	0000247d 	.word	0x0000247d
    2118:	0000247d 	.word	0x0000247d
    211c:	0000247d 	.word	0x0000247d
    2120:	0000247d 	.word	0x0000247d
    2124:	0000247d 	.word	0x0000247d
    2128:	0000247d 	.word	0x0000247d
    212c:	0000247d 	.word	0x0000247d
    2130:	0000247d 	.word	0x0000247d
    2134:	0000247d 	.word	0x0000247d
    2138:	0000247d 	.word	0x0000247d
    213c:	0000247d 	.word	0x0000247d
    2140:	0000247d 	.word	0x0000247d
    2144:	0000247d 	.word	0x0000247d
    2148:	0000247d 	.word	0x0000247d
    214c:	0000247d 	.word	0x0000247d
    2150:	0000247d 	.word	0x0000247d
    2154:	0000247d 	.word	0x0000247d
    2158:	0000247d 	.word	0x0000247d
    215c:	0000247d 	.word	0x0000247d
    2160:	0000247d 	.word	0x0000247d
    2164:	000068c1 	.word	0x000068c1
    2168:	0000247d 	.word	0x0000247d
    216c:	0000247d 	.word	0x0000247d
    2170:	0000247d 	.word	0x0000247d
    2174:	0000247d 	.word	0x0000247d
    2178:	0000247d 	.word	0x0000247d
    217c:	0000247d 	.word	0x0000247d
    2180:	0000247d 	.word	0x0000247d
    2184:	0000247d 	.word	0x0000247d
    2188:	0000247d 	.word	0x0000247d
    218c:	0000247d 	.word	0x0000247d
    2190:	0000247d 	.word	0x0000247d
    2194:	0000247d 	.word	0x0000247d
    2198:	0000247d 	.word	0x0000247d
    219c:	0000247d 	.word	0x0000247d
    21a0:	0000247d 	.word	0x0000247d
    21a4:	0000247d 	.word	0x0000247d
    21a8:	0000247d 	.word	0x0000247d
    21ac:	0000247d 	.word	0x0000247d
    21b0:	0000247d 	.word	0x0000247d
    21b4:	0000247d 	.word	0x0000247d
    21b8:	0000247d 	.word	0x0000247d

000021bc <ResetHandler>:

// ----- Chip Entry Point -----

__attribute__ ((section(".startup")))
void ResetHandler()
{
    21bc:	b508      	push	{r3, lr}
		SCB_VTOR = addr; // relocate vector table
		jump_to_app( addr );
	}
#endif
	// Disable Watchdog
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
    21be:	4b40      	ldr	r3, [pc, #256]	; (22c0 <ResetHandler+0x104>)
    21c0:	f24c 5220 	movw	r2, #50464	; 0xc520
    21c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    21c6:	f64d 1228 	movw	r2, #55592	; 0xd928
    21ca:	801a      	strh	r2, [r3, #0]
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    21cc:	2210      	movs	r2, #16
    21ce:	f823 2c0e 	strh.w	r2, [r3, #-14]

	uint32_t *src = (uint32_t*)&_etext;
	uint32_t *dest = (uint32_t*)&_sdata;

	// Enable clocks to always-used peripherals
	SIM_SCGC5 = 0x00043F82; // Clocks active to all GPIO
    21d2:	f5a3 431f 	sub.w	r3, r3, #40704	; 0x9f00
    21d6:	3bd6      	subs	r3, #214	; 0xd6
    21d8:	4a3a      	ldr	r2, [pc, #232]	; (22c4 <ResetHandler+0x108>)
    21da:	601a      	str	r2, [r3, #0]
	SIM_SCGC6 = SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
    21dc:	4a3a      	ldr	r2, [pc, #232]	; (22c8 <ResetHandler+0x10c>)
    21de:	605a      	str	r2, [r3, #4]
#if defined(_mk20dx128_)
	SIM_SCGC6 |= SIM_SCGC6_RTC;
#elif defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
    21e0:	4a3a      	ldr	r2, [pc, #232]	; (22cc <ResetHandler+0x110>)
    21e2:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
    21e6:	6011      	str	r1, [r2, #0]
	SIM_SCGC6 |= SIM_SCGC6_RTC;
    21e8:	685a      	ldr	r2, [r3, #4]
	{
		PMC_REGSC |= PMC_REGSC_ACKISO;
	}

	// Prepare RAM
	while ( dest < (uint32_t*)&_edata ) *dest++ = *src++;
    21ea:	4939      	ldr	r1, [pc, #228]	; (22d0 <ResetHandler+0x114>)
	SIM_SCGC6 = SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#if defined(_mk20dx128_)
	SIM_SCGC6 |= SIM_SCGC6_RTC;
#elif defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC6 |= SIM_SCGC6_RTC;
    21ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    21f0:	605a      	str	r2, [r3, #4]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// release I/O pins hold, if we woke up from VLLS mode
	if ( PMC_REGSC & PMC_REGSC_ACKISO )
    21f2:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
    21f6:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
    21fa:	781a      	ldrb	r2, [r3, #0]
    21fc:	0710      	lsls	r0, r2, #28
	{
		PMC_REGSC |= PMC_REGSC_ACKISO;
    21fe:	bf42      	ittt	mi
    2200:	781a      	ldrbmi	r2, [r3, #0]
    2202:	f042 0208 	orrmi.w	r2, r2, #8
    2206:	701a      	strbmi	r2, [r3, #0]
    2208:	4a32      	ldr	r2, [pc, #200]	; (22d4 <ResetHandler+0x118>)
    220a:	4b33      	ldr	r3, [pc, #204]	; (22d8 <ResetHandler+0x11c>)
	}

	// Prepare RAM
	while ( dest < (uint32_t*)&_edata ) *dest++ = *src++;
    220c:	428b      	cmp	r3, r1
    220e:	d204      	bcs.n	221a <ResetHandler+0x5e>
    2210:	f852 0f04 	ldr.w	r0, [r2, #4]!
    2214:	f843 0b04 	str.w	r0, [r3], #4
    2218:	e7f8      	b.n	220c <ResetHandler+0x50>
    221a:	4b30      	ldr	r3, [pc, #192]	; (22dc <ResetHandler+0x120>)
	dest = (uint32_t*)&_sbss;
	while ( dest < (uint32_t*)&_ebss ) *dest++ = 0;
    221c:	4a30      	ldr	r2, [pc, #192]	; (22e0 <ResetHandler+0x124>)
    221e:	2100      	movs	r1, #0
    2220:	4293      	cmp	r3, r2
    2222:	d202      	bcs.n	222a <ResetHandler+0x6e>
    2224:	f843 1b04 	str.w	r1, [r3], #4
    2228:	e7fa      	b.n	2220 <ResetHandler+0x64>
    222a:	4b2e      	ldr	r3, [pc, #184]	; (22e4 <ResetHandler+0x128>)
	// use vector table in flash
	SCB_VTOR = 0;
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
    222c:	4a2e      	ldr	r2, [pc, #184]	; (22e8 <ResetHandler+0x12c>)
	{
		NVIC_SET_PRIORITY( i, 128 );
    222e:	2180      	movs	r1, #128	; 0x80
    2230:	f803 1b01 	strb.w	r1, [r3], #1
	// use vector table in flash
	SCB_VTOR = 0;
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
    2234:	4293      	cmp	r3, r2
    2236:	d1fb      	bne.n	2230 <ResetHandler+0x74>
		NVIC_SET_PRIORITY( i, 128 );
	}

	// start in FEI mode
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
    2238:	4b2c      	ldr	r3, [pc, #176]	; (22ec <ResetHandler+0x130>)

	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS( 2 ) | MCG_C1_FRDIV( 4 );

	// wait for crystal oscillator to begin
	while ( (MCG_S & MCG_S_OSCINIT0) == 0 );
    223a:	492d      	ldr	r1, [pc, #180]	; (22f0 <ResetHandler+0x134>)
		NVIC_SET_PRIORITY( i, 128 );
	}

	// start in FEI mode
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
    223c:	220a      	movs	r2, #10
    223e:	701a      	strb	r2, [r3, #0]

	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0( 2 ) | MCG_C2_EREFS;
    2240:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
    2244:	2224      	movs	r2, #36	; 0x24
    2246:	701a      	strb	r2, [r3, #0]

	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS( 2 ) | MCG_C1_FRDIV( 4 );
    2248:	22a0      	movs	r2, #160	; 0xa0
    224a:	f803 2c01 	strb.w	r2, [r3, #-1]

	// wait for crystal oscillator to begin
	while ( (MCG_S & MCG_S_OSCINIT0) == 0 );
    224e:	780b      	ldrb	r3, [r1, #0]
    2250:	4a27      	ldr	r2, [pc, #156]	; (22f0 <ResetHandler+0x134>)
    2252:	f013 0f02 	tst.w	r3, #2
    2256:	d0fa      	beq.n	224e <ResetHandler+0x92>

	// wait for FLL to use oscillator
	while ( (MCG_S & MCG_S_IREFST) != 0 );
    2258:	7813      	ldrb	r3, [r2, #0]
    225a:	06d9      	lsls	r1, r3, #27
    225c:	d4fc      	bmi.n	2258 <ResetHandler+0x9c>

	// wait for MCGOUT to use oscillator
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 2 ) );
    225e:	7813      	ldrb	r3, [r2, #0]
    2260:	f003 030c 	and.w	r3, r3, #12
    2264:	2b08      	cmp	r3, #8
    2266:	d1fa      	bne.n	225e <ResetHandler+0xa2>

	// now we're in FBE mode
#if F_CPU == 72000000
	// config PLL input for 16 MHz Crystal / 8 = 2 MHz
	MCG_C5 = MCG_C5_PRDIV0( 7 );
    2268:	4b22      	ldr	r3, [pc, #136]	; (22f4 <ResetHandler+0x138>)
	// config PLL for 96 MHz output
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 0 );
#endif

	// wait for PLL to start using xtal as its input
	while ( !(MCG_S & MCG_S_PLLST) );
    226a:	4921      	ldr	r1, [pc, #132]	; (22f0 <ResetHandler+0x134>)
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 2 ) );

	// now we're in FBE mode
#if F_CPU == 72000000
	// config PLL input for 16 MHz Crystal / 8 = 2 MHz
	MCG_C5 = MCG_C5_PRDIV0( 7 );
    226c:	2207      	movs	r2, #7
    226e:	701a      	strb	r2, [r3, #0]
	MCG_C5 = MCG_C5_PRDIV0( 3 );
#endif

#if F_CPU == 72000000
	// config PLL for 72 MHz output (36 * 2 MHz Ext PLL)
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 12 );
    2270:	224c      	movs	r2, #76	; 0x4c
    2272:	705a      	strb	r2, [r3, #1]
	// config PLL for 96 MHz output
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 0 );
#endif

	// wait for PLL to start using xtal as its input
	while ( !(MCG_S & MCG_S_PLLST) );
    2274:	780b      	ldrb	r3, [r1, #0]
    2276:	4a1e      	ldr	r2, [pc, #120]	; (22f0 <ResetHandler+0x134>)
    2278:	f013 0f20 	tst.w	r3, #32
    227c:	d0fa      	beq.n	2274 <ResetHandler+0xb8>

	// wait for PLL to lock
	while ( !(MCG_S & MCG_S_LOCK0) );
    227e:	7813      	ldrb	r3, [r2, #0]
    2280:	065b      	lsls	r3, r3, #25
    2282:	d5fc      	bpl.n	227e <ResetHandler+0xc2>
#if F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 2 );
    2284:	4b1c      	ldr	r3, [pc, #112]	; (22f8 <ResetHandler+0x13c>)
    2286:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
    228a:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 3 ) | SIM_CLKDIV1_OUTDIV2( 3 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#else
#error "Error, F_CPU must be 96000000, 72000000, 48000000, or 24000000"
#endif
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
    228c:	4b1b      	ldr	r3, [pc, #108]	; (22fc <ResetHandler+0x140>)
    228e:	2220      	movs	r2, #32
    2290:	701a      	strb	r2, [r3, #0]

	// wait for PLL clock to be used
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 3 ) );
    2292:	4a17      	ldr	r2, [pc, #92]	; (22f0 <ResetHandler+0x134>)
    2294:	7813      	ldrb	r3, [r2, #0]
    2296:	f003 030c 	and.w	r3, r3, #12
    229a:	2b0c      	cmp	r3, #12
    229c:	d1fa      	bne.n	2294 <ResetHandler+0xd8>

	// now we're in PEE mode
#if F_CPU == 72000000
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 2 ) | SIM_CLKDIV2_USBFRAC; // USB = 72 MHz PLL / 1.5
    229e:	4b18      	ldr	r3, [pc, #96]	; (2300 <ResetHandler+0x144>)
    22a0:	2205      	movs	r2, #5
    22a2:	601a      	str	r2, [r3, #0]
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 1 ); // USB = 96 MHz PLL / 2
#endif

	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL( 6 );
    22a4:	4a17      	ldr	r2, [pc, #92]	; (2304 <ResetHandler+0x148>)
    22a6:	f843 2c44 	str.w	r2, [r3, #-68]

#endif

#if !defined(_bootloader_)
	// Initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
    22aa:	4b17      	ldr	r3, [pc, #92]	; (2308 <ResetHandler+0x14c>)
    22ac:	4a17      	ldr	r2, [pc, #92]	; (230c <ResetHandler+0x150>)
    22ae:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
    22b0:	2207      	movs	r2, #7
    22b2:	f843 2c04 	str.w	r2, [r3, #-4]

	__enable_irq();
    22b6:	b662      	cpsie	i
#else
	// Disable Watchdog for bootloader
	WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN;
#endif

	main();
    22b8:	f000 f8a2 	bl	2400 <main>
    22bc:	e7fe      	b.n	22bc <ResetHandler+0x100>
    22be:	bf00      	nop
    22c0:	4005200e 	.word	0x4005200e
    22c4:	00043f82 	.word	0x00043f82
    22c8:	0b000001 	.word	0x0b000001
    22cc:	40048030 	.word	0x40048030
    22d0:	1fff90c4 	.word	0x1fff90c4
    22d4:	0000c580 	.word	0x0000c580
    22d8:	1fff89d0 	.word	0x1fff89d0
    22dc:	1fff90c4 	.word	0x1fff90c4
    22e0:	1fffa5f8 	.word	0x1fffa5f8
    22e4:	e000e400 	.word	0xe000e400
    22e8:	e000e45f 	.word	0xe000e45f
    22ec:	40065000 	.word	0x40065000
    22f0:	40064006 	.word	0x40064006
    22f4:	40064004 	.word	0x40064004
    22f8:	40048044 	.word	0x40048044
    22fc:	40064000 	.word	0x40064000
    2300:	40048048 	.word	0x40048048
    2304:	000510c0 	.word	0x000510c0
    2308:	e000e014 	.word	0xe000e014
    230c:	0001193f 	.word	0x0001193f
    2310:	00000000 	.word	0x00000000
    2314:	00000000 	.word	0x00000000
    2318:	00000000 	.word	0x00000000
    231c:	00000000 	.word	0x00000000
    2320:	00000000 	.word	0x00000000
    2324:	00000000 	.word	0x00000000
    2328:	00000000 	.word	0x00000000
    232c:	00000000 	.word	0x00000000
    2330:	00000000 	.word	0x00000000
    2334:	00000000 	.word	0x00000000
    2338:	00000000 	.word	0x00000000
    233c:	00000000 	.word	0x00000000
    2340:	00000000 	.word	0x00000000
    2344:	00000000 	.word	0x00000000
    2348:	00000000 	.word	0x00000000
    234c:	00000000 	.word	0x00000000
    2350:	00000000 	.word	0x00000000
    2354:	00000000 	.word	0x00000000
    2358:	00000000 	.word	0x00000000
    235c:	00000000 	.word	0x00000000
    2360:	00000000 	.word	0x00000000
    2364:	00000000 	.word	0x00000000
    2368:	00000000 	.word	0x00000000
    236c:	00000000 	.word	0x00000000
    2370:	00000000 	.word	0x00000000
    2374:	00000000 	.word	0x00000000
    2378:	00000000 	.word	0x00000000
    237c:	00000000 	.word	0x00000000
    2380:	00000000 	.word	0x00000000
    2384:	00000000 	.word	0x00000000
    2388:	00000000 	.word	0x00000000
    238c:	00000000 	.word	0x00000000
    2390:	00000000 	.word	0x00000000
    2394:	00000000 	.word	0x00000000
    2398:	00000000 	.word	0x00000000
    239c:	00000000 	.word	0x00000000
    23a0:	00000000 	.word	0x00000000
    23a4:	00000000 	.word	0x00000000
    23a8:	00000000 	.word	0x00000000
    23ac:	00000000 	.word	0x00000000
    23b0:	00000000 	.word	0x00000000
    23b4:	00000000 	.word	0x00000000
    23b8:	00000000 	.word	0x00000000
    23bc:	00000000 	.word	0x00000000
    23c0:	00000000 	.word	0x00000000
    23c4:	00000000 	.word	0x00000000
    23c8:	00000000 	.word	0x00000000
    23cc:	00000000 	.word	0x00000000
    23d0:	00000000 	.word	0x00000000
    23d4:	00000000 	.word	0x00000000
    23d8:	00000000 	.word	0x00000000
    23dc:	00000000 	.word	0x00000000
    23e0:	00000000 	.word	0x00000000
    23e4:	00000000 	.word	0x00000000
    23e8:	00000000 	.word	0x00000000
    23ec:	00000000 	.word	0x00000000
    23f0:	00000000 	.word	0x00000000
    23f4:	00000000 	.word	0x00000000
    23f8:	00000000 	.word	0x00000000
    23fc:	00000000 	.word	0x00000000

00002400 <main>:


// ----- Functions -----

int main()
{
    2400:	b508      	push	{r3, lr}
	CLKPR = 0x80;
	CLKPR = 0x00;
#endif

	// Enable CLI
	CLI_init();
    2402:	f005 fb69 	bl	7ad8 <CLI_init>

	// Setup Modules
	Output_setup();
    2406:	f004 f887 	bl	6518 <Output_setup>
	Macro_setup();
    240a:	f003 f9f7 	bl	57fc <Macro_setup>
	Scan_setup();
    240e:	f002 fc41 	bl	4c94 <Scan_setup>

	// Main Detection Loop
	while ( 1 )
	{
		// Process CLI
		CLI_process();
    2412:	f005 fc5f 	bl	7cd4 <CLI_process>

		// Acquire Key Indices
		// Loop continuously until scan_loop returns 0
		cli();
    2416:	b672      	cpsid	i
		while ( Scan_loop() );
    2418:	f002 fc50 	bl	4cbc <Scan_loop>
    241c:	2800      	cmp	r0, #0
    241e:	d1fb      	bne.n	2418 <main+0x18>
		sei();
    2420:	b662      	cpsie	i

		// Run Macros over Key Indices and convert to USB Keys
		Macro_process();
    2422:	f003 f969 	bl	56f8 <Macro_process>

		// Sends USB data only if changed
		Output_send();
    2426:	f004 f887 	bl	6538 <Output_send>
	}
    242a:	e7f2      	b.n	2412 <main+0x12>

0000242c <systick_default_isr>:

// NVIC - SysTick ISR
extern volatile uint32_t systick_millis_count;
void systick_default_isr()
{
	systick_millis_count++;
    242c:	4a02      	ldr	r2, [pc, #8]	; (2438 <systick_default_isr+0xc>)
    242e:	6813      	ldr	r3, [r2, #0]
    2430:	3301      	adds	r3, #1
    2432:	6013      	str	r3, [r2, #0]
    2434:	4770      	bx	lr
    2436:	bf00      	nop
    2438:	1fff90c4 	.word	0x1fff90c4

0000243c <fault_isr>:

// ----- Interrupts -----

// NVIC - Default ISR
void fault_isr()
{
    243c:	b508      	push	{r3, lr}
	print("Fault!" NL );
    243e:	480d      	ldr	r0, [pc, #52]	; (2474 <fault_isr+0x38>)
	while ( 1 )
	{
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if ( SIM_SCGC4 & SIM_SCGC4_USBOTG ) usb_isr();
    2440:	4d0d      	ldr	r5, [pc, #52]	; (2478 <fault_isr+0x3c>)
// ----- Interrupts -----

// NVIC - Default ISR
void fault_isr()
{
	print("Fault!" NL );
    2442:	f005 fd95 	bl	7f70 <_print>
    2446:	462c      	mov	r4, r5
	while ( 1 )
	{
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if ( SIM_SCGC4 & SIM_SCGC4_USBOTG ) usb_isr();
    2448:	682b      	ldr	r3, [r5, #0]
    244a:	0358      	lsls	r0, r3, #13
    244c:	d501      	bpl.n	2452 <fault_isr+0x16>
    244e:	f004 fa37 	bl	68c0 <usb_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART0 )  uart0_status_isr();
    2452:	6823      	ldr	r3, [r4, #0]
    2454:	0559      	lsls	r1, r3, #21
    2456:	d501      	bpl.n	245c <fault_isr+0x20>
    2458:	f000 f810 	bl	247c <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART1 )  uart1_status_isr();
    245c:	6823      	ldr	r3, [r4, #0]
    245e:	051a      	lsls	r2, r3, #20
    2460:	d501      	bpl.n	2466 <fault_isr+0x2a>
    2462:	f000 f80b 	bl	247c <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART2 )  uart2_status_isr();
    2466:	6823      	ldr	r3, [r4, #0]
    2468:	04db      	lsls	r3, r3, #19
    246a:	d5ed      	bpl.n	2448 <fault_isr+0xc>
    246c:	f000 f806 	bl	247c <unused_isr>
    2470:	e7ea      	b.n	2448 <fault_isr+0xc>
    2472:	bf00      	nop
    2474:	000095c0 	.word	0x000095c0
    2478:	40048034 	.word	0x40048034

0000247c <unused_isr>:
	}
}

void unused_isr()
{
    247c:	b508      	push	{r3, lr}
	fault_isr();
    247e:	f7ff ffdd 	bl	243c <fault_isr>
    2482:	0000      	movs	r0, r0

00002484 <nmi_default_isr>:


// NVIC - Non-Maskable Interrupt ISR
void nmi_default_isr()
{
	print("NMI!" NL );
    2484:	4801      	ldr	r0, [pc, #4]	; (248c <nmi_default_isr+0x8>)
    2486:	f005 bd73 	b.w	7f70 <_print>
    248a:	bf00      	nop
    248c:	00008216 	.word	0x00008216

00002490 <hard_fault_default_isr>:
}


// NVIC - Hard Fault ISR
void hard_fault_default_isr()
{
    2490:	b508      	push	{r3, lr}
	print("Hard Fault! SCB_HFSR: ");
    2492:	4807      	ldr	r0, [pc, #28]	; (24b0 <hard_fault_default_isr+0x20>)
    2494:	f005 fd6c 	bl	7f70 <_print>
	printHex32( SCB_HFSR );
    2498:	4b06      	ldr	r3, [pc, #24]	; (24b4 <hard_fault_default_isr+0x24>)
    249a:	2101      	movs	r1, #1
    249c:	6818      	ldr	r0, [r3, #0]
    249e:	f005 fe46 	bl	812e <printHex32_op>
	print( NL );
    24a2:	4805      	ldr	r0, [pc, #20]	; (24b8 <hard_fault_default_isr+0x28>)
    24a4:	f005 fd64 	bl	7f70 <_print>
	SOFTWARE_RESET();
    24a8:	4b04      	ldr	r3, [pc, #16]	; (24bc <hard_fault_default_isr+0x2c>)
    24aa:	4a05      	ldr	r2, [pc, #20]	; (24c0 <hard_fault_default_isr+0x30>)
    24ac:	601a      	str	r2, [r3, #0]
    24ae:	bd08      	pop	{r3, pc}
    24b0:	0000821d 	.word	0x0000821d
    24b4:	e000ed2c 	.word	0xe000ed2c
    24b8:	0000c0ef 	.word	0x0000c0ef
    24bc:	e000ed0c 	.word	0xe000ed0c
    24c0:	05fa0004 	.word	0x05fa0004

000024c4 <memmanage_fault_default_isr>:
}


// NVIC - Memory Manager Fault ISR
void memmanage_fault_default_isr()
{
    24c4:	b508      	push	{r3, lr}
	print("Memory Manager Fault! SCB_CFSR: ");
    24c6:	480a      	ldr	r0, [pc, #40]	; (24f0 <memmanage_fault_default_isr+0x2c>)
    24c8:	f005 fd52 	bl	7f70 <_print>
	printHex32( SCB_CFSR );
    24cc:	4b09      	ldr	r3, [pc, #36]	; (24f4 <memmanage_fault_default_isr+0x30>)
    24ce:	2101      	movs	r1, #1
    24d0:	6818      	ldr	r0, [r3, #0]
    24d2:	f005 fe2c 	bl	812e <printHex32_op>
	print(" SCB_MMAR: ");
    24d6:	4808      	ldr	r0, [pc, #32]	; (24f8 <memmanage_fault_default_isr+0x34>)
    24d8:	f005 fd4a 	bl	7f70 <_print>
	printHex32( SCB_MMAR );
    24dc:	4b07      	ldr	r3, [pc, #28]	; (24fc <memmanage_fault_default_isr+0x38>)
    24de:	2101      	movs	r1, #1
    24e0:	6818      	ldr	r0, [r3, #0]
    24e2:	f005 fe24 	bl	812e <printHex32_op>
	print( NL );
    24e6:	4806      	ldr	r0, [pc, #24]	; (2500 <memmanage_fault_default_isr+0x3c>)
}
    24e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Memory Manager Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_MMAR: ");
	printHex32( SCB_MMAR );
	print( NL );
    24ec:	f005 bd40 	b.w	7f70 <_print>
    24f0:	00008234 	.word	0x00008234
    24f4:	e000ed28 	.word	0xe000ed28
    24f8:	00008255 	.word	0x00008255
    24fc:	e000ed34 	.word	0xe000ed34
    2500:	0000c0ef 	.word	0x0000c0ef

00002504 <bus_fault_default_isr>:
}


// NVIC - Bus Fault ISR
void bus_fault_default_isr()
{
    2504:	b508      	push	{r3, lr}
	print("Bus Fault! SCB_CFSR: ");
    2506:	480a      	ldr	r0, [pc, #40]	; (2530 <bus_fault_default_isr+0x2c>)
    2508:	f005 fd32 	bl	7f70 <_print>
	printHex32( SCB_CFSR );
    250c:	4b09      	ldr	r3, [pc, #36]	; (2534 <bus_fault_default_isr+0x30>)
    250e:	2101      	movs	r1, #1
    2510:	6818      	ldr	r0, [r3, #0]
    2512:	f005 fe0c 	bl	812e <printHex32_op>
	print(" SCB_BFAR: ");
    2516:	4808      	ldr	r0, [pc, #32]	; (2538 <bus_fault_default_isr+0x34>)
    2518:	f005 fd2a 	bl	7f70 <_print>
	printHex32( SCB_BFAR );
    251c:	4b07      	ldr	r3, [pc, #28]	; (253c <bus_fault_default_isr+0x38>)
    251e:	2101      	movs	r1, #1
    2520:	6818      	ldr	r0, [r3, #0]
    2522:	f005 fe04 	bl	812e <printHex32_op>
	print( NL );
    2526:	4806      	ldr	r0, [pc, #24]	; (2540 <bus_fault_default_isr+0x3c>)
}
    2528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Bus Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_BFAR: ");
	printHex32( SCB_BFAR );
	print( NL );
    252c:	f005 bd20 	b.w	7f70 <_print>
    2530:	00008261 	.word	0x00008261
    2534:	e000ed28 	.word	0xe000ed28
    2538:	00008277 	.word	0x00008277
    253c:	e000ed38 	.word	0xe000ed38
    2540:	0000c0ef 	.word	0x0000c0ef

00002544 <usage_fault_default_isr>:
}


// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
    2544:	b508      	push	{r3, lr}
	print("Usage Fault! SCB_CFSR: ");
    2546:	4806      	ldr	r0, [pc, #24]	; (2560 <usage_fault_default_isr+0x1c>)
    2548:	f005 fd12 	bl	7f70 <_print>
	printHex32( SCB_CFSR );
    254c:	4b05      	ldr	r3, [pc, #20]	; (2564 <usage_fault_default_isr+0x20>)
    254e:	2101      	movs	r1, #1
    2550:	6818      	ldr	r0, [r3, #0]
    2552:	f005 fdec 	bl	812e <printHex32_op>
	print( NL );
    2556:	4804      	ldr	r0, [pc, #16]	; (2568 <usage_fault_default_isr+0x24>)
}
    2558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
	print("Usage Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print( NL );
    255c:	f005 bd08 	b.w	7f70 <_print>
    2560:	00008283 	.word	0x00008283
    2564:	e000ed28 	.word	0xe000ed28
    2568:	0000c0ef 	.word	0x0000c0ef

0000256c <memset>:
	__builtin_unreachable();
}
#endif

void *memset( void *addr, int val, unsigned int len )
{
    256c:	4402      	add	r2, r0
	char *buf = addr;
    256e:	4603      	mov	r3, r0

	for (; len > 0; --len, ++buf)
    2570:	4293      	cmp	r3, r2
    2572:	d002      	beq.n	257a <memset+0xe>
		*buf = val;
    2574:	f803 1b01 	strb.w	r1, [r3], #1
    2578:	e7fa      	b.n	2570 <memset+0x4>
	return (addr);
}
    257a:	4770      	bx	lr

0000257c <memcpy>:
		/* NOTHING */;
	return (val);
}

void *memcpy( void *dst, const void *src, unsigned int len )
{
    257c:	b510      	push	{r4, lr}
    257e:	3901      	subs	r1, #1
    2580:	4402      	add	r2, r0
	char *dstbuf = dst;
    2582:	4603      	mov	r3, r0
	const char *srcbuf = src;

	for (; len > 0; --len, ++dstbuf, ++srcbuf)
    2584:	4293      	cmp	r3, r2
    2586:	d004      	beq.n	2592 <memcpy+0x16>
		*dstbuf = *srcbuf;
    2588:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    258c:	f803 4b01 	strb.w	r4, [r3], #1
    2590:	e7f8      	b.n	2584 <memcpy+0x8>
	return (dst);
}
    2592:	bd10      	pop	{r4, pc}

00002594 <yield>:



// ----- Functions -----

void yield(void) {};
    2594:	4770      	bx	lr
    2596:	0000      	movs	r0, r0

00002598 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2598:	b672      	cpsid	i
	current = SYST_CVR;
    259a:	4b0c      	ldr	r3, [pc, #48]	; (25cc <micros+0x34>)
	count = systick_millis_count;
    259c:	4a0c      	ldr	r2, [pc, #48]	; (25d0 <micros+0x38>)
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    259e:	490d      	ldr	r1, [pc, #52]	; (25d4 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    25a0:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    25a2:	6812      	ldr	r2, [r2, #0]
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    25a4:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    25a6:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
    25a8:	0149      	lsls	r1, r1, #5
    25aa:	d503      	bpl.n	25b4 <micros+0x1c>
    25ac:	490a      	ldr	r1, [pc, #40]	; (25d8 <micros+0x40>)
    25ae:	428b      	cmp	r3, r1
    25b0:	bf88      	it	hi
    25b2:	3201      	addhi	r2, #1
	current = ((F_CPU / 1000) - 1) - current;
	return count * 1000 + current / (F_CPU / 1000000);
    25b4:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
    25b8:	2048      	movs	r0, #72	; 0x48
    25ba:	f203 133f 	addw	r3, r3, #319	; 0x13f
    25be:	fbb3 f3f0 	udiv	r3, r3, r0
}
    25c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    25c6:	fb00 3002 	mla	r0, r0, r2, r3
    25ca:	4770      	bx	lr
    25cc:	e000e018 	.word	0xe000e018
    25d0:	1fff90c4 	.word	0x1fff90c4
    25d4:	e000ed04 	.word	0xe000ed04
    25d8:	0001190e 	.word	0x0001190e

000025dc <delay>:

void delay(uint32_t ms)
{
    25dc:	b538      	push	{r3, r4, r5, lr}
    25de:	4605      	mov	r5, r0
	uint32_t start = micros();
    25e0:	f7ff ffda 	bl	2598 <micros>
    25e4:	4604      	mov	r4, r0

	while (1) {
		if ((micros() - start) >= 1000) {
    25e6:	f7ff ffd7 	bl	2598 <micros>
    25ea:	1b00      	subs	r0, r0, r4
    25ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    25f0:	d303      	bcc.n	25fa <delay+0x1e>
			ms--;
			if (ms == 0) break;
    25f2:	3d01      	subs	r5, #1
    25f4:	d004      	beq.n	2600 <delay+0x24>
			start += 1000;
    25f6:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
		}
		yield();
    25fa:	f7ff ffcb 	bl	2594 <yield>
	}
    25fe:	e7f2      	b.n	25e6 <delay+0xa>
    2600:	bd38      	pop	{r3, r4, r5, pc}

00002602 <I2C_BufferLen>:


inline uint16_t I2C_BufferLen( I2C_Buffer *buffer )
{
	// Tail >= Head
	if ( buffer->tail >= buffer->head )
    2602:	8803      	ldrh	r3, [r0, #0]
    2604:	8841      	ldrh	r1, [r0, #2]
    2606:	4299      	cmp	r1, r3
		return buffer->head + buffer->size - buffer->tail;
    2608:	bf23      	ittte	cs
    260a:	88c2      	ldrhcs	r2, [r0, #6]
    260c:	18d2      	addcs	r2, r2, r3
    260e:	1a50      	subcs	r0, r2, r1

	// Head > Tail
	return buffer->head - buffer->tail;
    2610:	1a58      	subcc	r0, r3, r1
    2612:	b280      	uxth	r0, r0
}
    2614:	4770      	bx	lr
    2616:	0000      	movs	r0, r0

00002618 <I2C_BufferPush>:


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
    2618:	b570      	push	{r4, r5, r6, lr}
    261a:	4605      	mov	r5, r0
    261c:	460c      	mov	r4, r1
	dbug_msg("DATA: ");
    261e:	4813      	ldr	r0, [pc, #76]	; (266c <I2C_BufferPush+0x54>)
	printHex( byte );
    2620:	b2ae      	uxth	r6, r5
}


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
	dbug_msg("DATA: ");
    2622:	f005 fca5 	bl	7f70 <_print>
	printHex( byte );
    2626:	2101      	movs	r1, #1
    2628:	4630      	mov	r0, r6
    262a:	f005 fd44 	bl	80b6 <printHex_op>

	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
    262e:	8861      	ldrh	r1, [r4, #2]
    2630:	8822      	ldrh	r2, [r4, #0]
    2632:	1c4b      	adds	r3, r1, #1
    2634:	4293      	cmp	r3, r2
    2636:	d005      	beq.n	2644 <I2C_BufferPush+0x2c>
    2638:	4291      	cmp	r1, r2
    263a:	88e1      	ldrh	r1, [r4, #6]
    263c:	d20e      	bcs.n	265c <I2C_BufferPush+0x44>
    263e:	1a58      	subs	r0, r3, r1
    2640:	4282      	cmp	r2, r0
    2642:	d10b      	bne.n	265c <I2C_BufferPush+0x44>
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
    2644:	480a      	ldr	r0, [pc, #40]	; (2670 <I2C_BufferPush+0x58>)
    2646:	f005 fc93 	bl	7f70 <_print>
		printHex( byte );
    264a:	4630      	mov	r0, r6
    264c:	2101      	movs	r1, #1
    264e:	f005 fd32 	bl	80b6 <printHex_op>
		print( NL );
    2652:	4808      	ldr	r0, [pc, #32]	; (2674 <I2C_BufferPush+0x5c>)
		buffer->tail++;
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
}
    2654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
		printHex( byte );
		print( NL );
    2658:	f005 bc8a 	b.w	7f70 <_print>
		return;
	}

	// Check for wrap-around case
	if ( buffer->tail + 1 >= buffer->size )
    265c:	428b      	cmp	r3, r1
	{
		buffer->tail = 0;
    265e:	bfa8      	it	ge
    2660:	2300      	movge	r3, #0
	}
	// Normal case
	else
	{
		buffer->tail++;
    2662:	8063      	strh	r3, [r4, #2]
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
    2664:	8863      	ldrh	r3, [r4, #2]
    2666:	68a2      	ldr	r2, [r4, #8]
    2668:	54d5      	strb	r5, [r2, r3]
    266a:	bd70      	pop	{r4, r5, r6, pc}
    266c:	000083bd 	.word	0x000083bd
    2670:	000083d7 	.word	0x000083d7
    2674:	0000c0ef 	.word	0x0000c0ef

00002678 <I2C_TxBufferPop>:
}


uint8_t I2C_TxBufferPop()
{
    2678:	b538      	push	{r3, r4, r5, lr}
	// Return 0xFF if no buffer left (do not rely on this)
	if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) >= I2C_TxBuffer.size )
    267a:	4d23      	ldr	r5, [pc, #140]	; (2708 <I2C_TxBufferPop+0x90>)
    267c:	4628      	mov	r0, r5
    267e:	f7ff ffc0 	bl	2602 <I2C_BufferLen>
    2682:	88eb      	ldrh	r3, [r5, #6]
    2684:	b29b      	uxth	r3, r3
    2686:	4298      	cmp	r0, r3
    2688:	462c      	mov	r4, r5
    268a:	d31b      	bcc.n	26c4 <I2C_TxBufferPop+0x4c>
	{
		erro_msg("No buffer to pop an entry from... ");
    268c:	481f      	ldr	r0, [pc, #124]	; (270c <I2C_TxBufferPop+0x94>)
    268e:	f005 fc6f 	bl	7f70 <_print>
		printHex( I2C_TxBuffer.head );
    2692:	8828      	ldrh	r0, [r5, #0]
    2694:	2101      	movs	r1, #1
    2696:	b280      	uxth	r0, r0
    2698:	f005 fd0d 	bl	80b6 <printHex_op>
		print(" ");
    269c:	481c      	ldr	r0, [pc, #112]	; (2710 <I2C_TxBufferPop+0x98>)
    269e:	f005 fc67 	bl	7f70 <_print>
		printHex( I2C_TxBuffer.tail );
    26a2:	8868      	ldrh	r0, [r5, #2]
    26a4:	2101      	movs	r1, #1
    26a6:	b280      	uxth	r0, r0
    26a8:	f005 fd05 	bl	80b6 <printHex_op>
		print(" ");
    26ac:	4818      	ldr	r0, [pc, #96]	; (2710 <I2C_TxBufferPop+0x98>)
    26ae:	f005 fc5f 	bl	7f70 <_print>
		printHex( I2C_TxBuffer.sequencePos );
    26b2:	7928      	ldrb	r0, [r5, #4]
    26b4:	2101      	movs	r1, #1
    26b6:	f005 fcfe 	bl	80b6 <printHex_op>
		print(NL);
    26ba:	4816      	ldr	r0, [pc, #88]	; (2714 <I2C_TxBufferPop+0x9c>)
    26bc:	f005 fc58 	bl	7f70 <_print>
    26c0:	20ff      	movs	r0, #255	; 0xff
    26c2:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFF;
	}

	// If there is currently no sequence being sent, the first entry in the RingBuffer is the length
	if ( I2C_TxBuffer.sequencePos == 0 )
    26c4:	792b      	ldrb	r3, [r5, #4]
    26c6:	b943      	cbnz	r3, 26da <I2C_TxBufferPop+0x62>
	{
		I2C_TxBuffer.sequencePos = 0xFF; // So this doesn't become an infinite loop
    26c8:	23ff      	movs	r3, #255	; 0xff
    26ca:	712b      	strb	r3, [r5, #4]
		I2C_RxBuffer.sequencePos = I2C_TxBufferPop();
    26cc:	f7ff ffd4 	bl	2678 <I2C_TxBufferPop>
    26d0:	4b11      	ldr	r3, [pc, #68]	; (2718 <I2C_TxBufferPop+0xa0>)
    26d2:	7118      	strb	r0, [r3, #4]
		I2C_TxBuffer.sequencePos = I2C_TxBufferPop();
    26d4:	f7ff ffd0 	bl	2678 <I2C_TxBufferPop>
    26d8:	7128      	strb	r0, [r5, #4]
	}

	uint8_t data = I2C_TxBuffer.buffer[ I2C_TxBuffer.head ];
    26da:	68a2      	ldr	r2, [r4, #8]
    26dc:	8823      	ldrh	r3, [r4, #0]
    26de:	b29b      	uxth	r3, r3
    26e0:	5cd0      	ldrb	r0, [r2, r3]

	// Prune head
	I2C_TxBuffer.head++;
    26e2:	8823      	ldrh	r3, [r4, #0]
    26e4:	3301      	adds	r3, #1
    26e6:	b29b      	uxth	r3, r3
    26e8:	8023      	strh	r3, [r4, #0]

	// Wrap-around case
	if ( I2C_TxBuffer.head >= I2C_TxBuffer.size )
    26ea:	8822      	ldrh	r2, [r4, #0]
    26ec:	88e3      	ldrh	r3, [r4, #6]
    26ee:	b292      	uxth	r2, r2
    26f0:	b29b      	uxth	r3, r3
    26f2:	429a      	cmp	r2, r3
		I2C_TxBuffer.head = 0;
    26f4:	bf22      	ittt	cs
    26f6:	4b04      	ldrcs	r3, [pc, #16]	; (2708 <I2C_TxBufferPop+0x90>)
    26f8:	2200      	movcs	r2, #0
    26fa:	801a      	strhcs	r2, [r3, #0]

	// Decrement buffer sequence (until next stop will be sent)
	I2C_TxBuffer.sequencePos--;
    26fc:	7923      	ldrb	r3, [r4, #4]
    26fe:	3b01      	subs	r3, #1
    2700:	b2db      	uxtb	r3, r3
    2702:	7123      	strb	r3, [r4, #4]
	print(" ");
	printHex( I2C_TxBuffer.sequencePos );
	print(NL);
	*/
	return data;
}
    2704:	bd38      	pop	{r3, r4, r5, pc}
    2706:	bf00      	nop
    2708:	1fff89dc 	.word	0x1fff89dc
    270c:	00008411 	.word	0x00008411
    2710:	00008952 	.word	0x00008952
    2714:	0000c0ef 	.word	0x0000c0ef
    2718:	1fff89d0 	.word	0x1fff89d0

0000271c <i2c0_isr>:


// ----- Interrupt Functions -----

void i2c0_isr()
{
    271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cli(); // Disable Interrupts
    2720:	b672      	cpsid	i

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2722:	4e3a      	ldr	r6, [pc, #232]	; (280c <L_392_delayMicroseconds+0x1e>)

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    2724:	4c3a      	ldr	r4, [pc, #232]	; (2810 <L_392_delayMicroseconds+0x22>)
    2726:	4d3b      	ldr	r5, [pc, #236]	; (2814 <L_392_delayMicroseconds+0x26>)
    2728:	f894 8000 	ldrb.w	r8, [r4]

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    272c:	7833      	ldrb	r3, [r6, #0]
    272e:	f013 0f10 	tst.w	r3, #16

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    2732:	fa5f f888 	uxtb.w	r8, r8
    2736:	4637      	mov	r7, r6
	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2738:	792b      	ldrb	r3, [r5, #4]
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    273a:	d04e      	beq.n	27da <L_339_delayMicroseconds+0x2a>
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    273c:	b163      	cbz	r3, 2758 <i2c0_isr+0x3c>
		{
			// Make sure slave sent an ACK
			if ( status & I2C_S_RXAK )
    273e:	f018 0f01 	tst.w	r8, #1
    2742:	d045      	beq.n	27d0 <L_339_delayMicroseconds+0x20>
			{
				// NACK Detected, disable interrupt
				erro_print("I2C NAK detected...");
    2744:	4834      	ldr	r0, [pc, #208]	; (2818 <L_392_delayMicroseconds+0x2a>)
    2746:	f005 fc13 	bl	7f70 <_print>
				I2C0_C1 = I2C_C1_IICEN;
    274a:	2380      	movs	r3, #128	; 0x80
    274c:	7033      	strb	r3, [r6, #0]

				// Abort Tx Buffer
				I2C_TxBuffer.head = 0;
    274e:	2300      	movs	r3, #0
    2750:	802b      	strh	r3, [r5, #0]
				I2C_TxBuffer.tail = 0;
    2752:	806b      	strh	r3, [r5, #2]
				I2C_TxBuffer.sequencePos = 0;
    2754:	712b      	strb	r3, [r5, #4]
    2756:	e053      	b.n	2800 <L_392_delayMicroseconds+0x12>
				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
			}
		}
		// Receiving data
		else if ( I2C_RxBuffer.sequencePos > 0 )
    2758:	4e30      	ldr	r6, [pc, #192]	; (281c <L_392_delayMicroseconds+0x2e>)
    275a:	7933      	ldrb	r3, [r6, #4]
    275c:	b313      	cbz	r3, 27a4 <i2c0_isr+0x88>
		{
			// Master Receive, addr sent
			if ( status & I2C_S_ARBL )
    275e:	f018 0f10 	tst.w	r8, #16
    2762:	d006      	beq.n	2772 <i2c0_isr+0x56>
			{
				// Arbitration Lost
				erro_print("Arbitration lost...");
    2764:	482e      	ldr	r0, [pc, #184]	; (2820 <L_392_delayMicroseconds+0x32>)
    2766:	f005 fc03 	bl	7f70 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    276a:	2380      	movs	r3, #128	; 0x80
    276c:	703b      	strb	r3, [r7, #0]
				I2C0_S = I2C_S_ARBL | I2C_S_IICIF; // Clear ARBL flag and interrupt
    276e:	2312      	movs	r3, #18
    2770:	7023      	strb	r3, [r4, #0]
			}
			if ( status & I2C_S_RXAK )
    2772:	f018 0f01 	tst.w	r8, #1
    2776:	d004      	beq.n	2782 <i2c0_isr+0x66>
			{
				// Slave Address NACK Detected, disable interrupt
				erro_print("Slave Address I2C NAK detected...");
    2778:	482a      	ldr	r0, [pc, #168]	; (2824 <L_392_delayMicroseconds+0x36>)
    277a:	f005 fbf9 	bl	7f70 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    277e:	2380      	movs	r3, #128	; 0x80
    2780:	e00e      	b.n	27a0 <i2c0_isr+0x84>
			}
			else
			{
				dbug_msg("Attempting to read byte - ");
    2782:	4829      	ldr	r0, [pc, #164]	; (2828 <L_392_delayMicroseconds+0x3a>)
    2784:	f005 fbf4 	bl	7f70 <_print>
				printHex( I2C_RxBuffer.sequencePos );
    2788:	7930      	ldrb	r0, [r6, #4]
    278a:	2101      	movs	r1, #1
    278c:	f005 fc93 	bl	80b6 <printHex_op>
				print( NL );
    2790:	4826      	ldr	r0, [pc, #152]	; (282c <L_392_delayMicroseconds+0x3e>)
    2792:	f005 fbed 	bl	7f70 <_print>
				I2C0_C1 = I2C_RxBuffer.sequencePos == 1
    2796:	7933      	ldrb	r3, [r6, #4]
    2798:	2b01      	cmp	r3, #1
    279a:	bf0c      	ite	eq
    279c:	23e8      	moveq	r3, #232	; 0xe8
    279e:	23e0      	movne	r3, #224	; 0xe0
    27a0:	703b      	strb	r3, [r7, #0]
    27a2:	e02d      	b.n	2800 <L_392_delayMicroseconds+0x12>
#elif F_CPU == 48000000
	uint32_t n = usec << 4;
#elif F_CPU == 24000000
	uint32_t n = usec << 3;
#endif
	asm volatile(
    27a4:	2320      	movs	r3, #32

000027a6 <L_327_delayMicroseconds>:
    27a6:	3b01      	subs	r3, #1
    27a8:	d1fd      	bne.n	27a6 <L_327_delayMicroseconds>
			print(NL);
			*/

			// Delay around STOP to make sure it actually happens...
			delayMicroseconds( 1 );
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27aa:	2380      	movs	r3, #128	; 0x80
    27ac:	703b      	strb	r3, [r7, #0]
    27ae:	23e0      	movs	r3, #224	; 0xe0

000027b0 <L_339_delayMicroseconds>:
    27b0:	3b01      	subs	r3, #1
    27b2:	d1fd      	bne.n	27b0 <L_339_delayMicroseconds>
			delayMicroseconds( 7 );

			// If there is another sequence, start sending
			if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) < I2C_TxBuffer.size )
    27b4:	4628      	mov	r0, r5
    27b6:	f7ff ff24 	bl	2602 <I2C_BufferLen>
    27ba:	88eb      	ldrh	r3, [r5, #6]
    27bc:	b29b      	uxth	r3, r3
    27be:	4298      	cmp	r0, r3
    27c0:	d21e      	bcs.n	2800 <L_392_delayMicroseconds+0x12>
			{
				// Clear status flags
				I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    27c2:	2312      	movs	r3, #18
    27c4:	7023      	strb	r3, [r4, #0]

				// Wait...till the master dies
				while ( I2C0_S & I2C_S_BUSY );
    27c6:	7823      	ldrb	r3, [r4, #0]
    27c8:	069b      	lsls	r3, r3, #26
    27ca:	d4fc      	bmi.n	27c6 <L_339_delayMicroseconds+0x16>

				// Enable I2C interrupt
				I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    27cc:	23f0      	movs	r3, #240	; 0xf0
    27ce:	703b      	strb	r3, [r7, #0]

				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
    27d0:	f7ff ff52 	bl	2678 <I2C_TxBufferPop>
    27d4:	4b16      	ldr	r3, [pc, #88]	; (2830 <L_392_delayMicroseconds+0x42>)
    27d6:	7018      	strb	r0, [r3, #0]
    27d8:	e012      	b.n	2800 <L_392_delayMicroseconds+0x12>
	{
		// XXX Do we need to handle 2nd last byte?
		//I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // No STOP, Rx, NAK on recv

		// Last byte
		if ( I2C_TxBuffer.sequencePos <= 1 )
    27da:	2b01      	cmp	r3, #1
    27dc:	4b14      	ldr	r3, [pc, #80]	; (2830 <L_392_delayMicroseconds+0x42>)
    27de:	d80b      	bhi.n	27f8 <L_392_delayMicroseconds+0xa>
		{
			// Change to Tx mode
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    27e0:	22b0      	movs	r2, #176	; 0xb0
    27e2:	7032      	strb	r2, [r6, #0]

			// Grab last byte
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27e4:	7818      	ldrb	r0, [r3, #0]
    27e6:	490d      	ldr	r1, [pc, #52]	; (281c <L_392_delayMicroseconds+0x2e>)
    27e8:	f7ff ff16 	bl	2618 <I2C_BufferPush>
    27ec:	2320      	movs	r3, #32

000027ee <L_392_delayMicroseconds>:
    27ee:	3b01      	subs	r3, #1
    27f0:	d1fd      	bne.n	27ee <L_392_delayMicroseconds>

			delayMicroseconds( 1 ); // Should be enough time before issuing the stop
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27f2:	2380      	movs	r3, #128	; 0x80
    27f4:	7033      	strb	r3, [r6, #0]
    27f6:	e003      	b.n	2800 <L_392_delayMicroseconds+0x12>
		}
		else
		{
			// Retrieve data
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27f8:	7818      	ldrb	r0, [r3, #0]
    27fa:	4908      	ldr	r1, [pc, #32]	; (281c <L_392_delayMicroseconds+0x2e>)
    27fc:	f7ff ff0c 	bl	2618 <I2C_BufferPush>
		}
	}

	I2C0_S = I2C_S_IICIF; // Clear interrupt
    2800:	2302      	movs	r3, #2
    2802:	7023      	strb	r3, [r4, #0]

	sei(); // Re-enable Interrupts
    2804:	b662      	cpsie	i
    2806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    280a:	bf00      	nop
    280c:	40066002 	.word	0x40066002
    2810:	40066003 	.word	0x40066003
    2814:	1fff89dc 	.word	0x1fff89dc
    2818:	00008449 	.word	0x00008449
    281c:	1fff89d0 	.word	0x1fff89d0
    2820:	00008474 	.word	0x00008474
    2824:	0000849f 	.word	0x0000849f
    2828:	000084d8 	.word	0x000084d8
    282c:	0000c0ef 	.word	0x0000c0ef
    2830:	40066004 	.word	0x40066004

00002834 <I2C_Send>:
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2838:	4c32      	ldr	r4, [pc, #200]	; (2904 <I2C_Send+0xd0>)
    283a:	88e3      	ldrh	r3, [r4, #6]
    283c:	fa1f f981 	uxth.w	r9, r1
    2840:	b29b      	uxth	r3, r3
    2842:	454b      	cmp	r3, r9
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2844:	4680      	mov	r8, r0
    2846:	460f      	mov	r7, r1
    2848:	4692      	mov	sl, r2
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    284a:	d355      	bcc.n	28f8 <I2C_Send+0xc4>
	// The second element in the new buffer is the length of the buffer sequence (+1)
	uint16_t newTail = buffer->tail + sendLen + 2;
	if ( newTail >= buffer->size )
		newTail -= buffer->size;

	if ( I2C_BufferLen( buffer ) < sendLen + 2 )
    284c:	4620      	mov	r0, r4
    284e:	f7ff fed8 	bl	2602 <I2C_BufferLen>
    2852:	1c7b      	adds	r3, r7, #1
    2854:	4283      	cmp	r3, r0
    2856:	da4f      	bge.n	28f8 <I2C_Send+0xc4>
	printHex( newTail );
	print("@");
*/

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;
    2858:	8825      	ldrh	r5, [r4, #0]
    285a:	8863      	ldrh	r3, [r4, #2]
    285c:	b2ad      	uxth	r5, r5
    285e:	b29b      	uxth	r3, r3
    2860:	429d      	cmp	r5, r3
    2862:	bf0c      	ite	eq
    2864:	2501      	moveq	r5, #1
    2866:	2502      	movne	r5, #2

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    2868:	2300      	movs	r3, #0

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
    286a:	461e      	mov	r6, r3
			buffer->buffer[ buffer->tail ] = data[ c ];
			break;
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
    286c:	4621      	mov	r1, r4
		{
			buffer->tail = 0;
    286e:	469e      	mov	lr, r3
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    2870:	4599      	cmp	r9, r3
    2872:	d928      	bls.n	28c6 <I2C_Send+0x92>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
    2874:	b14e      	cbz	r6, 288a <I2C_Send+0x56>
    2876:	2e01      	cmp	r6, #1
    2878:	d110      	bne.n	289c <I2C_Send+0x68>
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    287a:	8862      	ldrh	r2, [r4, #2]
    287c:	68a0      	ldr	r0, [r4, #8]
    287e:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2880:	3b01      	subs	r3, #1
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    2882:	5487      	strb	r7, [r0, r2]
			bufferHeaderPos++;
			c--;
    2884:	b29b      	uxth	r3, r3
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
			bufferHeaderPos++;
    2886:	2602      	movs	r6, #2
    2888:	e00f      	b.n	28aa <I2C_Send+0x76>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    288a:	8862      	ldrh	r2, [r4, #2]
    288c:	68a0      	ldr	r0, [r4, #8]
    288e:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2890:	3b01      	subs	r3, #1
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    2892:	f800 a002 	strb.w	sl, [r0, r2]
			bufferHeaderPos++;
			c--;
    2896:	b29b      	uxth	r3, r3
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
			bufferHeaderPos++;
    2898:	2601      	movs	r6, #1
    289a:	e006      	b.n	28aa <I2C_Send+0x76>
			bufferHeaderPos++;
			c--;
			break;

		default:
			buffer->buffer[ buffer->tail ] = data[ c ];
    289c:	8862      	ldrh	r2, [r4, #2]
    289e:	68a0      	ldr	r0, [r4, #8]
    28a0:	f818 c003 	ldrb.w	ip, [r8, r3]
    28a4:	b292      	uxth	r2, r2
    28a6:	f800 c002 	strb.w	ip, [r0, r2]
			break;
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
    28aa:	8860      	ldrh	r0, [r4, #2]
    28ac:	88e2      	ldrh	r2, [r4, #6]
    28ae:	b280      	uxth	r0, r0
    28b0:	3001      	adds	r0, #1
    28b2:	b292      	uxth	r2, r2
    28b4:	4290      	cmp	r0, r2
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28b6:	f103 0301 	add.w	r3, r3, #1
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
		{
			buffer->tail = 0;
    28ba:	bfac      	ite	ge
    28bc:	f8a1 e002 	strhge.w	lr, [r1, #2]
		}
		// Normal case
		else
		{
			buffer->tail++;
    28c0:	8048      	strhlt	r0, [r1, #2]
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28c2:	b29b      	uxth	r3, r3
    28c4:	e7d4      	b.n	2870 <I2C_Send+0x3c>
{
	// Check head and tail pointers
	// If full, return 0
	// If empty, start up I2C Master Tx
	// If buffer is non-empty and non-full, just append to the buffer
	switch ( I2C_BufferCopy( data, sendLen, recvLen, (I2C_Buffer*)&I2C_TxBuffer ) )
    28c6:	2d01      	cmp	r5, #1
    28c8:	d119      	bne.n	28fe <I2C_Send+0xca>
		return 0;

	// Empty buffer, initialize I2C
	case 1:
		// Clear status flags
		I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    28ca:	4a0f      	ldr	r2, [pc, #60]	; (2908 <I2C_Send+0xd4>)
    28cc:	2312      	movs	r3, #18
    28ce:	7013      	strb	r3, [r2, #0]

		// Check to see if we already have control of the bus
		if ( I2C0_C1 & I2C_C1_MST )
    28d0:	4b0e      	ldr	r3, [pc, #56]	; (290c <I2C_Send+0xd8>)
    28d2:	7819      	ldrb	r1, [r3, #0]
    28d4:	0688      	lsls	r0, r1, #26
    28d6:	d501      	bpl.n	28dc <I2C_Send+0xa8>
		{
			// Already the master (ah yeah), send a repeated start
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    28d8:	22b4      	movs	r2, #180	; 0xb4
    28da:	e003      	b.n	28e4 <I2C_Send+0xb0>
		}
		// Otherwise, seize control
		else
		{
			// Wait...till the master dies
			while ( I2C0_S & I2C_S_BUSY );
    28dc:	7811      	ldrb	r1, [r2, #0]
    28de:	0689      	lsls	r1, r1, #26
    28e0:	d4fc      	bmi.n	28dc <I2C_Send+0xa8>

			// Now we're the master (ah yisss), get ready to send stuffs
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    28e2:	22b0      	movs	r2, #176	; 0xb0
    28e4:	701a      	strb	r2, [r3, #0]
		}

		// Enable I2C interrupt
		I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    28e6:	22f0      	movs	r2, #240	; 0xf0
    28e8:	701a      	strb	r2, [r3, #0]

		// Depending on what type of transfer, the first byte is configured for R or W
		I2C0_D = I2C_TxBufferPop();
    28ea:	f7ff fec5 	bl	2678 <I2C_TxBufferPop>
    28ee:	4b08      	ldr	r3, [pc, #32]	; (2910 <I2C_Send+0xdc>)
    28f0:	7018      	strb	r0, [r3, #0]

		return 1;
    28f2:	2001      	movs	r0, #1
    28f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printHex( sendLen );
		print("|");
		printHex( I2C_TxBuffer.size );
		print( NL );
		*/
		return 0;
    28f8:	2000      	movs	r0, #0
    28fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return 1;
	}

	// Dirty buffer, I2C already initialized
	return 2;
    28fe:	2002      	movs	r0, #2
}
    2900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2904:	1fff89dc 	.word	0x1fff89dc
    2908:	40066003 	.word	0x40066003
    290c:	40066002 	.word	0x40066002
    2910:	40066004 	.word	0x40066004

00002914 <LED_zeroPages>:
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2918:	461d      	mov	r5, r3
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    291a:	4b1b      	ldr	r3, [pc, #108]	; (2988 <LED_zeroPages+0x74>)
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    291c:	b0b0      	sub	sp, #192	; 0xc0
    291e:	4614      	mov	r4, r2
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    2920:	881b      	ldrh	r3, [r3, #0]
    2922:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2926:	4607      	mov	r7, r0
    2928:	4688      	mov	r8, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };

	// Max length of a page + chip id + reg start
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
    292a:	22b6      	movs	r2, #182	; 0xb6
    292c:	2100      	movs	r1, #0
    292e:	a802      	add	r0, sp, #8
		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
			delay(1);

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    2930:	3502      	adds	r5, #2
{
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };

	// Max length of a page + chip id + reg start
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
    2932:	f7ff fe1b 	bl	256c <memset>
	fullPage[0] = 0xE8;     // Set chip id
    2936:	23e8      	movs	r3, #232	; 0xe8
	fullPage[1] = startReg; // Set start reg
    2938:	f88d 4009 	strb.w	r4, [sp, #9]
		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
			delay(1);

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    293c:	1b2c      	subs	r4, r5, r4
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };

	// Max length of a page + chip id + reg start
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
	fullPage[0] = 0xE8;     // Set chip id
    293e:	f88d 3008 	strb.w	r3, [sp, #8]
	fullPage[1] = startReg; // Set start reg

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    2942:	463e      	mov	r6, r7
		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
			delay(1);

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    2944:	b2e4      	uxtb	r4, r4
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
	fullPage[0] = 0xE8;     // Set chip id
	fullPage[1] = startReg; // Set start reg

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    2946:	eb07 0308 	add.w	r3, r7, r8
    294a:	429e      	cmp	r6, r3
    294c:	da18      	bge.n	2980 <LED_zeroPages+0x6c>
	{
		// Set page
		pageSetup[2] = page;
    294e:	f88d 6006 	strb.w	r6, [sp, #6]

		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2952:	2200      	movs	r2, #0
    2954:	2103      	movs	r1, #3
    2956:	a801      	add	r0, sp, #4
    2958:	f7ff ff6c 	bl	2834 <I2C_Send>
    295c:	b918      	cbnz	r0, 2966 <LED_zeroPages+0x52>
			delay(1);
    295e:	2001      	movs	r0, #1
    2960:	f7ff fe3c 	bl	25dc <delay>
    2964:	e7f5      	b.n	2952 <LED_zeroPages+0x3e>

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    2966:	2200      	movs	r2, #0
    2968:	4621      	mov	r1, r4
    296a:	a802      	add	r0, sp, #8
    296c:	f7ff ff62 	bl	2834 <I2C_Send>
    2970:	b918      	cbnz	r0, 297a <LED_zeroPages+0x66>
			delay(1);
    2972:	2001      	movs	r0, #1
    2974:	f7ff fe32 	bl	25dc <delay>
    2978:	e7f5      	b.n	2966 <LED_zeroPages+0x52>
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
	fullPage[0] = 0xE8;     // Set chip id
	fullPage[1] = startReg; // Set start reg

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    297a:	3601      	adds	r6, #1
    297c:	b2f6      	uxtb	r6, r6
    297e:	e7e2      	b.n	2946 <LED_zeroPages+0x32>

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
			delay(1);
	}
}
    2980:	b030      	add	sp, #192	; 0xc0
    2982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2986:	bf00      	nop
    2988:	000082b1 	.word	0x000082b1

0000298c <cliFunc_ledZero>:
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
}

void cliFunc_ledZero( char* args )
{
    298c:	b510      	push	{r4, lr}
	print( NL ); // No \r\n by default after the command is entered
    298e:	4805      	ldr	r0, [pc, #20]	; (29a4 <cliFunc_ledZero+0x18>)
    2990:	f005 faee 	bl	7f70 <_print>
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    2994:	23b4      	movs	r3, #180	; 0xb4
    2996:	2224      	movs	r2, #36	; 0x24
    2998:	2108      	movs	r1, #8
    299a:	2000      	movs	r0, #0
}
    299c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void cliFunc_ledZero( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    29a0:	f7ff bfb8 	b.w	2914 <LED_zeroPages>
    29a4:	0000c0ef 	.word	0x0000c0ef

000029a8 <LED_sendPage>:
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29aa:	23e8      	movs	r3, #232	; 0xe8
    29ac:	f88d 3004 	strb.w	r3, [sp, #4]
    29b0:	23fd      	movs	r3, #253	; 0xfd
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29b2:	4604      	mov	r4, r0
    29b4:	460d      	mov	r5, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29b6:	f88d 3005 	strb.w	r3, [sp, #5]
    29ba:	f88d 2006 	strb.w	r2, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    29be:	2200      	movs	r2, #0
    29c0:	2103      	movs	r1, #3
    29c2:	a801      	add	r0, sp, #4
    29c4:	f7ff ff36 	bl	2834 <I2C_Send>
    29c8:	b918      	cbnz	r0, 29d2 <LED_sendPage+0x2a>
		delay(1);
    29ca:	2001      	movs	r0, #1
    29cc:	f7ff fe06 	bl	25dc <delay>
    29d0:	e7f5      	b.n	29be <LED_sendPage+0x16>

	// Write page to I2C Tx Buffer
	while ( I2C_Send( buffer, len, 0 ) == 0 )
    29d2:	2200      	movs	r2, #0
    29d4:	4629      	mov	r1, r5
    29d6:	4620      	mov	r0, r4
    29d8:	f7ff ff2c 	bl	2834 <I2C_Send>
    29dc:	b918      	cbnz	r0, 29e6 <LED_sendPage+0x3e>
		delay(1);
    29de:	2001      	movs	r0, #1
    29e0:	f7ff fdfc 	bl	25dc <delay>
    29e4:	e7f5      	b.n	29d2 <LED_sendPage+0x2a>

}
    29e6:	b003      	add	sp, #12
    29e8:	bd30      	pop	{r4, r5, pc}
    29ea:	0000      	movs	r0, r0

000029ec <cliFunc_ledTest>:
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );

}

void cliFunc_ledTest( char* args )
{
    29ec:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    29ee:	4805      	ldr	r0, [pc, #20]	; (2a04 <cliFunc_ledTest+0x18>)
    29f0:	f005 fabe 	bl	7f70 <_print>
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29f4:	2200      	movs	r2, #0
    29f6:	2192      	movs	r1, #146	; 0x92
    29f8:	4803      	ldr	r0, [pc, #12]	; (2a08 <cliFunc_ledTest+0x1c>)
}
    29fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void cliFunc_ledTest( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29fe:	f7ff bfd3 	b.w	29a8 <LED_sendPage>
    2a02:	bf00      	nop
    2a04:	0000c0ef 	.word	0x0000c0ef
    2a08:	000085df 	.word	0x000085df

00002a0c <LED_writeReg>:
		delay(1);

}

void LED_writeReg( uint8_t reg, uint8_t val, uint8_t page )
{
    2a0c:	b513      	push	{r0, r1, r4, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2a0e:	23e8      	movs	r3, #232	; 0xe8
    2a10:	24fd      	movs	r4, #253	; 0xfd
    2a12:	f88d 3000 	strb.w	r3, [sp]
    2a16:	f88d 4001 	strb.w	r4, [sp, #1]
    2a1a:	f88d 2002 	strb.w	r2, [sp, #2]

	// Reg Write Setup
	uint8_t writeData[] = { 0xE8, reg, val };
    2a1e:	f88d 3004 	strb.w	r3, [sp, #4]
    2a22:	f88d 0005 	strb.w	r0, [sp, #5]
    2a26:	f88d 1006 	strb.w	r1, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2a2a:	2200      	movs	r2, #0
    2a2c:	2103      	movs	r1, #3
    2a2e:	4668      	mov	r0, sp
    2a30:	f7ff ff00 	bl	2834 <I2C_Send>
    2a34:	b918      	cbnz	r0, 2a3e <LED_writeReg+0x32>
		delay(1);
    2a36:	2001      	movs	r0, #1
    2a38:	f7ff fdd0 	bl	25dc <delay>
    2a3c:	e7f5      	b.n	2a2a <LED_writeReg+0x1e>

	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
    2a3e:	2200      	movs	r2, #0
    2a40:	2103      	movs	r1, #3
    2a42:	a801      	add	r0, sp, #4
    2a44:	f7ff fef6 	bl	2834 <I2C_Send>
    2a48:	b918      	cbnz	r0, 2a52 <LED_writeReg+0x46>
		delay(1);
    2a4a:	2001      	movs	r0, #1
    2a4c:	f7ff fdc6 	bl	25dc <delay>
    2a50:	e7f5      	b.n	2a3e <LED_writeReg+0x32>
}
    2a52:	b002      	add	sp, #8
    2a54:	bd10      	pop	{r4, pc}
    2a56:	0000      	movs	r0, r0

00002a58 <LED_setup>:
	LED_writeReg( 0x0A, 0x01, 0x0B );
}

// Setup
inline void LED_setup()
{
    2a58:	b508      	push	{r3, lr}
	// Register Scan CLI dictionary
	CLI_registerDictionary( ledCLIDict, ledCLIDictName );
    2a5a:	4925      	ldr	r1, [pc, #148]	; (2af0 <LED_setup+0x98>)
    2a5c:	4825      	ldr	r0, [pc, #148]	; (2af4 <LED_setup+0x9c>)
    2a5e:	f005 f81f 	bl	7aa0 <CLI_registerDictionary>
// ----- Functions -----

inline void I2C_setup()
{
	// Enable I2C internal clock
	SIM_SCGC4 |= SIM_SCGC4_I2C0; // Bus 0
    2a62:	4a25      	ldr	r2, [pc, #148]	; (2af8 <LED_setup+0xa0>)
    2a64:	6813      	ldr	r3, [r2, #0]
    2a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a6a:	6013      	str	r3, [r2, #0]

	// External pull-up resistor
	PORTB_PCR0 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a6c:	4a23      	ldr	r2, [pc, #140]	; (2afc <LED_setup+0xa4>)
    2a6e:	f44f 7319 	mov.w	r3, #612	; 0x264
    2a72:	6013      	str	r3, [r2, #0]
	PORTB_PCR1 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a74:	6053      	str	r3, [r2, #4]

	// SCL Frequency Divider
	// 400kHz -> 120 (0x85) @ 48 MHz F_BUS
	I2C0_F = 0x85;
    2a76:	4b22      	ldr	r3, [pc, #136]	; (2b00 <LED_setup+0xa8>)
    2a78:	2285      	movs	r2, #133	; 0x85
    2a7a:	701a      	strb	r2, [r3, #0]
	I2C0_FLT = 4;
    2a7c:	2204      	movs	r2, #4
    2a7e:	715a      	strb	r2, [r3, #5]
	I2C0_C1 = I2C_C1_IICEN;
    2a80:	2280      	movs	r2, #128	; 0x80
    2a82:	705a      	strb	r2, [r3, #1]
	I2C0_C2 = I2C_C2_HDRS; // High drive select
    2a84:	2220      	movs	r2, #32
    2a86:	711a      	strb	r2, [r3, #4]

	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
    2a88:	4b1e      	ldr	r3, [pc, #120]	; (2b04 <LED_setup+0xac>)
    2a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2a8e:	601a      	str	r2, [r3, #0]
	// Initialize I2C
	I2C_setup();

	// Zero out Frame Registers
	// This needs to be done before disabling the hardware shutdown (or the leds will do undefined things)
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2a90:	2101      	movs	r1, #1
    2a92:	230c      	movs	r3, #12
    2a94:	2200      	movs	r2, #0
    2a96:	200b      	movs	r0, #11
    2a98:	f7ff ff3c 	bl	2914 <LED_zeroPages>

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
    2a9c:	4a1a      	ldr	r2, [pc, #104]	; (2b08 <LED_setup+0xb0>)
    2a9e:	6813      	ldr	r3, [r2, #0]
    2aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2aa4:	6013      	str	r3, [r2, #0]
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2aa6:	4b19      	ldr	r3, [pc, #100]	; (2b0c <LED_setup+0xb4>)
    2aa8:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2aac:	601a      	str	r2, [r3, #0]
	GPIOB_PSOR |= (1<<16);
    2aae:	4a18      	ldr	r2, [pc, #96]	; (2b10 <LED_setup+0xb8>)
    2ab0:	6813      	ldr	r3, [r2, #0]
    2ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ab6:	6013      	str	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2ab8:	2200      	movs	r2, #0
    2aba:	23b4      	movs	r3, #180	; 0xb4
    2abc:	4610      	mov	r0, r2
    2abe:	2108      	movs	r1, #8
    2ac0:	f7ff ff28 	bl	2914 <LED_zeroPages>

	// Enable LEDs based upon mask
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2ac4:	2200      	movs	r2, #0
    2ac6:	2114      	movs	r1, #20
    2ac8:	4812      	ldr	r0, [pc, #72]	; (2b14 <LED_setup+0xbc>)
    2aca:	f7ff ff6d 	bl	29a8 <LED_sendPage>

	// Set default brightness
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    2ace:	2200      	movs	r2, #0
    2ad0:	2192      	movs	r1, #146	; 0x92
    2ad2:	4811      	ldr	r0, [pc, #68]	; (2b18 <LED_setup+0xc0>)
    2ad4:	f7ff ff68 	bl	29a8 <LED_sendPage>

	// Do not disable software shutdown of ISSI chip unless current is high enough
	// Require at least 150 mA
	// May be enabled/disabled at a later time
	if ( Output_current_available() >= 150 )
    2ad8:	f003 fd7e 	bl	65d8 <Output_current_available>
    2adc:	2895      	cmp	r0, #149	; 0x95
    2ade:	d906      	bls.n	2aee <LED_setup+0x96>
	{
		// Disable Software shutdown of ISSI chip
		LED_writeReg( 0x0A, 0x01, 0x0B );
    2ae0:	220b      	movs	r2, #11
    2ae2:	2101      	movs	r1, #1
    2ae4:	200a      	movs	r0, #10
	}
}
    2ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Require at least 150 mA
	// May be enabled/disabled at a later time
	if ( Output_current_available() >= 150 )
	{
		// Disable Software shutdown of ISSI chip
		LED_writeReg( 0x0A, 0x01, 0x0B );
    2aea:	f7ff bf8f 	b.w	2a0c <LED_writeReg>
    2aee:	bd08      	pop	{r3, pc}
    2af0:	00008773 	.word	0x00008773
    2af4:	00008318 	.word	0x00008318
    2af8:	40048034 	.word	0x40048034
    2afc:	4004a000 	.word	0x4004a000
    2b00:	40066001 	.word	0x40066001
    2b04:	e000e100 	.word	0xe000e100
    2b08:	400ff054 	.word	0x400ff054
    2b0c:	4004a040 	.word	0x4004a040
    2b10:	400ff044 	.word	0x400ff044
    2b14:	0000875f 	.word	0x0000875f
    2b18:	000085df 	.word	0x000085df

00002b1c <cliFunc_ledStart>:
		data[1]++;
	}
}

void cliFunc_ledStart( char* args )
{
    2b1c:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    2b1e:	480a      	ldr	r0, [pc, #40]	; (2b48 <cliFunc_ledStart+0x2c>)
    2b20:	f005 fa26 	bl	7f70 <_print>
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2b24:	230c      	movs	r3, #12
    2b26:	2200      	movs	r2, #0
    2b28:	2101      	movs	r1, #1
    2b2a:	200b      	movs	r0, #11
    2b2c:	f7ff fef2 	bl	2914 <LED_zeroPages>
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2b30:	220b      	movs	r2, #11
    2b32:	2101      	movs	r1, #1
    2b34:	200a      	movs	r0, #10
    2b36:	f7ff ff69 	bl	2a0c <LED_writeReg>
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b3a:	2200      	movs	r2, #0
    2b3c:	2114      	movs	r1, #20
    2b3e:	4803      	ldr	r0, [pc, #12]	; (2b4c <cliFunc_ledStart+0x30>)

}
    2b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b44:	f7ff bf30 	b.w	29a8 <LED_sendPage>
    2b48:	0000c0ef 	.word	0x0000c0ef
    2b4c:	0000875f 	.word	0x0000875f

00002b50 <LED_readPage>:
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2b52:	460c      	mov	r4, r1
    2b54:	4606      	mov	r6, r0
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b56:	220b      	movs	r2, #11
    2b58:	2100      	movs	r1, #0
    2b5a:	200a      	movs	r0, #10
    2b5c:	f7ff ff56 	bl	2a0c <LED_writeReg>

	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2b60:	23e8      	movs	r3, #232	; 0xe8
    2b62:	f88d 300c 	strb.w	r3, [sp, #12]
    2b66:	23fd      	movs	r3, #253	; 0xfd
    2b68:	f88d 300d 	strb.w	r3, [sp, #13]
    2b6c:	f88d 400e 	strb.w	r4, [sp, #14]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2b70:	2200      	movs	r2, #0
    2b72:	2103      	movs	r1, #3
    2b74:	a803      	add	r0, sp, #12
    2b76:	f7ff fe5d 	bl	2834 <I2C_Send>
    2b7a:	b918      	cbnz	r0, 2b84 <LED_readPage+0x34>
		delay(1);
    2b7c:	2001      	movs	r0, #1
    2b7e:	f7ff fd2d 	bl	25dc <delay>
    2b82:	e7f5      	b.n	2b70 <LED_readPage+0x20>

	// Register Setup
	uint8_t regSetup[] = { 0xE8, 0x00 };
    2b84:	23e8      	movs	r3, #232	; 0xe8
    2b86:	2400      	movs	r4, #0
    2b88:	f88d 3008 	strb.w	r3, [sp, #8]
    2b8c:	f88d 4009 	strb.w	r4, [sp, #9]

	// Read each register in the page
	for ( uint8_t reg = 0; reg < len; reg++ )
    2b90:	42b4      	cmp	r4, r6
    2b92:	b2e3      	uxtb	r3, r4
    2b94:	d01e      	beq.n	2bd4 <LED_readPage+0x84>
	{
		// Update register to read
		regSetup[1] = reg;
    2b96:	f88d 3009 	strb.w	r3, [sp, #9]

		// Configure register
		while ( I2C_Send( regSetup, sizeof( regSetup ), 0 ) == 0 )
    2b9a:	2200      	movs	r2, #0
    2b9c:	2102      	movs	r1, #2
    2b9e:	a802      	add	r0, sp, #8
    2ba0:	f7ff fe48 	bl	2834 <I2C_Send>
    2ba4:	b918      	cbnz	r0, 2bae <LED_readPage+0x5e>
			delay(1);
    2ba6:	2001      	movs	r0, #1
    2ba8:	f7ff fd18 	bl	25dc <delay>
    2bac:	e7f5      	b.n	2b9a <LED_readPage+0x4a>

		// Register Read Command
		uint8_t regReadCmd[] = { 0xE9 };
    2bae:	ad04      	add	r5, sp, #16
    2bb0:	23e9      	movs	r3, #233	; 0xe9
    2bb2:	f805 3d0c 	strb.w	r3, [r5, #-12]!

		// Request single register byte
		while ( I2C_Send( regReadCmd, sizeof( regReadCmd ), 1 ) == 0 )
    2bb6:	2201      	movs	r2, #1
    2bb8:	4611      	mov	r1, r2
    2bba:	4628      	mov	r0, r5
    2bbc:	f7ff fe3a 	bl	2834 <I2C_Send>
    2bc0:	b918      	cbnz	r0, 2bca <LED_readPage+0x7a>
			delay(1);
    2bc2:	2001      	movs	r0, #1
    2bc4:	f7ff fd0a 	bl	25dc <delay>
    2bc8:	e7f5      	b.n	2bb6 <LED_readPage+0x66>
		dbug_print("NEXT");
    2bca:	4806      	ldr	r0, [pc, #24]	; (2be4 <LED_readPage+0x94>)
    2bcc:	f005 f9d0 	bl	7f70 <_print>
    2bd0:	3401      	adds	r4, #1
    2bd2:	e7dd      	b.n	2b90 <LED_readPage+0x40>
	}

	// Disable software shutdown
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2bd4:	220b      	movs	r2, #11
    2bd6:	2101      	movs	r1, #1
    2bd8:	200a      	movs	r0, #10
    2bda:	f7ff ff17 	bl	2a0c <LED_writeReg>
}
    2bde:	b004      	add	sp, #16
    2be0:	bd70      	pop	{r4, r5, r6, pc}
    2be2:	bf00      	nop
    2be4:	00008506 	.word	0x00008506

00002be8 <cliFunc_ledRPage>:
	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
}

// TODO Currently not working correctly
void cliFunc_ledRPage( char* args )
{
    2be8:	b513      	push	{r0, r1, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2bea:	aa01      	add	r2, sp, #4
    2bec:	4669      	mov	r1, sp
    2bee:	f004 fedf 	bl	79b0 <CLI_argumentIsolation>

	// Default to 0 if no argument is given
	uint8_t page = 0;

	if ( arg1Ptr[0] != '\0' )
    2bf2:	9800      	ldr	r0, [sp, #0]
    2bf4:	7804      	ldrb	r4, [r0, #0]
    2bf6:	b114      	cbz	r4, 2bfe <cliFunc_ledRPage+0x16>
	{
		page = (uint8_t)numToInt( arg1Ptr );
    2bf8:	f005 facc 	bl	8194 <numToInt>
    2bfc:	b2c4      	uxtb	r4, r0
	}

	// No \r\n by default after the command is entered
	print( NL );
    2bfe:	4804      	ldr	r0, [pc, #16]	; (2c10 <cliFunc_ledRPage+0x28>)
    2c00:	f005 f9b6 	bl	7f70 <_print>

	LED_readPage( 0x1, page );
    2c04:	4621      	mov	r1, r4
    2c06:	2001      	movs	r0, #1
    2c08:	f7ff ffa2 	bl	2b50 <LED_readPage>
	//LED_readPage( 0xB4, page );
}
    2c0c:	b002      	add	sp, #8
    2c0e:	bd10      	pop	{r4, pc}
    2c10:	0000c0ef 	.word	0x0000c0ef

00002c14 <cliFunc_i2cSend>:

// ----- CLI Command Functions -----

// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
    2c14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c16:	ae04      	add	r6, sp, #16

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c18:	2500      	movs	r5, #0
// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c1a:	f846 0d0c 	str.w	r0, [r6, #-12]!
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c1e:	481b      	ldr	r0, [pc, #108]	; (2c8c <cliFunc_i2cSend+0x78>)
    2c20:	f005 f9a6 	bl	7f70 <_print>
	info_msg("Sending: ");
    2c24:	481a      	ldr	r0, [pc, #104]	; (2c90 <cliFunc_i2cSend+0x7c>)
    2c26:	f005 f9a3 	bl	7f70 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2c2a:	9801      	ldr	r0, [sp, #4]
    2c2c:	4632      	mov	r2, r6
    2c2e:	4669      	mov	r1, sp
    2c30:	f004 febe 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2c34:	9800      	ldr	r0, [sp, #0]
    2c36:	7803      	ldrb	r3, [r0, #0]
    2c38:	b1eb      	cbz	r3, 2c76 <cliFunc_i2cSend+0x62>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2c3a:	2b7c      	cmp	r3, #124	; 0x7c
    2c3c:	d10a      	bne.n	2c54 <cliFunc_i2cSend+0x40>
		{
			print("| ");
    2c3e:	4815      	ldr	r0, [pc, #84]	; (2c94 <cliFunc_i2cSend+0x80>)
    2c40:	f005 f996 	bl	7f70 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2c44:	2200      	movs	r2, #0
    2c46:	4629      	mov	r1, r5
    2c48:	a802      	add	r0, sp, #8
    2c4a:	f7ff fdf3 	bl	2834 <I2C_Send>
			bufferLen = 0;
    2c4e:	2400      	movs	r4, #0
    2c50:	4625      	mov	r5, r4
    2c52:	e7ea      	b.n	2c2a <cliFunc_i2cSend+0x16>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2c54:	f005 fa9e 	bl	8194 <numToInt>
    2c58:	ab04      	add	r3, sp, #16
    2c5a:	1c6c      	adds	r4, r5, #1
    2c5c:	441d      	add	r5, r3
    2c5e:	b2e4      	uxtb	r4, r4
    2c60:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2c64:	9800      	ldr	r0, [sp, #0]
    2c66:	f003 fca7 	bl	65b8 <Output_putstr>
		print(" ");
    2c6a:	480b      	ldr	r0, [pc, #44]	; (2c98 <cliFunc_i2cSend+0x84>)
    2c6c:	f005 f980 	bl	7f70 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2c70:	2c08      	cmp	r4, #8
    2c72:	d1ed      	bne.n	2c50 <cliFunc_i2cSend+0x3c>
    2c74:	e000      	b.n	2c78 <cliFunc_i2cSend+0x64>
    2c76:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2c78:	4804      	ldr	r0, [pc, #16]	; (2c8c <cliFunc_i2cSend+0x78>)
    2c7a:	f005 f979 	bl	7f70 <_print>

	I2C_Send( buffer, bufferLen, 0 );
    2c7e:	2200      	movs	r2, #0
    2c80:	4621      	mov	r1, r4
    2c82:	a802      	add	r0, sp, #8
    2c84:	f7ff fdd6 	bl	2834 <I2C_Send>
}
    2c88:	b004      	add	sp, #16
    2c8a:	bd70      	pop	{r4, r5, r6, pc}
    2c8c:	0000c0ef 	.word	0x0000c0ef
    2c90:	00008520 	.word	0x00008520
    2c94:	0000853c 	.word	0x0000853c
    2c98:	00008952 	.word	0x00008952

00002c9c <cliFunc_i2cRecv>:

void cliFunc_i2cRecv( char* args )
{
    2c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c9e:	ae04      	add	r6, sp, #16

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2ca0:	2500      	movs	r5, #0

void cliFunc_i2cRecv( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2ca2:	f846 0d0c 	str.w	r0, [r6, #-12]!
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2ca6:	481b      	ldr	r0, [pc, #108]	; (2d14 <cliFunc_i2cRecv+0x78>)
    2ca8:	f005 f962 	bl	7f70 <_print>
	info_msg("Sending: ");
    2cac:	481a      	ldr	r0, [pc, #104]	; (2d18 <cliFunc_i2cRecv+0x7c>)
    2cae:	f005 f95f 	bl	7f70 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2cb2:	9801      	ldr	r0, [sp, #4]
    2cb4:	4632      	mov	r2, r6
    2cb6:	4669      	mov	r1, sp
    2cb8:	f004 fe7a 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2cbc:	9800      	ldr	r0, [sp, #0]
    2cbe:	7803      	ldrb	r3, [r0, #0]
    2cc0:	b1eb      	cbz	r3, 2cfe <cliFunc_i2cRecv+0x62>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2cc2:	2b7c      	cmp	r3, #124	; 0x7c
    2cc4:	d10a      	bne.n	2cdc <cliFunc_i2cRecv+0x40>
		{
			print("| ");
    2cc6:	4815      	ldr	r0, [pc, #84]	; (2d1c <cliFunc_i2cRecv+0x80>)
    2cc8:	f005 f952 	bl	7f70 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2ccc:	2200      	movs	r2, #0
    2cce:	4629      	mov	r1, r5
    2cd0:	a802      	add	r0, sp, #8
    2cd2:	f7ff fdaf 	bl	2834 <I2C_Send>
			bufferLen = 0;
    2cd6:	2400      	movs	r4, #0
    2cd8:	4625      	mov	r5, r4
    2cda:	e7ea      	b.n	2cb2 <cliFunc_i2cRecv+0x16>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2cdc:	f005 fa5a 	bl	8194 <numToInt>
    2ce0:	ab04      	add	r3, sp, #16
    2ce2:	1c6c      	adds	r4, r5, #1
    2ce4:	441d      	add	r5, r3
    2ce6:	b2e4      	uxtb	r4, r4
    2ce8:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2cec:	9800      	ldr	r0, [sp, #0]
    2cee:	f003 fc63 	bl	65b8 <Output_putstr>
		print(" ");
    2cf2:	480b      	ldr	r0, [pc, #44]	; (2d20 <cliFunc_i2cRecv+0x84>)
    2cf4:	f005 f93c 	bl	7f70 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2cf8:	2c08      	cmp	r4, #8
    2cfa:	d1ed      	bne.n	2cd8 <cliFunc_i2cRecv+0x3c>
    2cfc:	e000      	b.n	2d00 <cliFunc_i2cRecv+0x64>
    2cfe:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2d00:	4804      	ldr	r0, [pc, #16]	; (2d14 <cliFunc_i2cRecv+0x78>)
    2d02:	f005 f935 	bl	7f70 <_print>

	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
    2d06:	2201      	movs	r2, #1
    2d08:	4621      	mov	r1, r4
    2d0a:	a802      	add	r0, sp, #8
    2d0c:	f7ff fd92 	bl	2834 <I2C_Send>
}
    2d10:	b004      	add	sp, #16
    2d12:	bd70      	pop	{r4, r5, r6, pc}
    2d14:	0000c0ef 	.word	0x0000c0ef
    2d18:	00008520 	.word	0x00008520
    2d1c:	0000853c 	.word	0x0000853c
    2d20:	00008952 	.word	0x00008952

00002d24 <cliFunc_ledWPage>:
	LED_readPage( 0x1, page );
	//LED_readPage( 0xB4, page );
}

void cliFunc_ledWPage( char* args )
{
    2d24:	b530      	push	{r4, r5, lr}
    2d26:	b085      	sub	sp, #20
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2d28:	ac04      	add	r4, sp, #16

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d2a:	a902      	add	r1, sp, #8

void cliFunc_ledWPage( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2d2c:	f844 0d04 	str.w	r0, [r4, #-4]!

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d30:	4622      	mov	r2, r4
    2d32:	f004 fe3d 	bl	79b0 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d36:	9802      	ldr	r0, [sp, #8]
    2d38:	7803      	ldrb	r3, [r0, #0]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d040      	beq.n	2dc0 <cliFunc_ledWPage+0x9c>
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d3e:	23fd      	movs	r3, #253	; 0xfd
    2d40:	25e8      	movs	r5, #232	; 0xe8
    2d42:	f88d 3001 	strb.w	r3, [sp, #1]
    2d46:	f88d 5000 	strb.w	r5, [sp]
    2d4a:	f005 fa23 	bl	8194 <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d4e:	4622      	mov	r2, r4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d50:	f88d 0002 	strb.w	r0, [sp, #2]

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d54:	a902      	add	r1, sp, #8
    2d56:	9803      	ldr	r0, [sp, #12]
    2d58:	f004 fe2a 	bl	79b0 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d5c:	9802      	ldr	r0, [sp, #8]
    2d5e:	7803      	ldrb	r3, [r0, #0]
    2d60:	b373      	cbz	r3, 2dc0 <cliFunc_ledWPage+0x9c>
		return;
	uint8_t data[] = { 0xE8, numToInt( arg1Ptr ), 0 };
    2d62:	f88d 5004 	strb.w	r5, [sp, #4]
    2d66:	f005 fa15 	bl	8194 <numToInt>
    2d6a:	2300      	movs	r3, #0
    2d6c:	f88d 0005 	strb.w	r0, [sp, #5]
    2d70:	f88d 3006 	strb.w	r3, [sp, #6]

	// Set the register page
	while ( I2C_Send( page, sizeof( page ), 0 ) == 0 )
    2d74:	2200      	movs	r2, #0
    2d76:	2103      	movs	r1, #3
    2d78:	4668      	mov	r0, sp
    2d7a:	f7ff fd5b 	bl	2834 <I2C_Send>
    2d7e:	b940      	cbnz	r0, 2d92 <cliFunc_ledWPage+0x6e>
		delay(1);
    2d80:	2001      	movs	r0, #1
    2d82:	f7ff fc2b 	bl	25dc <delay>
    2d86:	e7f5      	b.n	2d74 <cliFunc_ledWPage+0x50>
		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
			delay(1);

		// Increment address
		data[1]++;
    2d88:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2d8c:	3301      	adds	r3, #1
    2d8e:	f88d 3005 	strb.w	r3, [sp, #5]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d92:	9803      	ldr	r0, [sp, #12]
    2d94:	4622      	mov	r2, r4
    2d96:	a902      	add	r1, sp, #8
    2d98:	f004 fe0a 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2d9c:	9802      	ldr	r0, [sp, #8]
    2d9e:	7803      	ldrb	r3, [r0, #0]
    2da0:	b173      	cbz	r3, 2dc0 <cliFunc_ledWPage+0x9c>
			break;

		data[2] = numToInt( arg1Ptr );
    2da2:	f005 f9f7 	bl	8194 <numToInt>
    2da6:	f88d 0006 	strb.w	r0, [sp, #6]

		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
    2daa:	2200      	movs	r2, #0
    2dac:	2103      	movs	r1, #3
    2dae:	a801      	add	r0, sp, #4
    2db0:	f7ff fd40 	bl	2834 <I2C_Send>
    2db4:	2800      	cmp	r0, #0
    2db6:	d1e7      	bne.n	2d88 <cliFunc_ledWPage+0x64>
			delay(1);
    2db8:	2001      	movs	r0, #1
    2dba:	f7ff fc0f 	bl	25dc <delay>
    2dbe:	e7f4      	b.n	2daa <cliFunc_ledWPage+0x86>

		// Increment address
		data[1]++;
	}
}
    2dc0:	b005      	add	sp, #20
    2dc2:	bd30      	pop	{r4, r5, pc}

00002dc4 <LED_scan>:
// LED State processing loop
unsigned int LED_currentEvent = 0;
inline uint8_t LED_scan()
{
	// Check for current change event
	if ( LED_currentEvent )
    2dc4:	4b09      	ldr	r3, [pc, #36]	; (2dec <LED_scan+0x28>)
    2dc6:	681a      	ldr	r2, [r3, #0]


// LED State processing loop
unsigned int LED_currentEvent = 0;
inline uint8_t LED_scan()
{
    2dc8:	b510      	push	{r4, lr}
    2dca:	461c      	mov	r4, r3
	// Check for current change event
	if ( LED_currentEvent )
    2dcc:	b15a      	cbz	r2, 2de6 <LED_scan+0x22>
	{
		// TODO dim LEDs in low power mode instead of shutting off
		if ( LED_currentEvent < 150 )
    2dce:	2a95      	cmp	r2, #149	; 0x95
		{
			// Enable Software shutdown of ISSI chip
			LED_writeReg( 0x0A, 0x00, 0x0B );
    2dd0:	bf98      	it	ls
    2dd2:	2100      	movls	r1, #0
    2dd4:	f04f 020b 	mov.w	r2, #11
		}
		else
		{
			// Disable Software shutdown of ISSI chip
			LED_writeReg( 0x0A, 0x01, 0x0B );
    2dd8:	bf88      	it	hi
    2dda:	2101      	movhi	r1, #1
    2ddc:	200a      	movs	r0, #10
    2dde:	f7ff fe15 	bl	2a0c <LED_writeReg>
		}

		LED_currentEvent = 0;
    2de2:	2300      	movs	r3, #0
    2de4:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    2de6:	2000      	movs	r0, #0
    2de8:	bd10      	pop	{r4, pc}
    2dea:	bf00      	nop
    2dec:	1fff90c8 	.word	0x1fff90c8

00002df0 <LED_currentChange>:
// Called by parent Scan Module whenver the available current has changed
// current - mA
void LED_currentChange( unsigned int current )
{
	// Delay action till next LED scan loop (as this callback sometimes occurs during interrupt requests)
	LED_currentEvent = current;
    2df0:	4b01      	ldr	r3, [pc, #4]	; (2df8 <LED_currentChange+0x8>)
    2df2:	6018      	str	r0, [r3, #0]
    2df4:	4770      	bx	lr
    2df6:	bf00      	nop
    2df8:	1fff90c8 	.word	0x1fff90c8

00002dfc <LED_control>:
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2dfc:	7803      	ldrb	r3, [r0, #0]
	uint8_t        amount;
	uint16_t       index;
} LedControl;

void LED_control( LedControl *control )
{
    2dfe:	b410      	push	{r4}
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2e00:	2b05      	cmp	r3, #5
    2e02:	d837      	bhi.n	2e74 <LED_control+0x78>
    2e04:	e8df f003 	tbb	[pc, r3]
    2e08:	17120a03 	.word	0x17120a03
    2e0c:	2e23      	.short	0x2e23
	{
	case LedControlMode_brightness_decrease:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] -= control->amount;
    2e0e:	4a1e      	ldr	r2, [pc, #120]	; (2e88 <LED_control+0x8c>)
    2e10:	8843      	ldrh	r3, [r0, #2]
    2e12:	7841      	ldrb	r1, [r0, #1]
    2e14:	4413      	add	r3, r2
    2e16:	789a      	ldrb	r2, [r3, #2]
    2e18:	1a52      	subs	r2, r2, r1
    2e1a:	e005      	b.n	2e28 <LED_control+0x2c>
		break;

	case LedControlMode_brightness_increase:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] += control->amount;
    2e1c:	4a1a      	ldr	r2, [pc, #104]	; (2e88 <LED_control+0x8c>)
    2e1e:	8843      	ldrh	r3, [r0, #2]
    2e20:	4413      	add	r3, r2
    2e22:	7842      	ldrb	r2, [r0, #1]
    2e24:	7899      	ldrb	r1, [r3, #2]
    2e26:	440a      	add	r2, r1
    2e28:	709a      	strb	r2, [r3, #2]
		break;
    2e2a:	e023      	b.n	2e74 <LED_control+0x78>

	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
    2e2c:	8843      	ldrh	r3, [r0, #2]
    2e2e:	4916      	ldr	r1, [pc, #88]	; (2e88 <LED_control+0x8c>)
    2e30:	7842      	ldrb	r2, [r0, #1]
    2e32:	440b      	add	r3, r1
    2e34:	e7f8      	b.n	2e28 <LED_control+0x2c>
    2e36:	4b15      	ldr	r3, [pc, #84]	; (2e8c <LED_control+0x90>)
    2e38:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2e3c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    2e40:	7844      	ldrb	r4, [r0, #1]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e42:	4299      	cmp	r1, r3
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2e44:	eba2 0204 	sub.w	r2, r2, r4
    2e48:	701a      	strb	r2, [r3, #0]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e4a:	d1f7      	bne.n	2e3c <LED_control+0x40>
    2e4c:	e012      	b.n	2e74 <LED_control+0x78>
    2e4e:	4b0f      	ldr	r3, [pc, #60]	; (2e8c <LED_control+0x90>)
    2e50:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e54:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    2e58:	7842      	ldrb	r2, [r0, #1]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e5a:	4299      	cmp	r1, r3
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e5c:	4422      	add	r2, r4
    2e5e:	701a      	strb	r2, [r3, #0]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e60:	d1f8      	bne.n	2e54 <LED_control+0x58>
    2e62:	e007      	b.n	2e74 <LED_control+0x78>
    2e64:	4b09      	ldr	r3, [pc, #36]	; (2e8c <LED_control+0x90>)
    2e66:	f103 0290 	add.w	r2, r3, #144	; 0x90
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			LED_pageBuffer.buffer[ channel ] = control->amount;
    2e6a:	7841      	ldrb	r1, [r0, #1]
    2e6c:	f803 1f01 	strb.w	r1, [r3, #1]!
			LED_pageBuffer.buffer[ channel ] += control->amount;
		}
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e70:	4293      	cmp	r3, r2
    2e72:	d1fa      	bne.n	2e6a <LED_control+0x6e>
		break;
	}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
    2e74:	4804      	ldr	r0, [pc, #16]	; (2e88 <LED_control+0x8c>)
    2e76:	23e8      	movs	r3, #232	; 0xe8
    2e78:	7003      	strb	r3, [r0, #0]
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
    2e7a:	2324      	movs	r3, #36	; 0x24
    2e7c:	7043      	strb	r3, [r0, #1]
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e7e:	2200      	movs	r2, #0
    2e80:	2192      	movs	r1, #146	; 0x92
}
    2e82:	bc10      	pop	{r4}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e84:	f7ff bd90 	b.w	29a8 <LED_sendPage>
    2e88:	1fff992d 	.word	0x1fff992d
    2e8c:	1fff992e 	.word	0x1fff992e

00002e90 <cliFunc_ledCtrl>:
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
}

void cliFunc_ledCtrl( char* args )
{
    2e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2e92:	ac04      	add	r4, sp, #16
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e94:	a901      	add	r1, sp, #4

void cliFunc_ledCtrl( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2e96:	f844 0d08 	str.w	r0, [r4, #-8]!
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e9a:	4622      	mov	r2, r4
    2e9c:	f004 fd88 	bl	79b0 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2ea0:	9801      	ldr	r0, [sp, #4]
    2ea2:	7803      	ldrb	r3, [r0, #0]
    2ea4:	b30b      	cbz	r3, 2eea <cliFunc_ledCtrl+0x5a>
		return;
	control.mode = numToInt( arg1Ptr );
    2ea6:	f005 f975 	bl	8194 <numToInt>


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2eaa:	4622      	mov	r2, r4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.mode = numToInt( arg1Ptr );
    2eac:	f88d 000c 	strb.w	r0, [sp, #12]


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2eb0:	a901      	add	r1, sp, #4
    2eb2:	9802      	ldr	r0, [sp, #8]
    2eb4:	f004 fd7c 	bl	79b0 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2eb8:	9801      	ldr	r0, [sp, #4]
    2eba:	7803      	ldrb	r3, [r0, #0]
    2ebc:	b1ab      	cbz	r3, 2eea <cliFunc_ledCtrl+0x5a>
		return;
	control.amount = numToInt( arg1Ptr );
    2ebe:	f005 f969 	bl	8194 <numToInt>


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ec2:	4622      	mov	r2, r4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.amount = numToInt( arg1Ptr );
    2ec4:	f88d 000d 	strb.w	r0, [sp, #13]


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ec8:	a901      	add	r1, sp, #4
    2eca:	9802      	ldr	r0, [sp, #8]
    2ecc:	f004 fd70 	bl	79b0 <CLI_argumentIsolation>
	control.index = *arg1Ptr == '\0' ? 0 : numToInt( arg1Ptr );
    2ed0:	9801      	ldr	r0, [sp, #4]
    2ed2:	7803      	ldrb	r3, [r0, #0]
    2ed4:	b11b      	cbz	r3, 2ede <cliFunc_ledCtrl+0x4e>
    2ed6:	f005 f95d 	bl	8194 <numToInt>
    2eda:	b280      	uxth	r0, r0
    2edc:	e000      	b.n	2ee0 <cliFunc_ledCtrl+0x50>
    2ede:	4618      	mov	r0, r3
    2ee0:	f8ad 000e 	strh.w	r0, [sp, #14]

	// Process request
	LED_control( &control );
    2ee4:	a803      	add	r0, sp, #12
    2ee6:	f7ff ff89 	bl	2dfc <LED_control>
}
    2eea:	b004      	add	sp, #16
    2eec:	bd10      	pop	{r4, pc}
    2eee:	0000      	movs	r0, r0

00002ef0 <LED_control_capability>:

uint8_t LED_control_timer = 0;
void LED_control_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2ef0:	2aff      	cmp	r2, #255	; 0xff
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
}

uint8_t LED_control_timer = 0;
void LED_control_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    2ef2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2ef4:	461c      	mov	r4, r3
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2ef6:	d107      	bne.n	2f08 <LED_control_capability+0x18>
    2ef8:	29ff      	cmp	r1, #255	; 0xff
    2efa:	d108      	bne.n	2f0e <LED_control_capability+0x1e>
	{
		print("LED_control_capability(mode,amount,index)");
    2efc:	481d      	ldr	r0, [pc, #116]	; (2f74 <LED_control_capability+0x84>)
		return;
#endif

	// Modify led state of this node
	LED_control( control );
}
    2efe:	b003      	add	sp, #12
    2f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void LED_control_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("LED_control_capability(mode,amount,index)");
    2f04:	f005 b834 	b.w	7f70 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state == 0x03 ) // Not on release
    2f08:	b90a      	cbnz	r2, 2f0e <LED_control_capability+0x1e>
    2f0a:	2903      	cmp	r1, #3
    2f0c:	d02f      	beq.n	2f6e <LED_control_capability+0x7e>
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2f0e:	4b1a      	ldr	r3, [pc, #104]	; (2f78 <LED_control_capability+0x88>)
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2f10:	4d1a      	ldr	r5, [pc, #104]	; (2f7c <LED_control_capability+0x8c>)
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2f12:	6818      	ldr	r0, [r3, #0]
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
	if ( compare < 30 )
    2f14:	782b      	ldrb	r3, [r5, #0]
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2f16:	b2c0      	uxtb	r0, r0
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
	if ( compare < 30 )
    2f18:	1ac3      	subs	r3, r0, r3
    2f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2f1e:	2b1d      	cmp	r3, #29
    2f20:	dd25      	ble.n	2f6e <LED_control_capability+0x7e>
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2f22:	4b17      	ldr	r3, [pc, #92]	; (2f80 <LED_control_capability+0x90>)
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
	if ( compare < 30 )
	{
		return;
	}
	LED_control_timer = currentTime;
    2f24:	7028      	strb	r0, [r5, #0]
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2f26:	7818      	ldrb	r0, [r3, #0]

	switch ( control->mode )
    2f28:	7823      	ldrb	r3, [r4, #0]
    2f2a:	2b05      	cmp	r3, #5
    2f2c:	d807      	bhi.n	2f3e <LED_control_capability+0x4e>
    2f2e:	e8df f003 	tbb	[pc, r3]
    2f32:	0303      	.short	0x0303
    2f34:	10101003 	.word	0x10101003
	// Otherwise, ignore
	case LedControlMode_brightness_decrease:
	case LedControlMode_brightness_increase:
	case LedControlMode_brightness_set:
		// Ignore if led is on this node
		if ( control->index < LED_TotalChannels )
    2f38:	8863      	ldrh	r3, [r4, #2]
    2f3a:	2b8f      	cmp	r3, #143	; 0x8f
    2f3c:	d805      	bhi.n	2f4a <LED_control_capability+0x5a>
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f3e:	4620      	mov	r0, r4
}
    2f40:	b003      	add	sp, #12
    2f42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f46:	f7ff bf59 	b.w	2dfc <LED_control>
		// Ignore if led is on this node
		if ( control->index < LED_TotalChannels )
			break;

		// Calculate new led index
		control->index -= LED_TotalChannels;
    2f4a:	3b90      	subs	r3, #144	; 0x90
    2f4c:	8063      	strh	r3, [r4, #2]

		ignore_node = 1;
    2f4e:	2501      	movs	r5, #1
		send_packet = 1;
		break;
    2f50:	e000      	b.n	2f54 <LED_control_capability+0x64>
	LedControl *control = (LedControl*)args;

	// Interconnect broadcasting
#if defined(ConnectEnabled_define)
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;
    2f52:	2500      	movs	r5, #0
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    2f54:	4b0b      	ldr	r3, [pc, #44]	; (2f84 <LED_control_capability+0x94>)
    2f56:	9401      	str	r4, [sp, #4]
    2f58:	7d1b      	ldrb	r3, [r3, #20]
    2f5a:	9300      	str	r3, [sp, #0]
    2f5c:	3001      	adds	r0, #1
    2f5e:	4613      	mov	r3, r2
    2f60:	b2c0      	uxtb	r0, r0
    2f62:	460a      	mov	r2, r1
    2f64:	2102      	movs	r1, #2
    2f66:	f001 fafb 	bl	4560 <Connect_send_RemoteCapability>
			args
		);
	}

	// If there is nothing to do on this node, ignore
	if ( ignore_node )
    2f6a:	2d00      	cmp	r5, #0
    2f6c:	d0e7      	beq.n	2f3e <LED_control_capability+0x4e>
		return;
#endif

	// Modify led state of this node
	LED_control( control );
}
    2f6e:	b003      	add	sp, #12
    2f70:	bd30      	pop	{r4, r5, pc}
    2f72:	bf00      	nop
    2f74:	0000853f 	.word	0x0000853f
    2f78:	1fff90c4 	.word	0x1fff90c4
    2f7c:	1fff90cc 	.word	0x1fff90cc
    2f80:	1fff8a05 	.word	0x1fff8a05
    2f84:	0000a2a8 	.word	0x0000a2a8

00002f88 <cliFunc_matrixInfo>:


// ----- CLI Command Functions -----

void cliFunc_matrixInfo( char* args )
{
    2f88:	b510      	push	{r4, lr}
	print( NL );
    2f8a:	4c10      	ldr	r4, [pc, #64]	; (2fcc <cliFunc_matrixInfo+0x44>)
    2f8c:	4620      	mov	r0, r4
    2f8e:	f004 ffef 	bl	7f70 <_print>
	info_msg("Columns:  ");
    2f92:	480f      	ldr	r0, [pc, #60]	; (2fd0 <cliFunc_matrixInfo+0x48>)
    2f94:	f004 ffec 	bl	7f70 <_print>
	printHex( Matrix_colsNum );
    2f98:	2101      	movs	r1, #1
    2f9a:	2009      	movs	r0, #9
    2f9c:	f005 f88b 	bl	80b6 <printHex_op>

	print( NL );
    2fa0:	4620      	mov	r0, r4
    2fa2:	f004 ffe5 	bl	7f70 <_print>
	info_msg("Rows:     ");
    2fa6:	480b      	ldr	r0, [pc, #44]	; (2fd4 <cliFunc_matrixInfo+0x4c>)
    2fa8:	f004 ffe2 	bl	7f70 <_print>
	printHex( Matrix_rowsNum );
    2fac:	2101      	movs	r1, #1
    2fae:	2005      	movs	r0, #5
    2fb0:	f005 f881 	bl	80b6 <printHex_op>

	print( NL );
    2fb4:	4620      	mov	r0, r4
    2fb6:	f004 ffdb 	bl	7f70 <_print>
	info_msg("Max Keys: ");
    2fba:	4807      	ldr	r0, [pc, #28]	; (2fd8 <cliFunc_matrixInfo+0x50>)
    2fbc:	f004 ffd8 	bl	7f70 <_print>
	printHex( Matrix_maxKeys );
    2fc0:	2101      	movs	r1, #1
    2fc2:	202d      	movs	r0, #45	; 0x2d
}
    2fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	info_msg("Rows:     ");
	printHex( Matrix_rowsNum );

	print( NL );
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
    2fc8:	f005 b875 	b.w	80b6 <printHex_op>
    2fcc:	0000c0ef 	.word	0x0000c0ef
    2fd0:	00008842 	.word	0x00008842
    2fd4:	0000885f 	.word	0x0000885f
    2fd8:	0000887c 	.word	0x0000887c

00002fdc <cliFunc_matrixState>:
	info_msg("Matrix Debug Mode: ");
	printInt8( matrixDebugMode );
}

void cliFunc_matrixState( char* args )
{
    2fdc:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2fde:	4c07      	ldr	r4, [pc, #28]	; (2ffc <cliFunc_matrixState+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2fe0:	aa01      	add	r2, sp, #4
    2fe2:	4669      	mov	r1, sp
    2fe4:	f004 fce4 	bl	79b0 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2fe8:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    2fea:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2fec:	8023      	strh	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    2fee:	7803      	ldrb	r3, [r0, #0]
    2ff0:	b113      	cbz	r3, 2ff8 <cliFunc_matrixState+0x1c>
	{
		matrixDebugStateCounter = (uint16_t)numToInt( arg1Ptr );
    2ff2:	f005 f8cf 	bl	8194 <numToInt>
    2ff6:	8020      	strh	r0, [r4, #0]
	}
}
    2ff8:	b002      	add	sp, #8
    2ffa:	bd10      	pop	{r4, pc}
    2ffc:	1fff90d6 	.word	0x1fff90d6

00003000 <cliFunc_matrixDebug>:
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
}

void cliFunc_matrixDebug( char* args )
{
    3000:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    3002:	aa01      	add	r2, sp, #4
    3004:	4669      	mov	r1, sp
    3006:	f004 fcd3 	bl	79b0 <CLI_argumentIsolation>

	// Set the matrix debug flag depending on the argument
	// If no argument, set to scan code only
	// If set to T, set to state transition
	switch ( arg1Ptr[0] )
    300a:	9b00      	ldr	r3, [sp, #0]
    300c:	781b      	ldrb	r3, [r3, #0]
    300e:	2b54      	cmp	r3, #84	; 0x54
    3010:	d00a      	beq.n	3028 <cliFunc_matrixDebug+0x28>
    3012:	2b74      	cmp	r3, #116	; 0x74
    3014:	d008      	beq.n	3028 <cliFunc_matrixDebug+0x28>
    3016:	b9c3      	cbnz	r3, 304a <cliFunc_matrixDebug+0x4a>
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
		break;

	// No argument
	case '\0':
		matrixDebugMode = matrixDebugMode != 1 ? 1 : 0;
    3018:	4a0d      	ldr	r2, [pc, #52]	; (3050 <cliFunc_matrixDebug+0x50>)
    301a:	7813      	ldrb	r3, [r2, #0]
    301c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    3020:	bf18      	it	ne
    3022:	2301      	movne	r3, #1
    3024:	7013      	strb	r3, [r2, #0]
		break;
    3026:	e006      	b.n	3036 <cliFunc_matrixDebug+0x36>
	switch ( arg1Ptr[0] )
	{
	// T as argument
	case 'T':
	case 't':
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
    3028:	4b09      	ldr	r3, [pc, #36]	; (3050 <cliFunc_matrixDebug+0x50>)
    302a:	781a      	ldrb	r2, [r3, #0]
    302c:	2a02      	cmp	r2, #2
    302e:	bf14      	ite	ne
    3030:	2202      	movne	r2, #2
    3032:	2200      	moveq	r2, #0
    3034:	701a      	strb	r2, [r3, #0]
	// Invalid argument
	default:
		return;
	}

	print( NL );
    3036:	4807      	ldr	r0, [pc, #28]	; (3054 <cliFunc_matrixDebug+0x54>)
    3038:	f004 ff9a 	bl	7f70 <_print>
	info_msg("Matrix Debug Mode: ");
    303c:	4806      	ldr	r0, [pc, #24]	; (3058 <cliFunc_matrixDebug+0x58>)
    303e:	f004 ff97 	bl	7f70 <_print>
	printInt8( matrixDebugMode );
    3042:	4b03      	ldr	r3, [pc, #12]	; (3050 <cliFunc_matrixDebug+0x50>)
    3044:	7818      	ldrb	r0, [r3, #0]
    3046:	f004 ffc2 	bl	7fce <printInt8>
}
    304a:	b003      	add	sp, #12
    304c:	f85d fb04 	ldr.w	pc, [sp], #4
    3050:	1fff90d4 	.word	0x1fff90d4
    3054:	0000c0ef 	.word	0x0000c0ef
    3058:	00008899 	.word	0x00008899

0000305c <Matrix_pin>:

// Pin action (Strobe, Sense, Strobe Setup, Sense Setup)
// NOTE: This function is highly dependent upon the organization of the register map
//       Only guaranteed to work with Freescale MK20 series uCs
uint8_t Matrix_pin( GPIO_Pin gpio, Type type )
{
    305c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    305e:	b2c3      	uxtb	r3, r0
    3060:	f8ad 0004 	strh.w	r0, [sp, #4]
    3064:	f3c0 2007 	ubfx	r0, r0, #8, #8
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
    3068:	011a      	lsls	r2, r3, #4
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    306a:	eb00 2383 	add.w	r3, r0, r3, lsl #10
    306e:	009b      	lsls	r3, r3, #2
    3070:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
    3074:	4c28      	ldr	r4, [pc, #160]	; (3118 <Matrix_pin+0xbc>)
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    3076:	f503 2392 	add.w	r3, r3, #299008	; 0x49000

	// Operation depends on Type
	switch ( type )
    307a:	2904      	cmp	r1, #4
    307c:	d849      	bhi.n	3112 <Matrix_pin+0xb6>
    307e:	e8df f001 	tbb	[pc, r1]
    3082:	0503      	.short	0x0503
    3084:	220f      	.short	0x220f
    3086:	2d          	.byte	0x2d
    3087:	00          	.byte	0x00

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
    3088:	4c24      	ldr	r4, [pc, #144]	; (311c <Matrix_pin+0xc0>)
    308a:	e000      	b.n	308e <Matrix_pin+0x32>
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
    308c:	4c24      	ldr	r4, [pc, #144]	; (3120 <Matrix_pin+0xc4>)
	case Type_StrobeOff:
		#ifdef GHOSTING_MATRIX
		// Ghosting martix needs to put not used (off) strobes in high impedance state
		*GPIO_PDDR &= ~(1 << gpio.pin);  // input, high Z state
		#endif
		*GPIO_PCOR |= (1 << gpio.pin);
    308e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    3092:	2101      	movs	r1, #1
    3094:	fa01 f000 	lsl.w	r0, r1, r0
    3098:	4318      	orrs	r0, r3
    309a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    309e:	e038      	b.n	3112 <Matrix_pin+0xb6>
		#ifdef GHOSTING_MATRIX
		*GPIO_PDDR &= ~(1 << gpio.pin);  // input, high Z state
		*GPIO_PCOR |= (1 << gpio.pin);
		#else
		// Set as output pin
		*GPIO_PDDR |= (1 << gpio.pin);
    30a0:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
    30a4:	2501      	movs	r5, #1
    30a6:	fa05 f000 	lsl.w	r0, r5, r0
    30aa:	4308      	orrs	r0, r1
    30ac:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		#endif

		// Configure pin with slow slew, high drive strength and GPIO mux
		*PORT_PCR = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    30b0:	f44f 72a2 	mov.w	r2, #324	; 0x144
    30b4:	601a      	str	r2, [r3, #0]

		// Enabling open-drain if specified
		switch ( Matrix_type )
    30b6:	4a1b      	ldr	r2, [pc, #108]	; (3124 <Matrix_pin+0xc8>)
    30b8:	7812      	ldrb	r2, [r2, #0]
    30ba:	2a02      	cmp	r2, #2
    30bc:	d129      	bne.n	3112 <Matrix_pin+0xb6>
		{
		case Config_Opendrain:
			*PORT_PCR |= PORT_PCR_ODE;
    30be:	681a      	ldr	r2, [r3, #0]
    30c0:	f042 0220 	orr.w	r2, r2, #32
    30c4:	e024      	b.n	3110 <Matrix_pin+0xb4>
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
    30c6:	4b18      	ldr	r3, [pc, #96]	; (3128 <Matrix_pin+0xcc>)

	case Type_Sense:
		#ifdef GHOSTING_MATRIX  // inverted
		return *GPIO_PDIR & (1 << gpio.pin) ? 0 : 1;
		#else
		return *GPIO_PDIR & (1 << gpio.pin) ? 1 : 0;
    30c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30cc:	2301      	movs	r3, #1
    30ce:	fa03 f000 	lsl.w	r0, r3, r0
    30d2:	4210      	tst	r0, r2
    30d4:	bf14      	ite	ne
    30d6:	4618      	movne	r0, r3
    30d8:	2000      	moveq	r0, #0
    30da:	e01b      	b.n	3114 <Matrix_pin+0xb8>
		#endif

	case Type_SenseSetup:
		// Set as input pin
		*GPIO_PDDR &= ~(1 << gpio.pin);
    30dc:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
    30e0:	2501      	movs	r5, #1
    30e2:	fa05 f000 	lsl.w	r0, r5, r0
    30e6:	ea21 0000 	bic.w	r0, r1, r0
    30ea:	f844 0022 	str.w	r0, [r4, r2, lsl #2]

		// Configure pin with passive filter and GPIO mux
		*PORT_PCR = PORT_PCR_PFE | PORT_PCR_MUX(1);
    30ee:	f44f 7288 	mov.w	r2, #272	; 0x110
    30f2:	601a      	str	r2, [r3, #0]

		// Pull resistor config
		switch ( Matrix_type )
    30f4:	4a0b      	ldr	r2, [pc, #44]	; (3124 <Matrix_pin+0xc8>)
    30f6:	7810      	ldrb	r0, [r2, #0]
    30f8:	b128      	cbz	r0, 3106 <Matrix_pin+0xaa>
    30fa:	42a8      	cmp	r0, r5
    30fc:	d109      	bne.n	3112 <Matrix_pin+0xb6>
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
			break;

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    30fe:	681a      	ldr	r2, [r3, #0]
    3100:	f042 0202 	orr.w	r2, r2, #2
    3104:	e004      	b.n	3110 <Matrix_pin+0xb4>

		// Pull resistor config
		switch ( Matrix_type )
		{
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
    3106:	681a      	ldr	r2, [r3, #0]
    3108:	f042 0203 	orr.w	r2, r2, #3
    310c:	601a      	str	r2, [r3, #0]
			break;
    310e:	e001      	b.n	3114 <Matrix_pin+0xb8>

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    3110:	601a      	str	r2, [r3, #0]
			break;
		}
		break;
	}

	return 0;
    3112:	2000      	movs	r0, #0
}
    3114:	b003      	add	sp, #12
    3116:	bd30      	pop	{r4, r5, pc}
    3118:	400ff014 	.word	0x400ff014
    311c:	400ff004 	.word	0x400ff004
    3120:	400ff008 	.word	0x400ff008
    3124:	1fff8a04 	.word	0x1fff8a04
    3128:	400ff010 	.word	0x400ff010

0000312c <Matrix_setup>:

// Setup GPIO pins for matrix scanning
void Matrix_setup()
{
    312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );
    312e:	491f      	ldr	r1, [pc, #124]	; (31ac <Matrix_setup+0x80>)
    3130:	481f      	ldr	r0, [pc, #124]	; (31b0 <Matrix_setup+0x84>)

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
    3132:	4d20      	ldr	r5, [pc, #128]	; (31b4 <Matrix_setup+0x88>)

// Setup GPIO pins for matrix scanning
void Matrix_setup()
{
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );
    3134:	f004 fcb4 	bl	7aa0 <CLI_registerDictionary>
    3138:	2400      	movs	r4, #0

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
    313a:	eb05 0244 	add.w	r2, r5, r4, lsl #1
    313e:	f815 3014 	ldrb.w	r3, [r5, r4, lsl #1]
    3142:	7850      	ldrb	r0, [r2, #1]
    3144:	2102      	movs	r1, #2
    3146:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    314a:	3401      	adds	r4, #1
    314c:	f7ff ff86 	bl	305c <Matrix_pin>
{
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
    3150:	2c09      	cmp	r4, #9
    3152:	d1f2      	bne.n	313a <Matrix_setup+0xe>
	}

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
	{
		Matrix_pin( Matrix_rows[ pin ], Type_SenseSetup );
    3154:	4d18      	ldr	r5, [pc, #96]	; (31b8 <Matrix_setup+0x8c>)
    3156:	2400      	movs	r4, #0
    3158:	eb05 0244 	add.w	r2, r5, r4, lsl #1
    315c:	f815 3014 	ldrb.w	r3, [r5, r4, lsl #1]
    3160:	7850      	ldrb	r0, [r2, #1]
    3162:	2104      	movs	r1, #4
    3164:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3168:	3401      	adds	r4, #1
    316a:	f7ff ff77 	bl	305c <Matrix_pin>
		col_ghost_old[pin] = 0;
		#endif
	}

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
    316e:	2c05      	cmp	r4, #5
    3170:	d1f2      	bne.n	3158 <Matrix_setup+0x2c>
    3172:	4a12      	ldr	r2, [pc, #72]	; (31bc <Matrix_setup+0x90>)
    3174:	2300      	movs	r3, #0
    3176:	4617      	mov	r7, r2
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    3178:	4619      	mov	r1, r3
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    317a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    317e:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
    3182:	19b8      	adds	r0, r7, r6
    3184:	3301      	adds	r3, #1
		row_ghost_old[pin] = 0;
		#endif
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    3186:	2b2d      	cmp	r3, #45	; 0x2d
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    3188:	7111      	strb	r1, [r2, #4]
		Matrix_scanArray[ item ].curState         = KeyState_Off;
    318a:	7151      	strb	r1, [r2, #5]
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    318c:	f04f 0400 	mov.w	r4, #0
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3190:	55b9      	strb	r1, [r7, r6]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3192:	7085      	strb	r5, [r0, #2]
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3194:	7041      	strb	r1, [r0, #1]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3196:	70c5      	strb	r5, [r0, #3]
    3198:	f102 0207 	add.w	r2, r2, #7
		Matrix_scanArray[ item ].prevDecisionTime = 0;
    319c:	f802 1c01 	strb.w	r1, [r2, #-1]
		row_ghost_old[pin] = 0;
		#endif
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    31a0:	d1ed      	bne.n	317e <Matrix_setup+0x52>
		Matrix_ghostArray[ item ].saved           = KeyState_Off;
		#endif
	}

	// Clear scan stats counters
	matrixMaxScans  = 0;
    31a2:	4b07      	ldr	r3, [pc, #28]	; (31c0 <Matrix_setup+0x94>)
    31a4:	801c      	strh	r4, [r3, #0]
	matrixPrevScans = 0;
    31a6:	4b07      	ldr	r3, [pc, #28]	; (31c4 <Matrix_setup+0x98>)
    31a8:	801c      	strh	r4, [r3, #0]
    31aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31ac:	00008ad2 	.word	0x00008ad2
    31b0:	0000878c 	.word	0x0000878c
    31b4:	1fff89e8 	.word	0x1fff89e8
    31b8:	1fff89fa 	.word	0x1fff89fa
    31bc:	1fff9aeb 	.word	0x1fff9aeb
    31c0:	1fff90d2 	.word	0x1fff90d2
    31c4:	1fff90d0 	.word	0x1fff90d0

000031c8 <Matrix_keyPositionDebug>:
}

void Matrix_keyPositionDebug( KeyPosition pos )
{
	// Depending on the state, use a different flag + color
	switch ( pos )
    31c8:	2803      	cmp	r0, #3
    31ca:	d80b      	bhi.n	31e4 <Matrix_keyPositionDebug+0x1c>
    31cc:	e8df f000 	tbb	[pc, r0]
    31d0:	08060402 	.word	0x08060402
	{
	case KeyState_Off:
		print("\033[1mO\033[0m");
    31d4:	4805      	ldr	r0, [pc, #20]	; (31ec <Matrix_keyPositionDebug+0x24>)
    31d6:	e006      	b.n	31e6 <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Press:
		print("\033[1;33mP\033[0m");
    31d8:	4805      	ldr	r0, [pc, #20]	; (31f0 <Matrix_keyPositionDebug+0x28>)
    31da:	e004      	b.n	31e6 <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Hold:
		print("\033[1;32mH\033[0m");
    31dc:	4805      	ldr	r0, [pc, #20]	; (31f4 <Matrix_keyPositionDebug+0x2c>)
    31de:	e002      	b.n	31e6 <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Release:
		print("\033[1;35mR\033[0m");
    31e0:	4805      	ldr	r0, [pc, #20]	; (31f8 <Matrix_keyPositionDebug+0x30>)
    31e2:	e000      	b.n	31e6 <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Invalid:
	default:
		print("\033[1;31mI\033[0m");
    31e4:	4805      	ldr	r0, [pc, #20]	; (31fc <Matrix_keyPositionDebug+0x34>)
    31e6:	f004 bec3 	b.w	7f70 <_print>
    31ea:	bf00      	nop
    31ec:	000088bf 	.word	0x000088bf
    31f0:	000088c9 	.word	0x000088c9
    31f4:	000088d6 	.word	0x000088d6
    31f8:	000088e3 	.word	0x000088e3
    31fc:	000088f0 	.word	0x000088f0

00003200 <Matrix_scan>:
	if ( !( Matrix_divCounter++ & (1 << ( DebounceThrottleDiv_define - 1 )) ) )
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
    3200:	4b9f      	ldr	r3, [pc, #636]	; (3480 <Matrix_scan+0x280>)


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    3202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( !( Matrix_divCounter++ & (1 << ( DebounceThrottleDiv_define - 1 )) ) )
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
    3206:	881a      	ldrh	r2, [r3, #0]
    3208:	4282      	cmp	r2, r0
    320a:	469b      	mov	fp, r3
    320c:	bf38      	it	cc
    320e:	8018      	strhcc	r0, [r3, #0]


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    3210:	4607      	mov	r7, r0
    3212:	4b9c      	ldr	r3, [pc, #624]	; (3484 <Matrix_scan+0x284>)
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
	if ( scanNum == 0 )
    3214:	b920      	cbnz	r0, 3220 <Matrix_scan+0x20>
	{
		matrixPrevScans = matrixCurScans;
    3216:	4a9c      	ldr	r2, [pc, #624]	; (3488 <Matrix_scan+0x288>)
    3218:	8819      	ldrh	r1, [r3, #0]
    321a:	8011      	strh	r1, [r2, #0]
		matrixCurScans = 0;
    321c:	8018      	strh	r0, [r3, #0]
    321e:	e002      	b.n	3226 <Matrix_scan+0x26>
	}
	else
	{
		matrixCurScans++;
    3220:	881a      	ldrh	r2, [r3, #0]
    3222:	3201      	adds	r2, #1
    3224:	801a      	strh	r2, [r3, #0]
	}

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;
    3226:	4b99      	ldr	r3, [pc, #612]	; (348c <Matrix_scan+0x28c>)
		uint32_t start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );
    3228:	f8df a278 	ldr.w	sl, [pc, #632]	; 34a4 <Matrix_scan+0x2a4>
	{
		matrixCurScans++;
	}

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;
    322c:	681b      	ldr	r3, [r3, #0]
    322e:	4d98      	ldr	r5, [pc, #608]	; (3490 <Matrix_scan+0x290>)
    3230:	b2db      	uxtb	r3, r3
    3232:	9300      	str	r3, [sp, #0]
    3234:	2600      	movs	r6, #0
		uint32_t start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );
    3236:	0072      	lsls	r2, r6, #1
    3238:	9201      	str	r2, [sp, #4]
    323a:	4452      	add	r2, sl
    323c:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    3240:	7850      	ldrb	r0, [r2, #1]
    3242:	2100      	movs	r1, #0
    3244:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3248:	f7ff ff08 	bl	305c <Matrix_pin>
    324c:	b2f4      	uxtb	r4, r6
    324e:	f04f 0800 	mov.w	r8, #0
    3252:	ea4f 09c4 	mov.w	r9, r4, lsl #3
			// Key position
			uint8_t key = Matrix_colsNum * sense + strobe;
			KeyState *state = &Matrix_scanArray[ key ];

			// If first scan, reset state
			if ( scanNum == 0 )
    3256:	b937      	cbnz	r7, 3266 <Matrix_scan+0x66>
			{
				// Set previous state, and reset current state
				state->prevState = state->curState;
    3258:	ebc4 0209 	rsb	r2, r4, r9
    325c:	442a      	add	r2, r5
    325e:	7951      	ldrb	r1, [r2, #5]
    3260:	7111      	strb	r1, [r2, #4]
				state->curState  = KeyState_Invalid;
    3262:	2104      	movs	r1, #4
    3264:	7151      	strb	r1, [r2, #5]
			// This means there is a maximum of scan 13 cycles on a perfect off to on transition
			//  (coming from a steady state 0xFFFF off scans)
			// Somewhat longer with switch bounciness
			// The advantage of this is that the count is ongoing and never needs to be reset
			// State still needs to be kept track of to deal with what to send to the Macro module
			if ( Matrix_pin( Matrix_rows[ sense ], Type_Sense ) )
    3266:	4b8b      	ldr	r3, [pc, #556]	; (3494 <Matrix_scan+0x294>)
    3268:	eb03 0148 	add.w	r1, r3, r8, lsl #1
    326c:	f813 2018 	ldrb.w	r2, [r3, r8, lsl #1]
    3270:	7848      	ldrb	r0, [r1, #1]
    3272:	2103      	movs	r1, #3
    3274:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    3278:	f7ff fef0 	bl	305c <Matrix_pin>
    327c:	b178      	cbz	r0, 329e <Matrix_scan+0x9e>
			{
				// Only update if not going to wrap around
				if ( state->activeCount < DebounceDivThreshold_define ) state->activeCount += 1;
    327e:	ebc4 0109 	rsb	r1, r4, r9
    3282:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3286:	5a6a      	ldrh	r2, [r5, r1]
    3288:	4282      	cmp	r2, r0
    328a:	bf1c      	itt	ne
    328c:	3201      	addne	r2, #1
    328e:	526a      	strhne	r2, [r5, r1]
				state->inactiveCount >>= 1;
    3290:	ebc4 0209 	rsb	r2, r4, r9
    3294:	442a      	add	r2, r5
    3296:	8851      	ldrh	r1, [r2, #2]
    3298:	0849      	lsrs	r1, r1, #1
    329a:	8051      	strh	r1, [r2, #2]
    329c:	e00e      	b.n	32bc <Matrix_scan+0xbc>
			}
			// Signal Not Detected
			else
			{
				// Only update if not going to wrap around
				if ( state->inactiveCount < DebounceDivThreshold_define ) state->inactiveCount += 1;
    329e:	ebc4 0209 	rsb	r2, r4, r9
    32a2:	442a      	add	r2, r5
    32a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    32a8:	8851      	ldrh	r1, [r2, #2]
    32aa:	4281      	cmp	r1, r0
    32ac:	bf1c      	itt	ne
    32ae:	3101      	addne	r1, #1
    32b0:	8051      	strhne	r1, [r2, #2]
				state->activeCount >>= 1;
    32b2:	ebc4 0109 	rsb	r1, r4, r9
    32b6:	5a6a      	ldrh	r2, [r5, r1]
    32b8:	0852      	lsrs	r2, r2, #1
    32ba:	526a      	strh	r2, [r5, r1]
			// Check for state change if it hasn't been set
			// But only if enough time has passed since last state change
			// Only check if the minimum number of scans has been met
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
    32bc:	ebc4 0209 	rsb	r2, r4, r9
    32c0:	442a      	add	r2, r5
    32c2:	7951      	ldrb	r1, [r2, #5]
    32c4:	2904      	cmp	r1, #4
    32c6:	d159      	bne.n	337c <Matrix_scan+0x17c>
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    32c8:	7991      	ldrb	r1, [r2, #6]
    32ca:	9b00      	ldr	r3, [sp, #0]

				// Attempt state transition
				switch ( state->prevState )
    32cc:	7910      	ldrb	r0, [r2, #4]
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    32ce:	1a59      	subs	r1, r3, r1
    32d0:	b2c9      	uxtb	r1, r1

				// Attempt state transition
				switch ( state->prevState )
    32d2:	2803      	cmp	r0, #3
    32d4:	d824      	bhi.n	3320 <Matrix_scan+0x120>
    32d6:	e8df f000 	tbb	[pc, r0]
    32da:	0211      	.short	0x0211
    32dc:	1102      	.short	0x1102
				{
				case KeyState_Press:
				case KeyState_Hold:
					if ( state->activeCount > state->inactiveCount )
    32de:	ebc4 0209 	rsb	r2, r4, r9
    32e2:	442a      	add	r2, r5
    32e4:	f8b2 c000 	ldrh.w	ip, [r2]
    32e8:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    32ec:	45f4      	cmp	ip, lr
    32ee:	d901      	bls.n	32f4 <Matrix_scan+0xf4>
					{
						state->curState = KeyState_Hold;
    32f0:	2102      	movs	r1, #2
    32f2:	e011      	b.n	3318 <Matrix_scan+0x118>
					}
					else
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    32f4:	2904      	cmp	r1, #4
    32f6:	d90c      	bls.n	3312 <Matrix_scan+0x112>
							//warn_print("FAST Release stopped");
							state->curState = state->prevState;
							continue;
						}

						state->curState = KeyState_Release;
    32f8:	2103      	movs	r1, #3
    32fa:	e00d      	b.n	3318 <Matrix_scan+0x118>
					}
					break;

				case KeyState_Release:
				case KeyState_Off:
					if ( state->activeCount > state->inactiveCount )
    32fc:	ebc4 0209 	rsb	r2, r4, r9
    3300:	442a      	add	r2, r5
    3302:	f8b2 c000 	ldrh.w	ip, [r2]
    3306:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    330a:	45f4      	cmp	ip, lr
    330c:	d906      	bls.n	331c <Matrix_scan+0x11c>
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    330e:	2904      	cmp	r1, #4
    3310:	d801      	bhi.n	3316 <Matrix_scan+0x116>
						{
							//warn_print("FAST Press stopped");
							state->curState = state->prevState;
    3312:	7150      	strb	r0, [r2, #5]
							continue;
    3314:	e032      	b.n	337c <Matrix_scan+0x17c>
						}

						state->curState = KeyState_Press;
    3316:	2101      	movs	r1, #1
    3318:	7151      	strb	r1, [r2, #5]
    331a:	e004      	b.n	3326 <Matrix_scan+0x126>
					}
					else
					{
						state->curState = KeyState_Off;
    331c:	2100      	movs	r1, #0
    331e:	e7fb      	b.n	3318 <Matrix_scan+0x118>
					}
					break;

				case KeyState_Invalid:
				default:
					erro_print("Matrix scan bug!! Report me!");
    3320:	485d      	ldr	r0, [pc, #372]	; (3498 <Matrix_scan+0x298>)
    3322:	f004 fe25 	bl	7f70 <_print>
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    3326:	ebc4 0309 	rsb	r3, r4, r9
    332a:	eb05 0903 	add.w	r9, r5, r3
    332e:	f89d 3000 	ldrb.w	r3, [sp]
    3332:	f889 3006 	strb.w	r3, [r9, #6]

				// Send keystate to macro module
				#ifndef GHOSTING_MATRIX
				Macro_keyState( key, state->curState );
    3336:	f899 1005 	ldrb.w	r1, [r9, #5]
    333a:	4620      	mov	r0, r4
    333c:	f002 f918 	bl	5570 <Macro_keyState>
				#endif

				// Matrix Debug, only if there is a state change
				if ( matrixDebugMode && state->curState != state->prevState )
    3340:	4b56      	ldr	r3, [pc, #344]	; (349c <Matrix_scan+0x29c>)
    3342:	781a      	ldrb	r2, [r3, #0]
    3344:	b1d2      	cbz	r2, 337c <Matrix_scan+0x17c>
    3346:	f899 1005 	ldrb.w	r1, [r9, #5]
    334a:	f899 0004 	ldrb.w	r0, [r9, #4]
    334e:	4288      	cmp	r0, r1
    3350:	d014      	beq.n	337c <Matrix_scan+0x17c>
				{
					// Basic debug output
					if ( matrixDebugMode == 1 && state->curState == KeyState_Press )
    3352:	2a01      	cmp	r2, #1
    3354:	d105      	bne.n	3362 <Matrix_scan+0x162>
    3356:	2901      	cmp	r1, #1
    3358:	d110      	bne.n	337c <Matrix_scan+0x17c>
					{
						printHex( key );
    335a:	4620      	mov	r0, r4
    335c:	f004 feab 	bl	80b6 <printHex_op>
    3360:	e009      	b.n	3376 <Matrix_scan+0x176>
						print(" ");
					}
					// State transition debug output
					else if ( matrixDebugMode == 2 )
    3362:	2a02      	cmp	r2, #2
    3364:	d10a      	bne.n	337c <Matrix_scan+0x17c>
					{
						printHex( key );
    3366:	4620      	mov	r0, r4
    3368:	2101      	movs	r1, #1
    336a:	f004 fea4 	bl	80b6 <printHex_op>
						Matrix_keyPositionDebug( state->curState );
    336e:	f899 0005 	ldrb.w	r0, [r9, #5]
    3372:	f7ff ff29 	bl	31c8 <Matrix_keyPositionDebug>
						print(" ");
    3376:	484a      	ldr	r0, [pc, #296]	; (34a0 <Matrix_scan+0x2a0>)
    3378:	f004 fdfa 	bl	7f70 <_print>
    337c:	f108 0801 	add.w	r8, r8, #1
    3380:	3409      	adds	r4, #9
		start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Scan each of the sense pins
		for ( uint8_t sense = 0; sense < Matrix_rowsNum; sense++ )
    3382:	f1b8 0f05 	cmp.w	r8, #5
    3386:	b2e4      	uxtb	r4, r4
    3388:	f47f af63 	bne.w	3252 <Matrix_scan+0x52>
				}
			}
		}

		// Unstrobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOff );
    338c:	4b45      	ldr	r3, [pc, #276]	; (34a4 <Matrix_scan+0x2a4>)
    338e:	4945      	ldr	r1, [pc, #276]	; (34a4 <Matrix_scan+0x2a4>)
    3390:	f813 2016 	ldrb.w	r2, [r3, r6, lsl #1]
    3394:	9b01      	ldr	r3, [sp, #4]
    3396:	440b      	add	r3, r1
    3398:	3601      	adds	r6, #1
    339a:	7858      	ldrb	r0, [r3, #1]
    339c:	2101      	movs	r1, #1
    339e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    33a2:	f7ff fe5b 	bl	305c <Matrix_pin>

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;

	// For each strobe, scan each of the sense pins
	for ( uint8_t strobe = 0; strobe < Matrix_colsNum; strobe++ )
    33a6:	2e09      	cmp	r6, #9
    33a8:	f47f af45 	bne.w	3236 <Matrix_scan+0x36>
#endif
	// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .


	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
    33ac:	4a3e      	ldr	r2, [pc, #248]	; (34a8 <Matrix_scan+0x2a8>)
    33ae:	8813      	ldrh	r3, [r2, #0]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d061      	beq.n	3478 <Matrix_scan+0x278>
	{
		// Decrement counter
		matrixDebugStateCounter--;
    33b4:	3b01      	subs	r3, #1

		// Output stats on number of scans being done per USB send
		print( NL );
    33b6:	483d      	ldr	r0, [pc, #244]	; (34ac <Matrix_scan+0x2ac>)

	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
	{
		// Decrement counter
		matrixDebugStateCounter--;
    33b8:	8013      	strh	r3, [r2, #0]

		// Output stats on number of scans being done per USB send
		print( NL );
    33ba:	f004 fdd9 	bl	7f70 <_print>
		info_msg("Max scans:      ");
    33be:	483c      	ldr	r0, [pc, #240]	; (34b0 <Matrix_scan+0x2b0>)
    33c0:	4d33      	ldr	r5, [pc, #204]	; (3490 <Matrix_scan+0x290>)
    33c2:	f004 fdd5 	bl	7f70 <_print>
		printHex( matrixMaxScans );
    33c6:	2101      	movs	r1, #1
    33c8:	f8bb 0000 	ldrh.w	r0, [fp]
    33cc:	f004 fe73 	bl	80b6 <printHex_op>
		print( NL );
    33d0:	4836      	ldr	r0, [pc, #216]	; (34ac <Matrix_scan+0x2ac>)
    33d2:	f004 fdcd 	bl	7f70 <_print>
		info_msg("Previous scans: ");
    33d6:	4837      	ldr	r0, [pc, #220]	; (34b4 <Matrix_scan+0x2b4>)
    33d8:	f004 fdca 	bl	7f70 <_print>
		printHex( matrixPrevScans );
    33dc:	4b2a      	ldr	r3, [pc, #168]	; (3488 <Matrix_scan+0x288>)
    33de:	2101      	movs	r1, #1
    33e0:	8818      	ldrh	r0, [r3, #0]
    33e2:	f004 fe68 	bl	80b6 <printHex_op>
		print( NL );
    33e6:	4831      	ldr	r0, [pc, #196]	; (34ac <Matrix_scan+0x2ac>)
    33e8:	f004 fdc2 	bl	7f70 <_print>

		// Output current scan number
		info_msg("Scan Number:    ");
    33ec:	4832      	ldr	r0, [pc, #200]	; (34b8 <Matrix_scan+0x2b8>)
    33ee:	f004 fdbf 	bl	7f70 <_print>
		printHex( scanNum );
    33f2:	2101      	movs	r1, #1
    33f4:	4638      	mov	r0, r7
    33f6:	f004 fe5e 	bl	80b6 <printHex_op>
		print( NL );
    33fa:	482c      	ldr	r0, [pc, #176]	; (34ac <Matrix_scan+0x2ac>)
    33fc:	f004 fdb8 	bl	7f70 <_print>

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
    3400:	482e      	ldr	r0, [pc, #184]	; (34bc <Matrix_scan+0x2bc>)
    3402:	f004 fdb5 	bl	7f70 <_print>
    3406:	2400      	movs	r4, #0
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
		{
			// Every 4 keys, put a newline
			if ( key % 4 == 0 )
    3408:	07a3      	lsls	r3, r4, #30
    340a:	d102      	bne.n	3412 <Matrix_scan+0x212>
				print( NL );
    340c:	4827      	ldr	r0, [pc, #156]	; (34ac <Matrix_scan+0x2ac>)
    340e:	f004 fdaf 	bl	7f70 <_print>

			print("\033[1m0x");
    3412:	482b      	ldr	r0, [pc, #172]	; (34c0 <Matrix_scan+0x2c0>)
    3414:	f004 fdac 	bl	7f70 <_print>
			printHex_op( key, 2 );
    3418:	2102      	movs	r1, #2
    341a:	b2a0      	uxth	r0, r4
    341c:	f004 fe4b 	bl	80b6 <printHex_op>
			print("\033[0m");
    3420:	4828      	ldr	r0, [pc, #160]	; (34c4 <Matrix_scan+0x2c4>)
    3422:	f004 fda5 	bl	7f70 <_print>
			print(":");
    3426:	4828      	ldr	r0, [pc, #160]	; (34c8 <Matrix_scan+0x2c8>)
    3428:	f004 fda2 	bl	7f70 <_print>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
    342c:	7928      	ldrb	r0, [r5, #4]
    342e:	f7ff fecb 	bl	31c8 <Matrix_keyPositionDebug>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
    3432:	7968      	ldrb	r0, [r5, #5]
    3434:	f7ff fec8 	bl	31c8 <Matrix_keyPositionDebug>
			print(" 0x");
    3438:	4824      	ldr	r0, [pc, #144]	; (34cc <Matrix_scan+0x2cc>)
    343a:	f004 fd99 	bl	7f70 <_print>
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    343e:	4b14      	ldr	r3, [pc, #80]	; (3490 <Matrix_scan+0x290>)
    3440:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    3444:	441e      	add	r6, r3
    3446:	2104      	movs	r1, #4
    3448:	8830      	ldrh	r0, [r6, #0]
    344a:	f004 fe34 	bl	80b6 <printHex_op>
			print(" 0x");
    344e:	481f      	ldr	r0, [pc, #124]	; (34cc <Matrix_scan+0x2cc>)
    3450:	f004 fd8e 	bl	7f70 <_print>
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
    3454:	2104      	movs	r1, #4
    3456:	8870      	ldrh	r0, [r6, #2]
    3458:	f004 fe2d 	bl	80b6 <printHex_op>
    345c:	3401      	adds	r4, #1
			print(" ");
    345e:	4810      	ldr	r0, [pc, #64]	; (34a0 <Matrix_scan+0x2a0>)
    3460:	f004 fd86 	bl	7f70 <_print>
		printHex( scanNum );
		print( NL );

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
    3464:	2c2d      	cmp	r4, #45	; 0x2d
    3466:	f105 0507 	add.w	r5, r5, #7
    346a:	d1cd      	bne.n	3408 <Matrix_scan+0x208>
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    346c:	480f      	ldr	r0, [pc, #60]	; (34ac <Matrix_scan+0x2ac>)
	}
}
    346e:	b003      	add	sp, #12
    3470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    3474:	f004 bd7c 	b.w	7f70 <_print>
	}
}
    3478:	b003      	add	sp, #12
    347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    347e:	bf00      	nop
    3480:	1fff90d2 	.word	0x1fff90d2
    3484:	1fff90ce 	.word	0x1fff90ce
    3488:	1fff90d0 	.word	0x1fff90d0
    348c:	1fff90c4 	.word	0x1fff90c4
    3490:	1fff9aeb 	.word	0x1fff9aeb
    3494:	1fff89fa 	.word	0x1fff89fa
    3498:	000088fd 	.word	0x000088fd
    349c:	1fff90d4 	.word	0x1fff90d4
    34a0:	00008952 	.word	0x00008952
    34a4:	1fff89e8 	.word	0x1fff89e8
    34a8:	1fff90d6 	.word	0x1fff90d6
    34ac:	0000c0ef 	.word	0x0000c0ef
    34b0:	00008931 	.word	0x00008931
    34b4:	00008954 	.word	0x00008954
    34b8:	00008977 	.word	0x00008977
    34bc:	0000899a 	.word	0x0000899a
    34c0:	000089e0 	.word	0x000089e0
    34c4:	0000af19 	.word	0x0000af19
    34c8:	000089e7 	.word	0x000089e7
    34cc:	000089e9 	.word	0x000089e9

000034d0 <Matrix_currentChange>:


// Called by parent scan module whenever the available current changes
// current - mA
void Matrix_currentChange( unsigned int current )
{
    34d0:	4770      	bx	lr
    34d2:	0000      	movs	r0, r0

000034d4 <cliFunc_lcdColor>:
    }

}

void cliFunc_lcdColor( char* args )
{
    34d4:	b530      	push	{r4, r5, lr}
    34d6:	b085      	sub	sp, #20
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    34d8:	ad04      	add	r5, sp, #16
    34da:	2400      	movs	r4, #0
    34dc:	f845 0d0c 	str.w	r0, [r5, #-12]!

	// Parse integers from 3 arguments
	for ( uint8_t color = 0; color < 3; color++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    34e0:	9801      	ldr	r0, [sp, #4]
    34e2:	462a      	mov	r2, r5
    34e4:	4669      	mov	r1, sp
    34e6:	f004 fa63 	bl	79b0 <CLI_argumentIsolation>

		// Give up if not enough args given
		if ( *arg1Ptr == '\0' )
    34ea:	9800      	ldr	r0, [sp, #0]
    34ec:	7803      	ldrb	r3, [r0, #0]
    34ee:	b18b      	cbz	r3, 3514 <cliFunc_lcdColor+0x40>
			return;

		// Convert argument to integer
		rgb[ color ] = numToInt( arg1Ptr );
    34f0:	f004 fe50 	bl	8194 <numToInt>
    34f4:	ab02      	add	r3, sp, #8
    34f6:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    34fa:	3401      	adds	r4, #1

	// Colors
	uint16_t rgb[3]; // Red, Green, Blue

	// Parse integers from 3 arguments
	for ( uint8_t color = 0; color < 3; color++ )
    34fc:	2c03      	cmp	r4, #3
    34fe:	d1ef      	bne.n	34e0 <cliFunc_lcdColor+0xc>
		// Convert argument to integer
		rgb[ color ] = numToInt( arg1Ptr );
	}

	// Set PWM channels
	FTM0_C0V = rgb[0];
    3500:	4b05      	ldr	r3, [pc, #20]	; (3518 <cliFunc_lcdColor+0x44>)
    3502:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    3506:	601a      	str	r2, [r3, #0]
	FTM0_C1V = rgb[1];
    3508:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    350c:	609a      	str	r2, [r3, #8]
	FTM0_C2V = rgb[2];
    350e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    3512:	611a      	str	r2, [r3, #16]
}
    3514:	b005      	add	sp, #20
    3516:	bd30      	pop	{r4, r5, pc}
    3518:	40038010 	.word	0x40038010

0000351c <SPI_write>:
		| SPI_CTAR_PBR(0) | SPI_CTAR_BR(7);
}

// Write buffer to SPI FIFO
void SPI_write( uint8_t *buffer, uint8_t len )
{
    351c:	b5f0      	push	{r4, r5, r6, r7, lr}

	for ( uint8_t byte = 0; byte < len; byte++ )
	{
		// Wait for SPI TxFIFO to have 4 or fewer entries
		while ( !( SPI0_SR & SPI_SR_TFFF ) )
    351e:	4c11      	ldr	r4, [pc, #68]	; (3564 <L_119_delayMicroseconds+0x26>)
			delayMicroseconds(10);

		// Write byte to TxFIFO
		// CS0, CTAR0
		SPI0_PUSHR = ( buffer[ byte ] & 0xff ) | SPI_PUSHR_PCS(1);
    3520:	f8df e044 	ldr.w	lr, [pc, #68]	; 3568 <L_119_delayMicroseconds+0x2a>

// Write buffer to SPI FIFO
void SPI_write( uint8_t *buffer, uint8_t len )
{

	for ( uint8_t byte = 0; byte < len; byte++ )
    3524:	4602      	mov	r2, r0
    3526:	4625      	mov	r5, r4
    3528:	f44f 76a0 	mov.w	r6, #320	; 0x140
    352c:	4627      	mov	r7, r4
    352e:	1a13      	subs	r3, r2, r0
    3530:	b2db      	uxtb	r3, r3
    3532:	4299      	cmp	r1, r3
    3534:	d914      	bls.n	3560 <L_119_delayMicroseconds+0x22>
	{
		// Wait for SPI TxFIFO to have 4 or fewer entries
		while ( !( SPI0_SR & SPI_SR_TFFF ) )
    3536:	6823      	ldr	r3, [r4, #0]
    3538:	019b      	lsls	r3, r3, #6
    353a:	d403      	bmi.n	3544 <L_119_delayMicroseconds+0x6>
    353c:	4633      	mov	r3, r6

0000353e <L_119_delayMicroseconds>:
    353e:	3b01      	subs	r3, #1
    3540:	d1fd      	bne.n	353e <L_119_delayMicroseconds>
    3542:	e7f8      	b.n	3536 <SPI_write+0x1a>
			delayMicroseconds(10);

		// Write byte to TxFIFO
		// CS0, CTAR0
		SPI0_PUSHR = ( buffer[ byte ] & 0xff ) | SPI_PUSHR_PCS(1);
    3544:	f812 3b01 	ldrb.w	r3, [r2], #1
    3548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    354c:	f8ce 3000 	str.w	r3, [lr]

		// Indicate transfer has completed
		while ( !( SPI0_SR & SPI_SR_TCF ) );
    3550:	683b      	ldr	r3, [r7, #0]
    3552:	2b00      	cmp	r3, #0
    3554:	dafc      	bge.n	3550 <L_119_delayMicroseconds+0x12>
		SPI0_SR |= SPI_SR_TCF;
    3556:	682b      	ldr	r3, [r5, #0]
    3558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    355c:	602b      	str	r3, [r5, #0]
    355e:	e7e6      	b.n	352e <SPI_write+0x12>
	}
}
    3560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3562:	bf00      	nop
    3564:	4002c02c 	.word	0x4002c02c
    3568:	4002c034 	.word	0x4002c034

0000356c <LCD_writeControlReg>:

// Write to a control register
void LCD_writeControlReg( uint8_t byte )
{
    356c:	b513      	push	{r0, r1, r4, lr}
	// Wait for TxFIFO to be empt
	while ( SPI0_TxFIFO_CNT != 0 );
    356e:	4a10      	ldr	r2, [pc, #64]	; (35b0 <L_205_delayMicroseconds+0x12>)
	}
}

// Write to a control register
void LCD_writeControlReg( uint8_t byte )
{
    3570:	f88d 0007 	strb.w	r0, [sp, #7]
	// Wait for TxFIFO to be empt
	while ( SPI0_TxFIFO_CNT != 0 );
    3574:	6813      	ldr	r3, [r2, #0]
    3576:	4c0e      	ldr	r4, [pc, #56]	; (35b0 <L_205_delayMicroseconds+0x12>)
    3578:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    357c:	d1fa      	bne.n	3574 <LCD_writeControlReg+0x8>

	// Set A0 low to enter control register mode
	GPIOC_PCOR |= (1<<7);
    357e:	4a0d      	ldr	r2, [pc, #52]	; (35b4 <L_205_delayMicroseconds+0x16>)
    3580:	6813      	ldr	r3, [r2, #0]
    3582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3586:	6013      	str	r3, [r2, #0]

	// Write byte to SPI FIFO
	SPI_write( &byte, 1 );
    3588:	2101      	movs	r1, #1
    358a:	f10d 0007 	add.w	r0, sp, #7
    358e:	f7ff ffc5 	bl	351c <SPI_write>

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    3592:	6823      	ldr	r3, [r4, #0]
    3594:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    3598:	d1fb      	bne.n	3592 <LCD_writeControlReg+0x26>
    359a:	f44f 73a0 	mov.w	r3, #320	; 0x140

0000359e <L_205_delayMicroseconds>:
    359e:	3b01      	subs	r3, #1
    35a0:	d1fd      	bne.n	359e <L_205_delayMicroseconds>

	// Make sure data has transferred
	delayMicroseconds(10); // XXX Adjust if SPI speed changes

	// Set A0 high to go back to display register mode
	GPIOC_PSOR |= (1<<7);
    35a2:	4a05      	ldr	r2, [pc, #20]	; (35b8 <L_205_delayMicroseconds+0x1a>)
    35a4:	6813      	ldr	r3, [r2, #0]
    35a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    35aa:	6013      	str	r3, [r2, #0]
}
    35ac:	b002      	add	sp, #8
    35ae:	bd10      	pop	{r4, pc}
    35b0:	4002c02c 	.word	0x4002c02c
    35b4:	400ff088 	.word	0x400ff088
    35b8:	400ff084 	.word	0x400ff084

000035bc <cliFunc_lcdDisp>:
	FTM0_C1V = rgb[1];
	FTM0_C2V = rgb[2];
}

void cliFunc_lcdDisp( char* args )
{
    35bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    35be:	ac04      	add	r4, sp, #16

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35c0:	a902      	add	r1, sp, #8

void cliFunc_lcdDisp( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    35c2:	f844 0d04 	str.w	r0, [r4, #-4]!

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35c6:	4622      	mov	r2, r4
    35c8:	f004 f9f2 	bl	79b0 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    35cc:	9802      	ldr	r0, [sp, #8]
    35ce:	7803      	ldrb	r3, [r0, #0]
    35d0:	b373      	cbz	r3, 3630 <cliFunc_lcdDisp+0x74>
		return;
	uint8_t page = numToInt( arg1Ptr );
    35d2:	f004 fddf 	bl	8194 <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35d6:	4622      	mov	r2, r4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page = numToInt( arg1Ptr );
    35d8:	4605      	mov	r5, r0

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35da:	a902      	add	r1, sp, #8
    35dc:	9803      	ldr	r0, [sp, #12]
    35de:	f004 f9e7 	bl	79b0 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    35e2:	9802      	ldr	r0, [sp, #8]
    35e4:	7803      	ldrb	r3, [r0, #0]
    35e6:	b31b      	cbz	r3, 3630 <cliFunc_lcdDisp+0x74>
		return;
	uint8_t address = numToInt( arg1Ptr );
    35e8:	f004 fdd4 	bl	8194 <numToInt>
    35ec:	b2c6      	uxtb	r6, r0

	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    35ee:	f005 000f 	and.w	r0, r5, #15
    35f2:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
    35f6:	f7ff ffb9 	bl	356c <LCD_writeControlReg>

	// Set starting address
	LCD_writeControlReg( 0x10 | ( ( 0xF0 & address ) >> 4 ) );
    35fa:	0930      	lsrs	r0, r6, #4
    35fc:	f040 0010 	orr.w	r0, r0, #16
    3600:	f7ff ffb4 	bl	356c <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 | ( 0x0F & address ));
    3604:	f006 000f 	and.w	r0, r6, #15
    3608:	f7ff ffb0 	bl	356c <LCD_writeControlReg>

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    360c:	9803      	ldr	r0, [sp, #12]
    360e:	4622      	mov	r2, r4
    3610:	a902      	add	r1, sp, #8
    3612:	f004 f9cd 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3616:	9802      	ldr	r0, [sp, #8]
    3618:	7803      	ldrb	r3, [r0, #0]
    361a:	b14b      	cbz	r3, 3630 <cliFunc_lcdDisp+0x74>
			break;

		uint8_t value = numToInt( arg1Ptr ); 
    361c:	f004 fdba 	bl	8194 <numToInt>
		// Write buffer to SPI
		SPI_write( &value, 1 );
    3620:	2101      	movs	r1, #1

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
			break;

		uint8_t value = numToInt( arg1Ptr ); 
    3622:	f88d 0007 	strb.w	r0, [sp, #7]
		// Write buffer to SPI
		SPI_write( &value, 1 );
    3626:	f10d 0007 	add.w	r0, sp, #7
    362a:	f7ff ff77 	bl	351c <SPI_write>
	}
    362e:	e7ed      	b.n	360c <cliFunc_lcdDisp+0x50>
}
    3630:	b004      	add	sp, #16
    3632:	bd70      	pop	{r4, r5, r6, pc}

00003634 <LCD_writeDataReg>:
	GPIOC_PSOR |= (1<<7);
}

// Write to a data register with a0 bit high
void LCD_writeDataReg( uint8_t byte )
{
    3634:	b513      	push	{r0, r1, r4, lr}
	// Wait for TxFIFO to be empt
	while ( SPI0_TxFIFO_CNT != 0 );
    3636:	4a0e      	ldr	r2, [pc, #56]	; (3670 <L_380_delayMicroseconds+0xa>)
	GPIOC_PSOR |= (1<<7);
}

// Write to a data register with a0 bit high
void LCD_writeDataReg( uint8_t byte )
{
    3638:	f88d 0007 	strb.w	r0, [sp, #7]
	// Wait for TxFIFO to be empt
	while ( SPI0_TxFIFO_CNT != 0 );
    363c:	6813      	ldr	r3, [r2, #0]
    363e:	4c0c      	ldr	r4, [pc, #48]	; (3670 <L_380_delayMicroseconds+0xa>)
    3640:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    3644:	d1fa      	bne.n	363c <LCD_writeDataReg+0x8>
        
        // Set A0 high to enter display register mode
        GPIOC_PSOR |= (1<<7);
    3646:	4a0b      	ldr	r2, [pc, #44]	; (3674 <L_380_delayMicroseconds+0xe>)
    3648:	6813      	ldr	r3, [r2, #0]
    364a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    364e:	6013      	str	r3, [r2, #0]

	// Write byte to SPI FIFO
	SPI_write( &byte, 1 );
    3650:	2101      	movs	r1, #1
    3652:	f10d 0007 	add.w	r0, sp, #7
    3656:	f7ff ff61 	bl	351c <SPI_write>

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    365a:	6823      	ldr	r3, [r4, #0]
    365c:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    3660:	d1fb      	bne.n	365a <LCD_writeDataReg+0x26>
    3662:	f44f 73a0 	mov.w	r3, #320	; 0x140

00003666 <L_380_delayMicroseconds>:
    3666:	3b01      	subs	r3, #1
    3668:	d1fd      	bne.n	3666 <L_380_delayMicroseconds>

	// Make sure data has transferred
	delayMicroseconds(10); // XXX Adjust if SPI speed changes

}
    366a:	b002      	add	sp, #8
    366c:	bd10      	pop	{r4, pc}
    366e:	bf00      	nop
    3670:	4002c02c 	.word	0x4002c02c
    3674:	400ff084 	.word	0x400ff084

00003678 <cliFunc_lcdCmd>:
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
}

void cliFunc_lcdCmd( char* args )
{
    3678:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    367a:	ac02      	add	r4, sp, #8
    367c:	f844 0d04 	str.w	r0, [r4, #-4]!

	print( NL ); // No \r\n by default after the command is entered
    3680:	481a      	ldr	r0, [pc, #104]	; (36ec <cliFunc_lcdCmd+0x74>)
    3682:	f004 fc75 	bl	7f70 <_print>

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3686:	9801      	ldr	r0, [sp, #4]
    3688:	4622      	mov	r2, r4
    368a:	4669      	mov	r1, sp
    368c:	f004 f990 	bl	79b0 <CLI_argumentIsolation>

	// No args
	if ( *arg1Ptr == '\0' )
    3690:	9800      	ldr	r0, [sp, #0]
    3692:	7803      	ldrb	r3, [r0, #0]
    3694:	b933      	cbnz	r3, 36a4 <cliFunc_lcdCmd+0x2c>
    {
		print("No args provided.");
    3696:	4816      	ldr	r0, [pc, #88]	; (36f0 <cliFunc_lcdCmd+0x78>)
    3698:	f004 fc6a 	bl	7f70 <_print>
		print( NL );
    369c:	4813      	ldr	r0, [pc, #76]	; (36ec <cliFunc_lcdCmd+0x74>)
    369e:	f004 fc67 	bl	7f70 <_print>
		return;
    36a2:	e021      	b.n	36e8 <cliFunc_lcdCmd+0x70>
    }
	// SPI Command
	uint8_t cmd = (uint8_t)numToInt( arg1Ptr );
    36a4:	f004 fd76 	bl	8194 <numToInt>

	// Single Arg
	if ( *arg2Ptr == '\0' )
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	781b      	ldrb	r3, [r3, #0]
		print("No args provided.");
		print( NL );
		return;
    }
	// SPI Command
	uint8_t cmd = (uint8_t)numToInt( arg1Ptr );
    36ac:	b2c4      	uxtb	r4, r0
    36ae:	b2a5      	uxth	r5, r4

	// Single Arg
	if ( *arg2Ptr == '\0' )
    36b0:	b96b      	cbnz	r3, 36ce <cliFunc_lcdCmd+0x56>
	{
        info_msg("Sending- ");
    36b2:	4810      	ldr	r0, [pc, #64]	; (36f4 <cliFunc_lcdCmd+0x7c>)
    36b4:	f004 fc5c 	bl	7f70 <_print>
		printHex( cmd );
    36b8:	2101      	movs	r1, #1
    36ba:	4628      	mov	r0, r5
    36bc:	f004 fcfb 	bl	80b6 <printHex_op>
		print( NL );
    36c0:	480a      	ldr	r0, [pc, #40]	; (36ec <cliFunc_lcdCmd+0x74>)
    36c2:	f004 fc55 	bl	7f70 <_print>
		LCD_writeControlReg( cmd );
    36c6:	4620      	mov	r0, r4
    36c8:	f7ff ff50 	bl	356c <LCD_writeControlReg>
		return;
    36cc:	e00c      	b.n	36e8 <cliFunc_lcdCmd+0x70>
	}

	if ( *arg2Ptr != '\0' ) 
	{
		info_msg("Sending WITH A0 FLAG SET- ");
    36ce:	480a      	ldr	r0, [pc, #40]	; (36f8 <cliFunc_lcdCmd+0x80>)
    36d0:	f004 fc4e 	bl	7f70 <_print>
		printHex( cmd );
    36d4:	2101      	movs	r1, #1
    36d6:	4628      	mov	r0, r5
    36d8:	f004 fced 	bl	80b6 <printHex_op>
		print( NL );
    36dc:	4803      	ldr	r0, [pc, #12]	; (36ec <cliFunc_lcdCmd+0x74>)
    36de:	f004 fc47 	bl	7f70 <_print>
		LCD_writeDataReg( cmd );
    36e2:	4620      	mov	r0, r4
    36e4:	f7ff ffa6 	bl	3634 <LCD_writeDataReg>
		return;
    }

}
    36e8:	b003      	add	sp, #12
    36ea:	bd30      	pop	{r4, r5, pc}
    36ec:	0000c0ef 	.word	0x0000c0ef
    36f0:	000090e4 	.word	0x000090e4
    36f4:	000090f6 	.word	0x000090f6
    36f8:	00009112 	.word	0x00009112

000036fc <LCD_writeDisplayReg>:

// Write to display register
// Pages 0-7 normal display
// Page  8   icon buffer
void LCD_writeDisplayReg( uint8_t page, uint8_t *buffer, uint8_t len )
{
    36fc:	b538      	push	{r3, r4, r5, lr}
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    36fe:	f000 000f 	and.w	r0, r0, #15
    3702:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0

// Write to display register
// Pages 0-7 normal display
// Page  8   icon buffer
void LCD_writeDisplayReg( uint8_t page, uint8_t *buffer, uint8_t len )
{
    3706:	460c      	mov	r4, r1
    3708:	4615      	mov	r5, r2
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    370a:	f7ff ff2f 	bl	356c <LCD_writeControlReg>

	// Set display start line
	LCD_writeControlReg( 0x40 );
    370e:	2040      	movs	r0, #64	; 0x40
    3710:	f7ff ff2c 	bl	356c <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    3714:	2010      	movs	r0, #16
    3716:	f7ff ff29 	bl	356c <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    371a:	2000      	movs	r0, #0
    371c:	f7ff ff26 	bl	356c <LCD_writeControlReg>

	// Write buffer to SPI
	SPI_write( buffer, len );
    3720:	4629      	mov	r1, r5
    3722:	4620      	mov	r0, r4
}
    3724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// Reset Column Address
	LCD_writeControlReg( 0x10 );
	LCD_writeControlReg( 0x00 );

	// Write buffer to SPI
	SPI_write( buffer, len );
    3728:	f7ff bef8 	b.w	351c <SPI_write>

0000372c <cliFunc_lcdTest>:
{
	LCD_initialize();
}

void cliFunc_lcdTest( char* args )
{
    372c:	b538      	push	{r3, r4, r5, lr}
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    372e:	4d06      	ldr	r5, [pc, #24]	; (3748 <cliFunc_lcdTest+0x1c>)
{
	LCD_initialize();
}

void cliFunc_lcdTest( char* args )
{
    3730:	2400      	movs	r4, #0
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3732:	eb05 11c4 	add.w	r1, r5, r4, lsl #7
    3736:	b2e0      	uxtb	r0, r4
    3738:	2280      	movs	r2, #128	; 0x80
    373a:	3401      	adds	r4, #1
    373c:	f7ff ffde 	bl	36fc <LCD_writeDisplayReg>
}

void cliFunc_lcdTest( char* args )
{
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3740:	2c04      	cmp	r4, #4
    3742:	d1f6      	bne.n	3732 <cliFunc_lcdTest+0x6>
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
}
    3744:	bd38      	pop	{r3, r4, r5, pc}
    3746:	bf00      	nop
    3748:	00009207 	.word	0x00009207

0000374c <LCD_clear>:
	while ( SPI0_TxFIFO_CNT != 0 );
}

// Clear Display
void LCD_clear()
{
    374c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    374e:	2400      	movs	r4, #0
		// Write buffer to SPI
		SPI_write( &byte, 1 );
	}

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    3750:	4f18      	ldr	r7, [pc, #96]	; (37b4 <LCD_clear+0x68>)
	// Set display start line
	LCD_writeControlReg( 0x40 );

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
	LCD_writeControlReg( 0x00 );
    3752:	4626      	mov	r6, r4
}

inline void LCD_clearPage( uint8_t page )
{
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3754:	f064 004f 	orn	r0, r4, #79	; 0x4f
    3758:	b2c0      	uxtb	r0, r0
    375a:	f7ff ff07 	bl	356c <LCD_writeControlReg>

	// Set display start line
	LCD_writeControlReg( 0x40 );
    375e:	2040      	movs	r0, #64	; 0x40
    3760:	f7ff ff04 	bl	356c <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    3764:	2010      	movs	r0, #16
    3766:	f7ff ff01 	bl	356c <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    376a:	2000      	movs	r0, #0
    376c:	f7ff fefe 	bl	356c <LCD_writeControlReg>
    3770:	2581      	movs	r5, #129	; 0x81

	for ( uint8_t page_reg = 0; page_reg < LCD_PAGE_LEN; page_reg++ )
    3772:	3d01      	subs	r5, #1
    3774:	d007      	beq.n	3786 <LCD_clear+0x3a>
	{
		uint8_t byte = 0;

		// Write buffer to SPI
		SPI_write( &byte, 1 );
    3776:	2101      	movs	r1, #1
    3778:	f10d 0007 	add.w	r0, sp, #7
	LCD_writeControlReg( 0x10 );
	LCD_writeControlReg( 0x00 );

	for ( uint8_t page_reg = 0; page_reg < LCD_PAGE_LEN; page_reg++ )
	{
		uint8_t byte = 0;
    377c:	f88d 6007 	strb.w	r6, [sp, #7]

		// Write buffer to SPI
		SPI_write( &byte, 1 );
    3780:	f7ff fecc 	bl	351c <SPI_write>
    3784:	e7f5      	b.n	3772 <LCD_clear+0x26>
	}

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    3786:	683d      	ldr	r5, [r7, #0]
    3788:	f3c5 3503 	ubfx	r5, r5, #12, #4
    378c:	2d00      	cmp	r5, #0
    378e:	d1fa      	bne.n	3786 <LCD_clear+0x3a>
    3790:	3401      	adds	r4, #1

// Clear Display
void LCD_clear()
{
	// Setup each page
	for ( uint8_t page = 0; page < LCD_TOTAL_PAGES; page++ )
    3792:	2c09      	cmp	r4, #9
    3794:	d1de      	bne.n	3754 <LCD_clear+0x8>
		LCD_clearPage( page );
	}

	// Reset Page, Start Line, and Column Address
	// Page
	LCD_writeControlReg( 0xB0 );
    3796:	20b0      	movs	r0, #176	; 0xb0
    3798:	f7ff fee8 	bl	356c <LCD_writeControlReg>

	// Start Line
	LCD_writeControlReg( 0x40 );
    379c:	2040      	movs	r0, #64	; 0x40
    379e:	f7ff fee5 	bl	356c <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    37a2:	2010      	movs	r0, #16
    37a4:	f7ff fee2 	bl	356c <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    37a8:	4628      	mov	r0, r5
    37aa:	f7ff fedf 	bl	356c <LCD_writeControlReg>
}
    37ae:	b003      	add	sp, #12
    37b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37b2:	bf00      	nop
    37b4:	4002c02c 	.word	0x4002c02c

000037b8 <LCD_initialize>:

// Intialize display
void LCD_initialize()
{
    37b8:	b508      	push	{r3, lr}
	// ADC Select (Normal)
	LCD_writeControlReg( 0xA0 );
    37ba:	20a0      	movs	r0, #160	; 0xa0
    37bc:	f7ff fed6 	bl	356c <LCD_writeControlReg>

	// LCD Off
	LCD_writeControlReg( 0xAE );
    37c0:	20ae      	movs	r0, #174	; 0xae
    37c2:	f7ff fed3 	bl	356c <LCD_writeControlReg>

	// COM Scan Output Direction
	LCD_writeControlReg( 0xC0 );
    37c6:	20c0      	movs	r0, #192	; 0xc0
    37c8:	f7ff fed0 	bl	356c <LCD_writeControlReg>

	// LCD Bias (1/6 bias)
	LCD_writeControlReg( 0xA2 );
    37cc:	20a2      	movs	r0, #162	; 0xa2
    37ce:	f7ff fecd 	bl	356c <LCD_writeControlReg>

	// Power Supply Operating Mode (Internal Only)
	LCD_writeControlReg( 0x2F );
    37d2:	202f      	movs	r0, #47	; 0x2f
    37d4:	f7ff feca 	bl	356c <LCD_writeControlReg>

	// Internal Rb/Ra Ratio
	LCD_writeControlReg( 0x26 );
    37d8:	2026      	movs	r0, #38	; 0x26
    37da:	f7ff fec7 	bl	356c <LCD_writeControlReg>

	// Reset
	LCD_writeControlReg( 0xE2 );
    37de:	20e2      	movs	r0, #226	; 0xe2
    37e0:	f7ff fec4 	bl	356c <LCD_writeControlReg>

	// Electric volume mode set, and value
	LCD_writeControlReg( 0x81 );
    37e4:	2081      	movs	r0, #129	; 0x81
    37e6:	f7ff fec1 	bl	356c <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    37ea:	2000      	movs	r0, #0
    37ec:	f7ff febe 	bl	356c <LCD_writeControlReg>

	// LCD On
	LCD_writeControlReg( 0xAF );
    37f0:	20af      	movs	r0, #175	; 0xaf
    37f2:	f7ff febb 	bl	356c <LCD_writeControlReg>

	// Clear Display RAM
	LCD_clear();
}
    37f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// LCD On
	LCD_writeControlReg( 0xAF );

	// Clear Display RAM
	LCD_clear();
    37fa:	f7ff bfa7 	b.w	374c <LCD_clear>

000037fe <cliFunc_lcdInit>:

// ----- CLI Command Functions -----

void cliFunc_lcdInit( char* args )
{
	LCD_initialize();
    37fe:	f7ff bfdb 	b.w	37b8 <LCD_initialize>
    3802:	0000      	movs	r0, r0

00003804 <LCD_setup>:
	LCD_clear();
}

// Setup
inline void LCD_setup()
{
    3804:	b570      	push	{r4, r5, r6, lr}
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    3806:	4c35      	ldr	r4, [pc, #212]	; (38dc <LCD_setup+0xd8>)

// Setup
inline void LCD_setup()
{
	// Register Scan CLI dictionary
	CLI_registerDictionary( lcdCLIDict, lcdCLIDictName );
    3808:	4935      	ldr	r1, [pc, #212]	; (38e0 <LCD_setup+0xdc>)
    380a:	4836      	ldr	r0, [pc, #216]	; (38e4 <LCD_setup+0xe0>)
	// Run LCD intialization sequence
	LCD_initialize();

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    380c:	4e36      	ldr	r6, [pc, #216]	; (38e8 <LCD_setup+0xe4>)

// Setup
inline void LCD_setup()
{
	// Register Scan CLI dictionary
	CLI_registerDictionary( lcdCLIDict, lcdCLIDictName );
    380e:	f004 f947 	bl	7aa0 <CLI_registerDictionary>
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    3812:	6823      	ldr	r3, [r4, #0]

	// Setup MOSI (SOUT) and SCLK (SCK)
	PORTC_PCR6 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    3814:	4a35      	ldr	r2, [pc, #212]	; (38ec <LCD_setup+0xe8>)
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    3816:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    381a:	6023      	str	r3, [r4, #0]

	// Setup MOSI (SOUT) and SCLK (SCK)
	PORTC_PCR6 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    381c:	f44f 7310 	mov.w	r3, #576	; 0x240
    3820:	6013      	str	r3, [r2, #0]
	PORTC_PCR5 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    3822:	f842 3c04 	str.w	r3, [r2, #-4]

	// Setup SS (PCS)
	PORTC_PCR4 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    3826:	f842 3c08 	str.w	r3, [r2, #-8]

	// Master Mode, CS0
	SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(1);
    382a:	4b31      	ldr	r3, [pc, #196]	; (38f0 <LCD_setup+0xec>)
    382c:	4a31      	ldr	r2, [pc, #196]	; (38f4 <LCD_setup+0xf0>)
    382e:	601a      	str	r2, [r3, #0]

	// DSPI Clock and Transfer Attributes
	// Frame Size: 8 bits
	// MSB First
	// CLK Low by default
	SPI0_CTAR0 = SPI_CTAR_FMSZ(7)
    3830:	4a31      	ldr	r2, [pc, #196]	; (38f8 <LCD_setup+0xf4>)
    3832:	60da      	str	r2, [r3, #12]
	// Initialize SPI
	SPI_setup();

	// Setup Register Control Signal (A0)
	// Start in display register mode (1)
	GPIOC_PDDR |= (1<<7);
    3834:	4a31      	ldr	r2, [pc, #196]	; (38fc <LCD_setup+0xf8>)
    3836:	6813      	ldr	r3, [r2, #0]
    3838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    383c:	6013      	str	r3, [r2, #0]
	PORTC_PCR7 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    383e:	4b30      	ldr	r3, [pc, #192]	; (3900 <LCD_setup+0xfc>)
    3840:	f44f 70a2 	mov.w	r0, #324	; 0x144
    3844:	6018      	str	r0, [r3, #0]
	GPIOC_PSOR |= (1<<7);
    3846:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
    384a:	3368      	adds	r3, #104	; 0x68
    384c:	6819      	ldr	r1, [r3, #0]
    384e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    3852:	6019      	str	r1, [r3, #0]

	// Setup LCD Reset pin (RST)
	// 0 - Reset, 1 - Normal Operation
	// Start in normal mode (1)
	GPIOC_PDDR |= (1<<8);
    3854:	6811      	ldr	r1, [r2, #0]
    3856:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    385a:	6011      	str	r1, [r2, #0]
	PORTC_PCR8 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    385c:	f5a2 2234 	sub.w	r2, r2, #737280	; 0xb4000
    3860:	3a74      	subs	r2, #116	; 0x74
    3862:	6010      	str	r0, [r2, #0]
	GPIOC_PSOR |= (1<<8);
    3864:	681a      	ldr	r2, [r3, #0]
    3866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    386a:	601a      	str	r2, [r3, #0]

	// Run LCD intialization sequence
	LCD_initialize();
    386c:	f7ff ffa4 	bl	37b8 <LCD_initialize>
    3870:	2500      	movs	r5, #0

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3872:	eb06 11c5 	add.w	r1, r6, r5, lsl #7
    3876:	b2e8      	uxtb	r0, r5
    3878:	2280      	movs	r2, #128	; 0x80
    387a:	3501      	adds	r5, #1
    387c:	f7ff ff3e 	bl	36fc <LCD_writeDisplayReg>

	// Run LCD intialization sequence
	LCD_initialize();

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3880:	2d04      	cmp	r5, #4
    3882:	d1f6      	bne.n	3872 <LCD_setup+0x6e>
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );

	// Setup Backlight
	SIM_SCGC6 |= SIM_SCGC6_FTM0;
    3884:	6823      	ldr	r3, [r4, #0]
	// System clock, /w prescalar setting
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS( STLcdBacklightPrescalar_define );

	// Red
	FTM0_C0V = STLcdBacklightRed_define;
	PORTC_PCR1 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    3886:	491f      	ldr	r1, [pc, #124]	; (3904 <LCD_setup+0x100>)
	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );

	// Setup Backlight
	SIM_SCGC6 |= SIM_SCGC6_FTM0;
    3888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    388c:	6023      	str	r3, [r4, #0]
	FTM0_CNT = 0; // Reset counter
    388e:	4b1e      	ldr	r3, [pc, #120]	; (3908 <LCD_setup+0x104>)
    3890:	2200      	movs	r2, #0
    3892:	601a      	str	r2, [r3, #0]

	// PWM Period
	// 16-bit maximum
	FTM0_MOD = 0xFFFF;
    3894:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3898:	605a      	str	r2, [r3, #4]

	// Set FTM to PWM output - Edge Aligned, Low-true pulses
	FTM0_C0SC = 0x24; // MSnB:MSnA = 10, ELSnB:ELSnA = 01
    389a:	4a1c      	ldr	r2, [pc, #112]	; (390c <LCD_setup+0x108>)
    389c:	2324      	movs	r3, #36	; 0x24
    389e:	6013      	str	r3, [r2, #0]
	FTM0_C1SC = 0x24;
    38a0:	6093      	str	r3, [r2, #8]
	FTM0_C2SC = 0x24;
    38a2:	6113      	str	r3, [r2, #16]
	// 7 - 562 500  Hz ->   4 Hz
	// Using a higher pre-scalar without flicker is possible but FTM0_MOD will need to be reduced
	// Which will reduce the brightness range

	// System clock, /w prescalar setting
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS( STLcdBacklightPrescalar_define );
    38a4:	4b1a      	ldr	r3, [pc, #104]	; (3910 <LCD_setup+0x10c>)
    38a6:	2208      	movs	r2, #8
    38a8:	601a      	str	r2, [r3, #0]

	// Red
	FTM0_C0V = STLcdBacklightRed_define;
    38aa:	f640 72ff 	movw	r2, #4095	; 0xfff
    38ae:	611a      	str	r2, [r3, #16]
	PORTC_PCR1 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    38b0:	f240 4344 	movw	r3, #1092	; 0x444
    38b4:	600b      	str	r3, [r1, #0]

	// Green
	FTM0_C1V = STLcdBacklightGreen_define;
    38b6:	f5a1 3197 	sub.w	r1, r1, #77312	; 0x12e00
    38ba:	f5a1 71f6 	sub.w	r1, r1, #492	; 0x1ec
    38be:	600a      	str	r2, [r1, #0]
	PORTC_PCR2 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    38c0:	f501 3197 	add.w	r1, r1, #77312	; 0x12e00
    38c4:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
    38c8:	600b      	str	r3, [r1, #0]

	// Blue
	FTM0_C2V = STLcdBacklightBlue_define;
    38ca:	f5a1 3197 	sub.w	r1, r1, #77312	; 0x12e00
    38ce:	f5a1 71f4 	sub.w	r1, r1, #488	; 0x1e8
    38d2:	600a      	str	r2, [r1, #0]
	PORTC_PCR3 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    38d4:	4a0f      	ldr	r2, [pc, #60]	; (3914 <LCD_setup+0x110>)
    38d6:	6013      	str	r3, [r2, #0]
    38d8:	bd70      	pop	{r4, r5, r6, pc}
    38da:	bf00      	nop
    38dc:	4004803c 	.word	0x4004803c
    38e0:	00009085 	.word	0x00009085
    38e4:	0000909c 	.word	0x0000909c
    38e8:	00009207 	.word	0x00009207
    38ec:	4004b018 	.word	0x4004b018
    38f0:	4002c000 	.word	0x4002c000
    38f4:	80010000 	.word	0x80010000
    38f8:	38007777 	.word	0x38007777
    38fc:	400ff094 	.word	0x400ff094
    3900:	4004b01c 	.word	0x4004b01c
    3904:	4004b004 	.word	0x4004b004
    3908:	40038004 	.word	0x40038004
    390c:	4003800c 	.word	0x4003800c
    3910:	40038000 	.word	0x40038000
    3914:	4004b00c 	.word	0x4004b00c

00003918 <LCD_scan>:
		FTM0_C2V = 0xb9f9;
	}
}

inline uint8_t LCD_scan()
{
    3918:	b510      	push	{r4, lr}
static inline void check_caps_lock()
{
	static uint16_t hold_color[3];
	static uint8_t was_capslock = 0;

	uint16_t is_capslock = USBKeys_LEDs & 2;
    391a:	4b17      	ldr	r3, [pc, #92]	; (3978 <LCD_scan+0x60>)
    391c:	781a      	ldrb	r2, [r3, #0]
    391e:	4b17      	ldr	r3, [pc, #92]	; (397c <LCD_scan+0x64>)

	if ( is_capslock && !was_capslock )
    3920:	f002 0202 	and.w	r2, r2, #2
    3924:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    3928:	b172      	cbz	r2, 3948 <LCD_scan+0x30>
    392a:	781c      	ldrb	r4, [r3, #0]
    392c:	4814      	ldr	r0, [pc, #80]	; (3980 <LCD_scan+0x68>)
    392e:	4915      	ldr	r1, [pc, #84]	; (3984 <LCD_scan+0x6c>)
    3930:	4a15      	ldr	r2, [pc, #84]	; (3988 <LCD_scan+0x70>)
    3932:	b9b4      	cbnz	r4, 3962 <LCD_scan+0x4a>
	{
		// entering capslock state
		was_capslock = 1;
    3934:	2401      	movs	r4, #1
    3936:	701c      	strb	r4, [r3, #0]

		hold_color[0] = FTM0_C0V;
    3938:	4b14      	ldr	r3, [pc, #80]	; (398c <LCD_scan+0x74>)
    393a:	6804      	ldr	r4, [r0, #0]
    393c:	801c      	strh	r4, [r3, #0]
		hold_color[1] = FTM0_C1V;
    393e:	680c      	ldr	r4, [r1, #0]
    3940:	805c      	strh	r4, [r3, #2]
		hold_color[2] = FTM0_C2V;
    3942:	6814      	ldr	r4, [r2, #0]
    3944:	809c      	strh	r4, [r3, #4]
    3946:	e00c      	b.n	3962 <LCD_scan+0x4a>
	}
	else if ( !is_capslock && was_capslock )
    3948:	781a      	ldrb	r2, [r3, #0]
    394a:	b19a      	cbz	r2, 3974 <LCD_scan+0x5c>
	{
		was_capslock = 0;
    394c:	7019      	strb	r1, [r3, #0]

		FTM0_C0V = hold_color[0];
    394e:	4b0f      	ldr	r3, [pc, #60]	; (398c <LCD_scan+0x74>)
    3950:	4a0b      	ldr	r2, [pc, #44]	; (3980 <LCD_scan+0x68>)
    3952:	8819      	ldrh	r1, [r3, #0]
    3954:	6011      	str	r1, [r2, #0]
		FTM0_C1V = hold_color[1];
    3956:	8859      	ldrh	r1, [r3, #2]
    3958:	6091      	str	r1, [r2, #8]
		FTM0_C2V = hold_color[2];
    395a:	889a      	ldrh	r2, [r3, #4]
    395c:	4b0a      	ldr	r3, [pc, #40]	; (3988 <LCD_scan+0x70>)
    395e:	601a      	str	r2, [r3, #0]
    3960:	e008      	b.n	3974 <LCD_scan+0x5c>
	}

	if ( is_capslock )
	{
		FTM0_C0V = 0x8303;
    3962:	f248 3303 	movw	r3, #33539	; 0x8303
    3966:	6003      	str	r3, [r0, #0]
		FTM0_C1V = 0x1394;
    3968:	f241 3394 	movw	r3, #5012	; 0x1394
    396c:	600b      	str	r3, [r1, #0]
		FTM0_C2V = 0xb9f9;
    396e:	f64b 13f9 	movw	r3, #47609	; 0xb9f9
    3972:	6013      	str	r3, [r2, #0]

inline uint8_t LCD_scan()
{
	check_caps_lock();
	return 0;
}
    3974:	2000      	movs	r0, #0
    3976:	bd10      	pop	{r4, pc}
    3978:	1fff91e7 	.word	0x1fff91e7
    397c:	1fff90da 	.word	0x1fff90da
    3980:	40038010 	.word	0x40038010
    3984:	40038018 	.word	0x40038018
    3988:	40038020 	.word	0x40038020
    398c:	1fff90de 	.word	0x1fff90de

00003990 <LCD_currentChange>:

// Signal from parent Scan Module that available current has changed
// current - mA
void LCD_currentChange( unsigned int current )
{
    3990:	4770      	bx	lr
    3992:	0000      	movs	r0, r0

00003994 <LCD_layerStackExact_capability>:
typedef struct LCD_layerStackExact_args {
	uint8_t numArgs;
	uint16_t layers[4];
} LCD_layerStackExact_args;
void LCD_layerStackExact_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    3994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3998:	2aff      	cmp	r2, #255	; 0xff
typedef struct LCD_layerStackExact_args {
	uint8_t numArgs;
	uint16_t layers[4];
} LCD_layerStackExact_args;
void LCD_layerStackExact_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    399a:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
    399e:	461d      	mov	r5, r3
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    39a0:	d105      	bne.n	39ae <LCD_layerStackExact_capability+0x1a>
    39a2:	29ff      	cmp	r1, #255	; 0xff
    39a4:	d103      	bne.n	39ae <LCD_layerStackExact_capability+0x1a>
	{
		print("LCD_layerStackExact_capability(num,layer1,layer2,layer3,layer4)");
    39a6:	483d      	ldr	r0, [pc, #244]	; (3a9c <LCD_layerStackExact_capability+0x108>)
    39a8:	f004 fae2 	bl	7f70 <_print>
    39ac:	e072      	b.n	3a94 <LCD_layerStackExact_capability+0x100>

	// Read arguments
	LCD_layerStackExact_args *stack_args = (LCD_layerStackExact_args*)args;

	// Number data for LCD
	const uint8_t numbers[10][128] = {
    39ae:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    39b2:	493b      	ldr	r1, [pc, #236]	; (3aa0 <LCD_layerStackExact_capability+0x10c>)
    39b4:	a810      	add	r0, sp, #64	; 0x40
    39b6:	f7fe fde1 	bl	257c <memcpy>
		{ STLcdNumber8_define },
		{ STLcdNumber9_define },
	};

	// Color data for numbers
	const uint16_t colors[10][3] = {
    39ba:	4b3a      	ldr	r3, [pc, #232]	; (3aa4 <LCD_layerStackExact_capability+0x110>)
    39bc:	ae01      	add	r6, sp, #4
    39be:	4632      	mov	r2, r6
    39c0:	f103 0738 	add.w	r7, r3, #56	; 0x38
    39c4:	6818      	ldr	r0, [r3, #0]
    39c6:	6859      	ldr	r1, [r3, #4]
    39c8:	4614      	mov	r4, r2
    39ca:	c403      	stmia	r4!, {r0, r1}
    39cc:	3308      	adds	r3, #8
    39ce:	42bb      	cmp	r3, r7
    39d0:	4622      	mov	r2, r4
    39d2:	d1f7      	bne.n	39c4 <LCD_layerStackExact_capability+0x30>
    39d4:	6818      	ldr	r0, [r3, #0]
    39d6:	6020      	str	r0, [r4, #0]
		{ STLcdNumber8Color_define },
		{ STLcdNumber9Color_define },
	};

	// Only display if there are layers active
	if ( stack_args->numArgs > 0 )
    39d8:	782c      	ldrb	r4, [r5, #0]
    39da:	4833      	ldr	r0, [pc, #204]	; (3aa8 <LCD_layerStackExact_capability+0x114>)
    39dc:	4933      	ldr	r1, [pc, #204]	; (3aac <LCD_layerStackExact_capability+0x118>)
    39de:	4a34      	ldr	r2, [pc, #208]	; (3ab0 <LCD_layerStackExact_capability+0x11c>)
    39e0:	2c00      	cmp	r4, #0
    39e2:	d048      	beq.n	3a76 <LCD_layerStackExact_capability+0xe2>
	{
		// Set the color according to the "top-of-stack" layer
		uint16_t layerIndex = stack_args->layers[0];
		FTM0_C0V = colors[ layerIndex ][0];
    39e4:	886c      	ldrh	r4, [r5, #2]
    39e6:	2306      	movs	r3, #6
    39e8:	4363      	muls	r3, r4
    39ea:	18f4      	adds	r4, r6, r3
    39ec:	5af3      	ldrh	r3, [r6, r3]
    39ee:	6003      	str	r3, [r0, #0]
		FTM0_C1V = colors[ layerIndex ][1];
    39f0:	8863      	ldrh	r3, [r4, #2]
    39f2:	600b      	str	r3, [r1, #0]
		FTM0_C2V = colors[ layerIndex ][2];
    39f4:	88a3      	ldrh	r3, [r4, #4]
    39f6:	6013      	str	r3, [r2, #0]
    39f8:	2400      	movs	r4, #0
			// Set the register page
			LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );

			// Set starting address
			LCD_writeControlReg( 0x10 );
			LCD_writeControlReg( 0x00 );
    39fa:	4627      	mov	r7, r4
		// XXX Many of the values here are hard-coded
		//     Eventually a proper font rendering engine should take care of things like this... -HaaTa
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		{
			// Set the register page
			LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    39fc:	f064 004f 	orn	r0, r4, #79	; 0x4f
    3a00:	b2c0      	uxtb	r0, r0
    3a02:	f7ff fdb3 	bl	356c <LCD_writeControlReg>

			// Set starting address
			LCD_writeControlReg( 0x10 );
    3a06:	2010      	movs	r0, #16
    3a08:	f7ff fdb0 	bl	356c <LCD_writeControlReg>
			LCD_writeControlReg( 0x00 );
    3a0c:	2000      	movs	r0, #0
    3a0e:	f7ff fdad 	bl	356c <LCD_writeControlReg>
    3a12:	ea4f 1844 	mov.w	r8, r4, lsl #5

			// Write data
			for ( uint16_t layer = 0; layer < stack_args->numArgs; layer++ )
    3a16:	2600      	movs	r6, #0
    3a18:	782a      	ldrb	r2, [r5, #0]
    3a1a:	b2b3      	uxth	r3, r6
    3a1c:	429a      	cmp	r2, r3
    3a1e:	d90e      	bls.n	3a3e <LCD_layerStackExact_capability+0xaa>
			{
				layerIndex = stack_args->layers[ layer ];
    3a20:	eb05 0343 	add.w	r3, r5, r3, lsl #1
				{
					layerIndex = 0;
				}

				// Write page of number to display
				SPI_write( (uint8_t*)&numbers[ layerIndex ][ page * 32 ], 32 );
    3a24:	2120      	movs	r1, #32
			LCD_writeControlReg( 0x00 );

			// Write data
			for ( uint16_t layer = 0; layer < stack_args->numArgs; layer++ )
			{
				layerIndex = stack_args->layers[ layer ];
    3a26:	8858      	ldrh	r0, [r3, #2]

				// Default to 0, if over 9
				if ( layerIndex > 9 )
				{
					layerIndex = 0;
    3a28:	280a      	cmp	r0, #10
    3a2a:	bf28      	it	cs
    3a2c:	2000      	movcs	r0, #0
				}

				// Write page of number to display
				SPI_write( (uint8_t*)&numbers[ layerIndex ][ page * 32 ], 32 );
    3a2e:	ab10      	add	r3, sp, #64	; 0x40
    3a30:	eb08 10c0 	add.w	r0, r8, r0, lsl #7
    3a34:	4418      	add	r0, r3
    3a36:	f7ff fd71 	bl	351c <SPI_write>
    3a3a:	3601      	adds	r6, #1
    3a3c:	e7ec      	b.n	3a18 <LCD_layerStackExact_capability+0x84>
			}

			// Blank out rest of display
			uint8_t data = 0;
    3a3e:	f88d 7003 	strb.w	r7, [sp, #3]
			for ( uint8_t c = 0; c < 4 - stack_args->numArgs; c++ )
    3a42:	f04f 0800 	mov.w	r8, #0
    3a46:	782b      	ldrb	r3, [r5, #0]
    3a48:	fa5f f288 	uxtb.w	r2, r8
    3a4c:	f1c3 0304 	rsb	r3, r3, #4
    3a50:	429a      	cmp	r2, r3
    3a52:	da0c      	bge.n	3a6e <LCD_layerStackExact_capability+0xda>
    3a54:	2620      	movs	r6, #32
			{
				for ( uint8_t byte = 0; byte < 32; byte++ )
				{
					SPI_write( &data, 1 );
    3a56:	2101      	movs	r1, #1
    3a58:	f10d 0003 	add.w	r0, sp, #3
    3a5c:	3e01      	subs	r6, #1
    3a5e:	f7ff fd5d 	bl	351c <SPI_write>

			// Blank out rest of display
			uint8_t data = 0;
			for ( uint8_t c = 0; c < 4 - stack_args->numArgs; c++ )
			{
				for ( uint8_t byte = 0; byte < 32; byte++ )
    3a62:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    3a66:	d1f6      	bne.n	3a56 <LCD_layerStackExact_capability+0xc2>
    3a68:	f108 0801 	add.w	r8, r8, #1
    3a6c:	e7eb      	b.n	3a46 <LCD_layerStackExact_capability+0xb2>
    3a6e:	3401      	adds	r4, #1
		FTM0_C2V = colors[ layerIndex ][2];

		// Iterate through each of the pages
		// XXX Many of the values here are hard-coded
		//     Eventually a proper font rendering engine should take care of things like this... -HaaTa
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3a70:	2c04      	cmp	r4, #4
    3a72:	d1c3      	bne.n	39fc <LCD_layerStackExact_capability+0x68>
    3a74:	e00e      	b.n	3a94 <LCD_layerStackExact_capability+0x100>
		}
	}
	else
	{
		// Set default backlight
		FTM0_C0V = STLcdBacklightRed_define;
    3a76:	f640 73ff 	movw	r3, #4095	; 0xfff
		FTM0_C1V = STLcdBacklightGreen_define;
		FTM0_C2V = STLcdBacklightBlue_define;

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3a7a:	4d0e      	ldr	r5, [pc, #56]	; (3ab4 <LCD_layerStackExact_capability+0x120>)
		}
	}
	else
	{
		// Set default backlight
		FTM0_C0V = STLcdBacklightRed_define;
    3a7c:	6003      	str	r3, [r0, #0]
		FTM0_C1V = STLcdBacklightGreen_define;
    3a7e:	600b      	str	r3, [r1, #0]
		FTM0_C2V = STLcdBacklightBlue_define;
    3a80:	6013      	str	r3, [r2, #0]

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3a82:	eb05 11c4 	add.w	r1, r5, r4, lsl #7
    3a86:	b2e0      	uxtb	r0, r4
    3a88:	2280      	movs	r2, #128	; 0x80
    3a8a:	3401      	adds	r4, #1
    3a8c:	f7ff fe36 	bl	36fc <LCD_writeDisplayReg>
		FTM0_C0V = STLcdBacklightRed_define;
		FTM0_C1V = STLcdBacklightGreen_define;
		FTM0_C2V = STLcdBacklightBlue_define;

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3a90:	2c04      	cmp	r4, #4
    3a92:	d1f6      	bne.n	3a82 <LCD_layerStackExact_capability+0xee>
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
	}
}
    3a94:	f50d 6da8 	add.w	sp, sp, #1344	; 0x540
    3a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a9c:	0000913f 	.word	0x0000913f
    3aa0:	00008aea 	.word	0x00008aea
    3aa4:	00008fea 	.word	0x00008fea
    3aa8:	40038010 	.word	0x40038010
    3aac:	40038018 	.word	0x40038018
    3ab0:	40038020 	.word	0x40038020
    3ab4:	00009207 	.word	0x00009207

00003ab8 <LCD_layerStack_capability>:
// Determines the current layer stack, and sets the LCD output accordingly
// Will only work on a master node when using the interconnect (use LCD_layerStackExact_capability instead)
uint16_t LCD_layerStack_prevSize = 0;
uint16_t LCD_layerStack_prevTop  = 0;
void LCD_layerStack_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    3ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3abc:	2aff      	cmp	r2, #255	; 0xff
// Determines the current layer stack, and sets the LCD output accordingly
// Will only work on a master node when using the interconnect (use LCD_layerStackExact_capability instead)
uint16_t LCD_layerStack_prevSize = 0;
uint16_t LCD_layerStack_prevTop  = 0;
void LCD_layerStack_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    3abe:	b086      	sub	sp, #24
    3ac0:	4607      	mov	r7, r0
    3ac2:	460d      	mov	r5, r1
    3ac4:	4616      	mov	r6, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3ac6:	d105      	bne.n	3ad4 <LCD_layerStack_capability+0x1c>
    3ac8:	29ff      	cmp	r1, #255	; 0xff
    3aca:	d103      	bne.n	3ad4 <LCD_layerStack_capability+0x1c>
	{
		print("LCD_layerStack_capability()");
    3acc:	4823      	ldr	r0, [pc, #140]	; (3b5c <LCD_layerStack_capability+0xa4>)
    3ace:	f004 fa4f 	bl	7f70 <_print>
		return;
    3ad2:	e03f      	b.n	3b54 <LCD_layerStack_capability+0x9c>
	// Parse the layer stack, top to bottom
	extern uint16_t macroLayerIndexStack[];
	extern uint16_t macroLayerIndexStackSize;

	// Ignore if the stack size hasn't changed and the top of the stack is the same
	if ( macroLayerIndexStackSize == LCD_layerStack_prevSize
    3ad4:	4c22      	ldr	r4, [pc, #136]	; (3b60 <LCD_layerStack_capability+0xa8>)
    3ad6:	4b23      	ldr	r3, [pc, #140]	; (3b64 <LCD_layerStack_capability+0xac>)
    3ad8:	8822      	ldrh	r2, [r4, #0]
    3ada:	8819      	ldrh	r1, [r3, #0]
    3adc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3b74 <LCD_layerStack_capability+0xbc>
    3ae0:	4291      	cmp	r1, r2
    3ae2:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
    3ae6:	4920      	ldr	r1, [pc, #128]	; (3b68 <LCD_layerStack_capability+0xb0>)
    3ae8:	d105      	bne.n	3af6 <LCD_layerStack_capability+0x3e>
		&& macroLayerIndexStack[macroLayerIndexStackSize - 1] == LCD_layerStack_prevTop )
    3aea:	f838 c010 	ldrh.w	ip, [r8, r0, lsl #1]
    3aee:	f8b1 e000 	ldrh.w	lr, [r1]
    3af2:	45f4      	cmp	ip, lr
    3af4:	d02e      	beq.n	3b54 <LCD_layerStack_capability+0x9c>
	{
		return;
	}
	LCD_layerStack_prevSize = macroLayerIndexStackSize;
    3af6:	801a      	strh	r2, [r3, #0]
	LCD_layerStack_prevTop  = macroLayerIndexStack[macroLayerIndexStackSize - 1];
    3af8:	f838 3010 	ldrh.w	r3, [r8, r0, lsl #1]
    3afc:	800b      	strh	r3, [r1, #0]

	LCD_layerStackExact_args stack_args;
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );
    3afe:	2208      	movs	r2, #8
    3b00:	2100      	movs	r1, #0
    3b02:	f10d 000e 	add.w	r0, sp, #14
    3b06:	f7fe fd31 	bl	256c <memset>

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
    3b0a:	8822      	ldrh	r2, [r4, #0]
    3b0c:	f88d 200c 	strb.w	r2, [sp, #12]
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    3b10:	2301      	movs	r3, #1
    3b12:	4293      	cmp	r3, r2
    3b14:	d80a      	bhi.n	3b2c <LCD_layerStack_capability+0x74>
	{
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
    3b16:	1ad0      	subs	r0, r2, r3
    3b18:	a906      	add	r1, sp, #24
    3b1a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    3b1e:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
    3b22:	f821 0c0c 	strh.w	r0, [r1, #-12]
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    3b26:	3301      	adds	r3, #1
    3b28:	b29b      	uxth	r3, r3
    3b2a:	e7f2      	b.n	3b12 <LCD_layerStack_capability+0x5a>
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
	}

	// Only deal with the interconnect if it has been compiled in
#if defined(ConnectEnabled_define)
	if ( Connect_master )
    3b2c:	4b0f      	ldr	r3, [pc, #60]	; (3b6c <LCD_layerStack_capability+0xb4>)
    3b2e:	781b      	ldrb	r3, [r3, #0]
    3b30:	ac03      	add	r4, sp, #12
    3b32:	b14b      	cbz	r3, 3b48 <LCD_layerStack_capability+0x90>
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    3b34:	4b0e      	ldr	r3, [pc, #56]	; (3b70 <LCD_layerStack_capability+0xb8>)
    3b36:	9401      	str	r4, [sp, #4]
    3b38:	791b      	ldrb	r3, [r3, #4]
    3b3a:	9300      	str	r3, [sp, #0]
    3b3c:	462a      	mov	r2, r5
    3b3e:	4633      	mov	r3, r6
    3b40:	2100      	movs	r1, #0
    3b42:	20ff      	movs	r0, #255	; 0xff
    3b44:	f000 fd0c 	bl	4560 <Connect_send_RemoteCapability>
			(uint8_t*)&stack_args
		);
	}
#endif
	// Call LCD_layerStackExact directly
	LCD_layerStackExact_capability( trigger, state, stateType, (uint8_t*)&stack_args );
    3b48:	4623      	mov	r3, r4
    3b4a:	4632      	mov	r2, r6
    3b4c:	4629      	mov	r1, r5
    3b4e:	4638      	mov	r0, r7
    3b50:	f7ff ff20 	bl	3994 <LCD_layerStackExact_capability>
}
    3b54:	b006      	add	sp, #24
    3b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b5a:	bf00      	nop
    3b5c:	0000917f 	.word	0x0000917f
    3b60:	1fff910a 	.word	0x1fff910a
    3b64:	1fff90d8 	.word	0x1fff90d8
    3b68:	1fff90dc 	.word	0x1fff90dc
    3b6c:	1fff9101 	.word	0x1fff9101
    3b70:	0000a2a8 	.word	0x0000a2a8
    3b74:	1fff910c 	.word	0x1fff910c

00003b78 <Connect_receive_Animation>:
	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_Animation( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3b78:	b508      	push	{r3, lr}
	dbug_print("Animation");
    3b7a:	4802      	ldr	r0, [pc, #8]	; (3b84 <Connect_receive_Animation+0xc>)
    3b7c:	f004 f9f8 	bl	7f70 <_print>
	return 1;
}
    3b80:	2001      	movs	r0, #1
    3b82:	bd08      	pop	{r3, pc}
    3b84:	00009537 	.word	0x00009537

00003b88 <cliFunc_connectDbg>:
		break;
	}
}

void cliFunc_connectDbg( char* args )
{
    3b88:	b508      	push	{r3, lr}
	print( NL );
    3b8a:	4806      	ldr	r0, [pc, #24]	; (3ba4 <cliFunc_connectDbg+0x1c>)
    3b8c:	f004 f9f0 	bl	7f70 <_print>
	info_msg("Connect Debug Mode Toggle");
    3b90:	4805      	ldr	r0, [pc, #20]	; (3ba8 <cliFunc_connectDbg+0x20>)
    3b92:	f004 f9ed 	bl	7f70 <_print>
	Connect_debug = !Connect_debug;
    3b96:	4a05      	ldr	r2, [pc, #20]	; (3bac <cliFunc_connectDbg+0x24>)
    3b98:	7813      	ldrb	r3, [r2, #0]
    3b9a:	fab3 f383 	clz	r3, r3
    3b9e:	095b      	lsrs	r3, r3, #5
    3ba0:	7013      	strb	r3, [r2, #0]
    3ba2:	bd08      	pop	{r3, pc}
    3ba4:	0000c0ef 	.word	0x0000c0ef
    3ba8:	00009556 	.word	0x00009556
    3bac:	1fff90fa 	.word	0x1fff90fa

00003bb0 <Connect_receive_CableCheck>:
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3bb2:	880b      	ldrh	r3, [r1, #0]
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3bb4:	4616      	mov	r6, r2
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3bba:	4293      	cmp	r3, r2
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3bbc:	4605      	mov	r5, r0
    3bbe:	460c      	mov	r4, r1
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3bc0:	d117      	bne.n	3bf2 <Connect_receive_CableCheck+0x42>
	{
		*pending_bytes = byte;
    3bc2:	b287      	uxth	r7, r0

		if ( Connect_debug )
    3bc4:	4b38      	ldr	r3, [pc, #224]	; (3ca8 <Connect_receive_CableCheck+0xf8>)
uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
	{
		*pending_bytes = byte;
    3bc6:	800f      	strh	r7, [r1, #0]

		if ( Connect_debug )
    3bc8:	781b      	ldrb	r3, [r3, #0]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d04b      	beq.n	3c66 <Connect_receive_CableCheck+0xb6>
		{
			dbug_msg("PENDING SET -> ");
    3bce:	4837      	ldr	r0, [pc, #220]	; (3cac <Connect_receive_CableCheck+0xfc>)
    3bd0:	f004 f9ce 	bl	7f70 <_print>
			printHex( byte );
    3bd4:	2101      	movs	r1, #1
    3bd6:	4638      	mov	r0, r7
    3bd8:	f004 fa6d 	bl	80b6 <printHex_op>
			print(" ");
    3bdc:	4834      	ldr	r0, [pc, #208]	; (3cb0 <Connect_receive_CableCheck+0x100>)
    3bde:	f004 f9c7 	bl	7f70 <_print>
			printHex( *pending_bytes );
    3be2:	8820      	ldrh	r0, [r4, #0]
    3be4:	2101      	movs	r1, #1
    3be6:	f004 fa66 	bl	80b6 <printHex_op>
			print( NL );
    3bea:	4832      	ldr	r0, [pc, #200]	; (3cb4 <Connect_receive_CableCheck+0x104>)
    3bec:	f004 f9c0 	bl	7f70 <_print>
    3bf0:	e039      	b.n	3c66 <Connect_receive_CableCheck+0xb6>
		}
	}
	// Verify byte
	else
	{
		(*pending_bytes)--;
    3bf2:	3b01      	subs	r3, #1

		// The argument bytes are always 0xD2 (11010010)
		if ( byte != 0xD2 )
    3bf4:	28d2      	cmp	r0, #210	; 0xd2
		}
	}
	// Verify byte
	else
	{
		(*pending_bytes)--;
    3bf6:	800b      	strh	r3, [r1, #0]

		// The argument bytes are always 0xD2 (11010010)
		if ( byte != 0xD2 )
    3bf8:	d024      	beq.n	3c44 <Connect_receive_CableCheck+0x94>
		{
			warn_print("Cable Fault!");
    3bfa:	482f      	ldr	r0, [pc, #188]	; (3cb8 <Connect_receive_CableCheck+0x108>)
    3bfc:	f004 f9b8 	bl	7f70 <_print>

			// Check which side of the chain
			if ( uart_num == UART_Slave )
    3c00:	b93e      	cbnz	r6, 3c12 <Connect_receive_CableCheck+0x62>
			{
				Connect_cableFaultsSlave++;
    3c02:	4a2e      	ldr	r2, [pc, #184]	; (3cbc <Connect_receive_CableCheck+0x10c>)
				Connect_cableOkSlave = 0;
				print(" Slave ");
    3c04:	482e      	ldr	r0, [pc, #184]	; (3cc0 <Connect_receive_CableCheck+0x110>)
			warn_print("Cable Fault!");

			// Check which side of the chain
			if ( uart_num == UART_Slave )
			{
				Connect_cableFaultsSlave++;
    3c06:	6813      	ldr	r3, [r2, #0]
    3c08:	3301      	adds	r3, #1
    3c0a:	6013      	str	r3, [r2, #0]
				Connect_cableOkSlave = 0;
    3c0c:	4b2d      	ldr	r3, [pc, #180]	; (3cc4 <Connect_receive_CableCheck+0x114>)
    3c0e:	701e      	strb	r6, [r3, #0]
    3c10:	e00d      	b.n	3c2e <Connect_receive_CableCheck+0x7e>
			else
			{
				// Lower current requirement during errors
				// USB minimum
				// Only if this is not the master node
				if ( Connect_id != 0 )
    3c12:	4b2d      	ldr	r3, [pc, #180]	; (3cc8 <Connect_receive_CableCheck+0x118>)
    3c14:	781b      	ldrb	r3, [r3, #0]
    3c16:	b113      	cbz	r3, 3c1e <Connect_receive_CableCheck+0x6e>
				{
					Output_update_external_current( 100 );
    3c18:	2064      	movs	r0, #100	; 0x64
    3c1a:	f002 fcf9 	bl	6610 <Output_update_external_current>
				}

				Connect_cableFaultsMaster++;
    3c1e:	4a2b      	ldr	r2, [pc, #172]	; (3ccc <Connect_receive_CableCheck+0x11c>)
				Connect_cableOkMaster = 0;
				print(" Master ");
    3c20:	482b      	ldr	r0, [pc, #172]	; (3cd0 <Connect_receive_CableCheck+0x120>)
				if ( Connect_id != 0 )
				{
					Output_update_external_current( 100 );
				}

				Connect_cableFaultsMaster++;
    3c22:	6813      	ldr	r3, [r2, #0]
    3c24:	3301      	adds	r3, #1
    3c26:	6013      	str	r3, [r2, #0]
				Connect_cableOkMaster = 0;
    3c28:	4b2a      	ldr	r3, [pc, #168]	; (3cd4 <Connect_receive_CableCheck+0x124>)
    3c2a:	2200      	movs	r2, #0
    3c2c:	701a      	strb	r2, [r3, #0]
				print(" Master ");
    3c2e:	f004 f99f 	bl	7f70 <_print>
			}
			printHex( byte );
    3c32:	2101      	movs	r1, #1
    3c34:	4628      	mov	r0, r5
    3c36:	f004 fa3e 	bl	80b6 <printHex_op>
			print( NL );
    3c3a:	481e      	ldr	r0, [pc, #120]	; (3cb4 <Connect_receive_CableCheck+0x104>)
    3c3c:	f004 f998 	bl	7f70 <_print>

			// Signal that the command should wait for a SYN again
			return 1;
    3c40:	2001      	movs	r0, #1
    3c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else
		{
			// Check which side of the chain
			if ( uart_num == UART_Slave )
    3c44:	b90e      	cbnz	r6, 3c4a <Connect_receive_CableCheck+0x9a>
			{
				Connect_cableChecksSlave++;
    3c46:	4a24      	ldr	r2, [pc, #144]	; (3cd8 <Connect_receive_CableCheck+0x128>)
    3c48:	e00a      	b.n	3c60 <Connect_receive_CableCheck+0xb0>
			}
			else
			{
				// If we already have an Id, then set max current again
				if ( Connect_id != 255 && Connect_id != 0 )
    3c4a:	4b1f      	ldr	r3, [pc, #124]	; (3cc8 <Connect_receive_CableCheck+0x118>)
    3c4c:	781b      	ldrb	r3, [r3, #0]
    3c4e:	3b01      	subs	r3, #1
    3c50:	b2db      	uxtb	r3, r3
    3c52:	2bfd      	cmp	r3, #253	; 0xfd
    3c54:	d803      	bhi.n	3c5e <Connect_receive_CableCheck+0xae>
				{
					// TODO reset to original negotiated current
					Output_update_external_current( 500 );
    3c56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    3c5a:	f002 fcd9 	bl	6610 <Output_update_external_current>
				}
				Connect_cableChecksMaster++;
    3c5e:	4a1f      	ldr	r2, [pc, #124]	; (3cdc <Connect_receive_CableCheck+0x12c>)
    3c60:	6813      	ldr	r3, [r2, #0]
    3c62:	3301      	adds	r3, #1
    3c64:	6013      	str	r3, [r2, #0]
			}
		}
	}

	// If cable check was successful, set cable ok
	if ( *pending_bytes == 0 )
    3c66:	8823      	ldrh	r3, [r4, #0]
    3c68:	b92b      	cbnz	r3, 3c76 <Connect_receive_CableCheck+0xc6>
    3c6a:	2301      	movs	r3, #1
	{
		if ( uart_num == UART_Slave )
    3c6c:	b90e      	cbnz	r6, 3c72 <Connect_receive_CableCheck+0xc2>
		{
			Connect_cableOkSlave = 1;
    3c6e:	4a15      	ldr	r2, [pc, #84]	; (3cc4 <Connect_receive_CableCheck+0x114>)
    3c70:	e000      	b.n	3c74 <Connect_receive_CableCheck+0xc4>
		}
		else
		{
			Connect_cableOkMaster = 1;
    3c72:	4a18      	ldr	r2, [pc, #96]	; (3cd4 <Connect_receive_CableCheck+0x124>)
    3c74:	7013      	strb	r3, [r2, #0]
		}
	}

	if ( Connect_debug )
    3c76:	4b0c      	ldr	r3, [pc, #48]	; (3ca8 <Connect_receive_CableCheck+0xf8>)
    3c78:	781b      	ldrb	r3, [r3, #0]
    3c7a:	b183      	cbz	r3, 3c9e <Connect_receive_CableCheck+0xee>
	{
		dbug_msg("CABLECHECK RECEIVE - ");
    3c7c:	4818      	ldr	r0, [pc, #96]	; (3ce0 <Connect_receive_CableCheck+0x130>)
    3c7e:	f004 f977 	bl	7f70 <_print>
		printHex( byte );
    3c82:	2101      	movs	r1, #1
    3c84:	4628      	mov	r0, r5
    3c86:	f004 fa16 	bl	80b6 <printHex_op>
		print(" ");
    3c8a:	4809      	ldr	r0, [pc, #36]	; (3cb0 <Connect_receive_CableCheck+0x100>)
    3c8c:	f004 f970 	bl	7f70 <_print>
		printHex( *pending_bytes );
    3c90:	8820      	ldrh	r0, [r4, #0]
    3c92:	2101      	movs	r1, #1
    3c94:	f004 fa0f 	bl	80b6 <printHex_op>
		print( NL );
    3c98:	4806      	ldr	r0, [pc, #24]	; (3cb4 <Connect_receive_CableCheck+0x104>)
    3c9a:	f004 f969 	bl	7f70 <_print>
	}

	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
    3c9e:	8820      	ldrh	r0, [r4, #0]
    3ca0:	fab0 f080 	clz	r0, r0
    3ca4:	0940      	lsrs	r0, r0, #5
}
    3ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ca8:	1fff90fa 	.word	0x1fff90fa
    3cac:	00009582 	.word	0x00009582
    3cb0:	00008952 	.word	0x00008952
    3cb4:	0000c0ef 	.word	0x0000c0ef
    3cb8:	000095a5 	.word	0x000095a5
    3cbc:	1fff90ec 	.word	0x1fff90ec
    3cc0:	000095c9 	.word	0x000095c9
    3cc4:	1fff90f8 	.word	0x1fff90f8
    3cc8:	1fff8a05 	.word	0x1fff8a05
    3ccc:	1fff90f4 	.word	0x1fff90f4
    3cd0:	000095d1 	.word	0x000095d1
    3cd4:	1fff90e8 	.word	0x1fff90e8
    3cd8:	1fff90fc 	.word	0x1fff90fc
    3cdc:	1fff90f0 	.word	0x1fff90f0
    3ce0:	000095da 	.word	0x000095da

00003ce4 <cliFunc_connectLst>:

	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
    3ce4:	b530      	push	{r4, r5, lr}
	const char *Command_strs[] = {
    3ce6:	4d11      	ldr	r5, [pc, #68]	; (3d2c <cliFunc_connectLst+0x48>)
    3ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
    3cea:	b08b      	sub	sp, #44	; 0x2c
	const char *Command_strs[] = {
    3cec:	ac01      	add	r4, sp, #4
    3cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3cf4:	682b      	ldr	r3, [r5, #0]
		"RemoteCapability",
		"RemoteOutput",
		"RemoteInput",
	};

	print( NL );
    3cf6:	480e      	ldr	r0, [pc, #56]	; (3d30 <cliFunc_connectLst+0x4c>)
	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
	const char *Command_strs[] = {
    3cf8:	6023      	str	r3, [r4, #0]
		"RemoteCapability",
		"RemoteOutput",
		"RemoteInput",
	};

	print( NL );
    3cfa:	f004 f939 	bl	7f70 <_print>
	info_msg("List of UARTConnect commands");
    3cfe:	480d      	ldr	r0, [pc, #52]	; (3d34 <cliFunc_connectLst+0x50>)
    3d00:	f004 f936 	bl	7f70 <_print>
    3d04:	2400      	movs	r4, #0
    3d06:	ad01      	add	r5, sp, #4
	for ( uint8_t cmd = 0; cmd < Command_TOP; cmd++ )
	{
		print( NL );
    3d08:	4809      	ldr	r0, [pc, #36]	; (3d30 <cliFunc_connectLst+0x4c>)
    3d0a:	f004 f931 	bl	7f70 <_print>
		printInt8( cmd );
    3d0e:	b2e0      	uxtb	r0, r4
    3d10:	f004 f95d 	bl	7fce <printInt8>
		print(" - ");
    3d14:	4808      	ldr	r0, [pc, #32]	; (3d38 <cliFunc_connectLst+0x54>)
    3d16:	f004 f92b 	bl	7f70 <_print>
		dPrint( (char*)Command_strs[ cmd ] );
    3d1a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3d1e:	3401      	adds	r4, #1
    3d20:	f002 fc4a 	bl	65b8 <Output_putstr>
		"RemoteInput",
	};

	print( NL );
	info_msg("List of UARTConnect commands");
	for ( uint8_t cmd = 0; cmd < Command_TOP; cmd++ )
    3d24:	2c09      	cmp	r4, #9
    3d26:	d1ef      	bne.n	3d08 <cliFunc_connectLst+0x24>
		print( NL );
		printInt8( cmd );
		print(" - ");
		dPrint( (char*)Command_strs[ cmd ] );
	}
}
    3d28:	b00b      	add	sp, #44	; 0x2c
    3d2a:	bd30      	pop	{r4, r5, pc}
    3d2c:	00009474 	.word	0x00009474
    3d30:	0000c0ef 	.word	0x0000c0ef
    3d34:	00009603 	.word	0x00009603
    3d38:	00009a17 	.word	0x00009a17

00003d3c <cliFunc_connectSts>:
	// Reset node id
	Connect_id = 0xFF;
}

void cliFunc_connectSts( char* args )
{
    3d3c:	b538      	push	{r3, r4, r5, lr}
	print( NL );
    3d3e:	4839      	ldr	r0, [pc, #228]	; (3e24 <cliFunc_connectSts+0xe8>)
	print( NL "\tFaults:\t");
	printHex32( Connect_cableFaultsMaster );
	print("/");
	printHex32( Connect_cableChecksMaster );
	print( NL "\tRx:\t");
	printHex( uart_rx_status[UART_Master].status );
    3d40:	4d39      	ldr	r5, [pc, #228]	; (3e28 <cliFunc_connectSts+0xec>)
	print( NL "\tTx:\t");
	printHex( uart_tx_status[UART_Master].status );
    3d42:	4c3a      	ldr	r4, [pc, #232]	; (3e2c <cliFunc_connectSts+0xf0>)
	Connect_id = 0xFF;
}

void cliFunc_connectSts( char* args )
{
	print( NL );
    3d44:	f004 f914 	bl	7f70 <_print>
	info_msg("UARTConnect Status");
    3d48:	4839      	ldr	r0, [pc, #228]	; (3e30 <cliFunc_connectSts+0xf4>)
    3d4a:	f004 f911 	bl	7f70 <_print>
	print( NL "Device Type:\t" );
    3d4e:	4839      	ldr	r0, [pc, #228]	; (3e34 <cliFunc_connectSts+0xf8>)
    3d50:	f004 f90e 	bl	7f70 <_print>
	print( Connect_master ? "Master" : "Slave" );
    3d54:	4b38      	ldr	r3, [pc, #224]	; (3e38 <cliFunc_connectSts+0xfc>)
    3d56:	4a39      	ldr	r2, [pc, #228]	; (3e3c <cliFunc_connectSts+0x100>)
    3d58:	7818      	ldrb	r0, [r3, #0]
    3d5a:	4b39      	ldr	r3, [pc, #228]	; (3e40 <cliFunc_connectSts+0x104>)
    3d5c:	2800      	cmp	r0, #0
    3d5e:	bf14      	ite	ne
    3d60:	4610      	movne	r0, r2
    3d62:	4618      	moveq	r0, r3
    3d64:	f004 f904 	bl	7f70 <_print>
	print( NL "Device Id:\t" );
    3d68:	4836      	ldr	r0, [pc, #216]	; (3e44 <cliFunc_connectSts+0x108>)
    3d6a:	f004 f901 	bl	7f70 <_print>
	printHex( Connect_id );
    3d6e:	4b36      	ldr	r3, [pc, #216]	; (3e48 <cliFunc_connectSts+0x10c>)
    3d70:	2101      	movs	r1, #1
    3d72:	7818      	ldrb	r0, [r3, #0]
    3d74:	f004 f99f 	bl	80b6 <printHex_op>
	print( NL "Max Id:\t" );
    3d78:	4834      	ldr	r0, [pc, #208]	; (3e4c <cliFunc_connectSts+0x110>)
    3d7a:	f004 f8f9 	bl	7f70 <_print>
	printHex( Connect_maxId );
    3d7e:	4b34      	ldr	r3, [pc, #208]	; (3e50 <cliFunc_connectSts+0x114>)
    3d80:	2101      	movs	r1, #1
    3d82:	7818      	ldrb	r0, [r3, #0]
    3d84:	f004 f997 	bl	80b6 <printHex_op>
	print( NL "Master <=" NL "\tStatus:\t");
    3d88:	4832      	ldr	r0, [pc, #200]	; (3e54 <cliFunc_connectSts+0x118>)
    3d8a:	f004 f8f1 	bl	7f70 <_print>
	printHex( Connect_cableOkMaster );
    3d8e:	4b32      	ldr	r3, [pc, #200]	; (3e58 <cliFunc_connectSts+0x11c>)
    3d90:	2101      	movs	r1, #1
    3d92:	7818      	ldrb	r0, [r3, #0]
    3d94:	f004 f98f 	bl	80b6 <printHex_op>
	print( NL "\tFaults:\t");
    3d98:	4830      	ldr	r0, [pc, #192]	; (3e5c <cliFunc_connectSts+0x120>)
    3d9a:	f004 f8e9 	bl	7f70 <_print>
	printHex32( Connect_cableFaultsMaster );
    3d9e:	4b30      	ldr	r3, [pc, #192]	; (3e60 <cliFunc_connectSts+0x124>)
    3da0:	2101      	movs	r1, #1
    3da2:	6818      	ldr	r0, [r3, #0]
    3da4:	f004 f9c3 	bl	812e <printHex32_op>
	print("/");
    3da8:	482e      	ldr	r0, [pc, #184]	; (3e64 <cliFunc_connectSts+0x128>)
    3daa:	f004 f8e1 	bl	7f70 <_print>
	printHex32( Connect_cableChecksMaster );
    3dae:	4b2e      	ldr	r3, [pc, #184]	; (3e68 <cliFunc_connectSts+0x12c>)
    3db0:	2101      	movs	r1, #1
    3db2:	6818      	ldr	r0, [r3, #0]
    3db4:	f004 f9bb 	bl	812e <printHex32_op>
	print( NL "\tRx:\t");
    3db8:	482c      	ldr	r0, [pc, #176]	; (3e6c <cliFunc_connectSts+0x130>)
    3dba:	f004 f8d9 	bl	7f70 <_print>
	printHex( uart_rx_status[UART_Master].status );
    3dbe:	7928      	ldrb	r0, [r5, #4]
    3dc0:	2101      	movs	r1, #1
    3dc2:	f004 f978 	bl	80b6 <printHex_op>
	print( NL "\tTx:\t");
    3dc6:	482a      	ldr	r0, [pc, #168]	; (3e70 <cliFunc_connectSts+0x134>)
    3dc8:	f004 f8d2 	bl	7f70 <_print>
	printHex( uart_tx_status[UART_Master].status );
    3dcc:	2101      	movs	r1, #1
    3dce:	78a0      	ldrb	r0, [r4, #2]
    3dd0:	f004 f971 	bl	80b6 <printHex_op>
	print( NL "Slave <=" NL "\tStatus:\t");
    3dd4:	4827      	ldr	r0, [pc, #156]	; (3e74 <cliFunc_connectSts+0x138>)
    3dd6:	f004 f8cb 	bl	7f70 <_print>
	printHex( Connect_cableOkSlave );
    3dda:	4b27      	ldr	r3, [pc, #156]	; (3e78 <cliFunc_connectSts+0x13c>)
    3ddc:	2101      	movs	r1, #1
    3dde:	7818      	ldrb	r0, [r3, #0]
    3de0:	f004 f969 	bl	80b6 <printHex_op>
	print( NL "\tFaults:\t");
    3de4:	481d      	ldr	r0, [pc, #116]	; (3e5c <cliFunc_connectSts+0x120>)
    3de6:	f004 f8c3 	bl	7f70 <_print>
	printHex32( Connect_cableFaultsSlave );
    3dea:	4b24      	ldr	r3, [pc, #144]	; (3e7c <cliFunc_connectSts+0x140>)
    3dec:	2101      	movs	r1, #1
    3dee:	6818      	ldr	r0, [r3, #0]
    3df0:	f004 f99d 	bl	812e <printHex32_op>
	print("/");
    3df4:	481b      	ldr	r0, [pc, #108]	; (3e64 <cliFunc_connectSts+0x128>)
    3df6:	f004 f8bb 	bl	7f70 <_print>
	printHex32( Connect_cableChecksSlave );
    3dfa:	4b21      	ldr	r3, [pc, #132]	; (3e80 <cliFunc_connectSts+0x144>)
    3dfc:	2101      	movs	r1, #1
    3dfe:	6818      	ldr	r0, [r3, #0]
    3e00:	f004 f995 	bl	812e <printHex32_op>
	print( NL "\tRx:\t");
    3e04:	4819      	ldr	r0, [pc, #100]	; (3e6c <cliFunc_connectSts+0x130>)
    3e06:	f004 f8b3 	bl	7f70 <_print>
	printHex( uart_rx_status[UART_Slave].status );
    3e0a:	7828      	ldrb	r0, [r5, #0]
    3e0c:	2101      	movs	r1, #1
    3e0e:	f004 f952 	bl	80b6 <printHex_op>
	print( NL "\tTx:\t");
    3e12:	4817      	ldr	r0, [pc, #92]	; (3e70 <cliFunc_connectSts+0x134>)
    3e14:	f004 f8ac 	bl	7f70 <_print>
	printHex( uart_tx_status[UART_Slave].status );
    3e18:	7820      	ldrb	r0, [r4, #0]
    3e1a:	2101      	movs	r1, #1
}
    3e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	print("/");
	printHex32( Connect_cableChecksSlave );
	print( NL "\tRx:\t");
	printHex( uart_rx_status[UART_Slave].status );
	print( NL "\tTx:\t");
	printHex( uart_tx_status[UART_Slave].status );
    3e20:	f004 b949 	b.w	80b6 <printHex_op>
    3e24:	0000c0ef 	.word	0x0000c0ef
    3e28:	1fff9d50 	.word	0x1fff9d50
    3e2c:	1fff9d32 	.word	0x1fff9d32
    3e30:	0000963f 	.word	0x0000963f
    3e34:	00009664 	.word	0x00009664
    3e38:	1fff9101 	.word	0x1fff9101
    3e3c:	00009632 	.word	0x00009632
    3e40:	00009639 	.word	0x00009639
    3e44:	00009674 	.word	0x00009674
    3e48:	1fff8a05 	.word	0x1fff8a05
    3e4c:	00009682 	.word	0x00009682
    3e50:	1fff90f9 	.word	0x1fff90f9
    3e54:	0000968d 	.word	0x0000968d
    3e58:	1fff90e8 	.word	0x1fff90e8
    3e5c:	000096a4 	.word	0x000096a4
    3e60:	1fff90f4 	.word	0x1fff90f4
    3e64:	000096b0 	.word	0x000096b0
    3e68:	1fff90f0 	.word	0x1fff90f0
    3e6c:	000096b2 	.word	0x000096b2
    3e70:	000096ba 	.word	0x000096ba
    3e74:	000096c2 	.word	0x000096c2
    3e78:	1fff90f8 	.word	0x1fff90f8
    3e7c:	1fff90ec 	.word	0x1fff90ec
    3e80:	1fff90fc 	.word	0x1fff90fc

00003e84 <cliFunc_connectMst>:
		dPrint( (char*)Command_strs[ cmd ] );
	}
}

void cliFunc_connectMst( char* args )
{
    3e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    3e86:	aa01      	add	r2, sp, #4
    3e88:	4669      	mov	r1, sp
    3e8a:	f003 fd91 	bl	79b0 <CLI_argumentIsolation>

	print( NL );
    3e8e:	4813      	ldr	r0, [pc, #76]	; (3edc <cliFunc_connectMst+0x58>)
    3e90:	4d13      	ldr	r5, [pc, #76]	; (3ee0 <cliFunc_connectMst+0x5c>)
    3e92:	4c14      	ldr	r4, [pc, #80]	; (3ee4 <cliFunc_connectMst+0x60>)
    3e94:	f004 f86c 	bl	7f70 <_print>

	// Set override
	Connect_override = 1;
    3e98:	4b13      	ldr	r3, [pc, #76]	; (3ee8 <cliFunc_connectMst+0x64>)
    3e9a:	2201      	movs	r2, #1
    3e9c:	701a      	strb	r2, [r3, #0]

	switch ( arg1Ptr[0] )
    3e9e:	9a00      	ldr	r2, [sp, #0]
    3ea0:	7812      	ldrb	r2, [r2, #0]
    3ea2:	2a53      	cmp	r2, #83	; 0x53
    3ea4:	d00a      	beq.n	3ebc <cliFunc_connectMst+0x38>
    3ea6:	d802      	bhi.n	3eae <cliFunc_connectMst+0x2a>
    3ea8:	2a44      	cmp	r2, #68	; 0x44
    3eaa:	d005      	beq.n	3eb8 <cliFunc_connectMst+0x34>
    3eac:	e00d      	b.n	3eca <cliFunc_connectMst+0x46>
    3eae:	2a64      	cmp	r2, #100	; 0x64
    3eb0:	d002      	beq.n	3eb8 <cliFunc_connectMst+0x34>
    3eb2:	2a73      	cmp	r2, #115	; 0x73
    3eb4:	d002      	beq.n	3ebc <cliFunc_connectMst+0x38>
    3eb6:	e008      	b.n	3eca <cliFunc_connectMst+0x46>
	{
	// Disable override
	case 'd':
	case 'D':
		Connect_override = 0;
    3eb8:	2200      	movs	r2, #0
    3eba:	701a      	strb	r2, [r3, #0]
	case 's':
	case 'S':
		info_msg("Setting device as slave.");
    3ebc:	480b      	ldr	r0, [pc, #44]	; (3eec <cliFunc_connectMst+0x68>)
    3ebe:	f004 f857 	bl	7f70 <_print>
		Connect_master = 0;
    3ec2:	2300      	movs	r3, #0
    3ec4:	702b      	strb	r3, [r5, #0]
		Connect_id = 0xFF;
    3ec6:	23ff      	movs	r3, #255	; 0xff
    3ec8:	e005      	b.n	3ed6 <cliFunc_connectMst+0x52>
		break;

	case 'm':
	case 'M':
	default:
		info_msg("Setting device as master.");
    3eca:	4809      	ldr	r0, [pc, #36]	; (3ef0 <cliFunc_connectMst+0x6c>)
    3ecc:	f004 f850 	bl	7f70 <_print>
		Connect_master = 1;
    3ed0:	2301      	movs	r3, #1
    3ed2:	702b      	strb	r3, [r5, #0]
		Connect_id = 0;
    3ed4:	2300      	movs	r3, #0
    3ed6:	7023      	strb	r3, [r4, #0]
		break;
	}
}
    3ed8:	b003      	add	sp, #12
    3eda:	bd30      	pop	{r4, r5, pc}
    3edc:	0000c0ef 	.word	0x0000c0ef
    3ee0:	1fff9101 	.word	0x1fff9101
    3ee4:	1fff8a05 	.word	0x1fff8a05
    3ee8:	1fff9100 	.word	0x1fff9100
    3eec:	000096d8 	.word	0x000096d8
    3ef0:	00009703 	.word	0x00009703

00003ef4 <Connect_addBytes.part.1>:
UARTStatusTx uart_tx_status[UART_Num_Interfaces];


// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
    3ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		erro_print("Invalid UART to send from...");
		return;
	}

	// Delay UART copy until there's some space left
	while ( uart_tx_buf[ uart ].items + count > UART_Buffer_Size )
    3ef8:	4c2a      	ldr	r4, [pc, #168]	; (3fa4 <Connect_addBytes.part.1+0xb0>)
    3efa:	2383      	movs	r3, #131	; 0x83
UARTStatusTx uart_tx_status[UART_Num_Interfaces];


// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
    3efc:	4605      	mov	r5, r0
    3efe:	460f      	mov	r7, r1
    3f00:	4616      	mov	r6, r2
		erro_print("Invalid UART to send from...");
		return;
	}

	// Delay UART copy until there's some space left
	while ( uart_tx_buf[ uart ].items + count > UART_Buffer_Size )
    3f02:	fb03 4402 	mla	r4, r3, r2, r4
    3f06:	78a3      	ldrb	r3, [r4, #2]
    3f08:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3fa4 <Connect_addBytes.part.1+0xb0>
    3f0c:	443b      	add	r3, r7
    3f0e:	2b80      	cmp	r3, #128	; 0x80
    3f10:	dd0c      	ble.n	3f2c <Connect_addBytes.part.1+0x38>
	{
		warn_msg("Too much data to send on UART");
    3f12:	4825      	ldr	r0, [pc, #148]	; (3fa8 <Connect_addBytes.part.1+0xb4>)
    3f14:	f004 f82c 	bl	7f70 <_print>
		printInt8( uart );
    3f18:	4630      	mov	r0, r6
    3f1a:	f004 f858 	bl	7fce <printInt8>
		print( ", waiting..." NL );
    3f1e:	4823      	ldr	r0, [pc, #140]	; (3fac <Connect_addBytes.part.1+0xb8>)
    3f20:	f004 f826 	bl	7f70 <_print>
		delay( 1 );
    3f24:	2001      	movs	r0, #1
    3f26:	f7fe fb59 	bl	25dc <delay>
    3f2a:	e7ec      	b.n	3f06 <Connect_addBytes.part.1+0x12>
			print(" +");
			printInt8( uart );
			print( NL );
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
    3f2c:	2483      	movs	r4, #131	; 0x83
    3f2e:	442f      	add	r7, r5
    3f30:	fb04 8406 	mla	r4, r4, r6, r8
		delay( 1 );
		// FIXME Buffer will not drain here....
	}

	// Append data to ring buffer
	for ( uint8_t c = 0; c < count; c++ )
    3f34:	42af      	cmp	r7, r5
    3f36:	d032      	beq.n	3f9e <Connect_addBytes.part.1+0xaa>
	{
		if ( Connect_debug )
    3f38:	4b1d      	ldr	r3, [pc, #116]	; (3fb0 <Connect_addBytes.part.1+0xbc>)
    3f3a:	781b      	ldrb	r3, [r3, #0]
    3f3c:	b163      	cbz	r3, 3f58 <Connect_addBytes.part.1+0x64>
		{
			printHex( buffer[ c ] );
    3f3e:	2101      	movs	r1, #1
    3f40:	7828      	ldrb	r0, [r5, #0]
    3f42:	f004 f8b8 	bl	80b6 <printHex_op>
			print(" +");
    3f46:	481b      	ldr	r0, [pc, #108]	; (3fb4 <Connect_addBytes.part.1+0xc0>)
    3f48:	f004 f812 	bl	7f70 <_print>
			printInt8( uart );
    3f4c:	4630      	mov	r0, r6
    3f4e:	f004 f83e 	bl	7fce <printInt8>
			print( NL );
    3f52:	4819      	ldr	r0, [pc, #100]	; (3fb8 <Connect_addBytes.part.1+0xc4>)
    3f54:	f004 f80c 	bl	7f70 <_print>
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
    3f58:	7862      	ldrb	r2, [r4, #1]
    3f5a:	1c53      	adds	r3, r2, #1
    3f5c:	b2db      	uxtb	r3, r3
    3f5e:	7063      	strb	r3, [r4, #1]
    3f60:	4422      	add	r2, r4
    3f62:	f815 1b01 	ldrb.w	r1, [r5], #1
    3f66:	70d1      	strb	r1, [r2, #3]
		uart_tx_buf[ uart ].items++;
		if ( uart_tx_buf[ uart ].tail >= UART_Buffer_Size )
    3f68:	061b      	lsls	r3, r3, #24
			uart_tx_buf[ uart ].tail = 0;
    3f6a:	bf48      	it	mi
    3f6c:	2300      	movmi	r3, #0
			printInt8( uart );
			print( NL );
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
		uart_tx_buf[ uart ].items++;
    3f6e:	78a2      	ldrb	r2, [r4, #2]
		if ( uart_tx_buf[ uart ].tail >= UART_Buffer_Size )
			uart_tx_buf[ uart ].tail = 0;
    3f70:	bf48      	it	mi
    3f72:	7063      	strbmi	r3, [r4, #1]
		if ( uart_tx_buf[ uart ].head == uart_tx_buf[ uart ].tail )
    3f74:	2383      	movs	r3, #131	; 0x83
    3f76:	4373      	muls	r3, r6
			printInt8( uart );
			print( NL );
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
		uart_tx_buf[ uart ].items++;
    3f78:	3201      	adds	r2, #1
    3f7a:	70a2      	strb	r2, [r4, #2]
		if ( uart_tx_buf[ uart ].tail >= UART_Buffer_Size )
			uart_tx_buf[ uart ].tail = 0;
		if ( uart_tx_buf[ uart ].head == uart_tx_buf[ uart ].tail )
    3f7c:	eb08 0203 	add.w	r2, r8, r3
    3f80:	f818 1003 	ldrb.w	r1, [r8, r3]
    3f84:	7852      	ldrb	r2, [r2, #1]
    3f86:	428a      	cmp	r2, r1
			uart_tx_buf[ uart ].head++;
    3f88:	bf04      	itt	eq
    3f8a:	3201      	addeq	r2, #1
    3f8c:	f808 2003 	strbeq.w	r2, [r8, r3]
		if ( uart_tx_buf[ uart ].head >= UART_Buffer_Size )
    3f90:	f994 3000 	ldrsb.w	r3, [r4]
    3f94:	2b00      	cmp	r3, #0
			uart_tx_buf[ uart ].head = 0;
    3f96:	bfbc      	itt	lt
    3f98:	2300      	movlt	r3, #0
    3f9a:	7023      	strblt	r3, [r4, #0]
    3f9c:	e7ca      	b.n	3f34 <Connect_addBytes.part.1+0x40>
	}
}
    3f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fa2:	bf00      	nop
    3fa4:	1fff9c26 	.word	0x1fff9c26
    3fa8:	0000972f 	.word	0x0000972f
    3fac:	00009762 	.word	0x00009762
    3fb0:	1fff90fa 	.word	0x1fff90fa
    3fb4:	00009771 	.word	0x00009771
    3fb8:	0000c0ef 	.word	0x0000c0ef

00003fbc <Connect_receive_ScanCode>:
TriggerGuide Connect_receive_ScanCodeBuffer;
uint8_t Connect_receive_ScanCodeBufferPos;
uint8_t Connect_receive_ScanCodeDeviceId;

uint8_t Connect_receive_ScanCode( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// Check the directionality
	if ( uart_num == UART_Master )
    3fbe:	2a01      	cmp	r2, #1
TriggerGuide Connect_receive_ScanCodeBuffer;
uint8_t Connect_receive_ScanCodeBufferPos;
uint8_t Connect_receive_ScanCodeDeviceId;

uint8_t Connect_receive_ScanCode( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3fc0:	460d      	mov	r5, r1
    3fc2:	f88d 0007 	strb.w	r0, [sp, #7]
	// Check the directionality
	if ( uart_num == UART_Master )
    3fc6:	d102      	bne.n	3fce <Connect_receive_ScanCode+0x12>
	{
		erro_print("Invalid ScanCode direction...");
    3fc8:	484e      	ldr	r0, [pc, #312]	; (4104 <Connect_receive_ScanCode+0x148>)
    3fca:	f003 ffd1 	bl	7f70 <_print>
	}

	// Master node, trigger scan codes
	if ( Connect_master ) switch ( (*pending_bytes)-- )
    3fce:	4b4e      	ldr	r3, [pc, #312]	; (4108 <Connect_receive_ScanCode+0x14c>)
    3fd0:	781a      	ldrb	r2, [r3, #0]
    3fd2:	882b      	ldrh	r3, [r5, #0]
    3fd4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    3fd8:	2a00      	cmp	r2, #0
    3fda:	d051      	beq.n	4080 <Connect_receive_ScanCode+0xc4>
    3fdc:	1e5a      	subs	r2, r3, #1
    3fde:	428b      	cmp	r3, r1
    3fe0:	802a      	strh	r2, [r5, #0]
    3fe2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3fe6:	d005      	beq.n	3ff4 <Connect_receive_ScanCode+0x38>
    3fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3fec:	428b      	cmp	r3, r1
    3fee:	d108      	bne.n	4002 <Connect_receive_ScanCode+0x46>
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
		Connect_receive_ScanCodeDeviceId = byte;
    3ff0:	4b46      	ldr	r3, [pc, #280]	; (410c <Connect_receive_ScanCode+0x150>)
    3ff2:	e004      	b.n	3ffe <Connect_receive_ScanCode+0x42>
		break;

	case 0xFFFE: // Number of TriggerGuides in bytes (byte * 3)
		*pending_bytes = byte * sizeof( TriggerGuide );
    3ff4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		Connect_receive_ScanCodeBufferPos = 0;
    3ff8:	4b45      	ldr	r3, [pc, #276]	; (4110 <Connect_receive_ScanCode+0x154>)
	case 0xFFFF: // Device Id
		Connect_receive_ScanCodeDeviceId = byte;
		break;

	case 0xFFFE: // Number of TriggerGuides in bytes (byte * 3)
		*pending_bytes = byte * sizeof( TriggerGuide );
    3ffa:	802a      	strh	r2, [r5, #0]
		Connect_receive_ScanCodeBufferPos = 0;
    3ffc:	2200      	movs	r2, #0
    3ffe:	701a      	strb	r2, [r3, #0]
		break;
    4000:	e07a      	b.n	40f8 <Connect_receive_ScanCode+0x13c>

	default:
		// Set the specific TriggerGuide entry
		((uint8_t*)&Connect_receive_ScanCodeBuffer)[ Connect_receive_ScanCodeBufferPos++ ] = byte;
    4002:	4943      	ldr	r1, [pc, #268]	; (4110 <Connect_receive_ScanCode+0x154>)
    4004:	4c43      	ldr	r4, [pc, #268]	; (4114 <Connect_receive_ScanCode+0x158>)
    4006:	7808      	ldrb	r0, [r1, #0]
    4008:	1c43      	adds	r3, r0, #1
    400a:	b2db      	uxtb	r3, r3

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
    400c:	2b02      	cmp	r3, #2
		Connect_receive_ScanCodeBufferPos = 0;
		break;

	default:
		// Set the specific TriggerGuide entry
		((uint8_t*)&Connect_receive_ScanCodeBuffer)[ Connect_receive_ScanCodeBufferPos++ ] = byte;
    400e:	700b      	strb	r3, [r1, #0]
    4010:	5502      	strb	r2, [r0, r4]

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
    4012:	d971      	bls.n	40f8 <Connect_receive_ScanCode+0x13c>
		{
			Connect_receive_ScanCodeBufferPos = 0;

			// Adjust ScanCode offset
			if ( Connect_receive_ScanCodeDeviceId > 0 )
    4014:	4e3d      	ldr	r6, [pc, #244]	; (410c <Connect_receive_ScanCode+0x150>)

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
		{
			Connect_receive_ScanCodeBufferPos = 0;
    4016:	2300      	movs	r3, #0
    4018:	700b      	strb	r3, [r1, #0]

			// Adjust ScanCode offset
			if ( Connect_receive_ScanCodeDeviceId > 0 )
    401a:	7833      	ldrb	r3, [r6, #0]
    401c:	b18b      	cbz	r3, 4042 <Connect_receive_ScanCode+0x86>
			{
				// Check if this node is too large
				if ( Connect_receive_ScanCodeDeviceId >= InterconnectNodeMax )
    401e:	2b01      	cmp	r3, #1
    4020:	d90a      	bls.n	4038 <Connect_receive_ScanCode+0x7c>
				{
					warn_msg("Not enough interconnect layout nodes configured: ");
    4022:	483d      	ldr	r0, [pc, #244]	; (4118 <Connect_receive_ScanCode+0x15c>)
    4024:	f003 ffa4 	bl	7f70 <_print>
					printHex( Connect_receive_ScanCodeDeviceId );
    4028:	7830      	ldrb	r0, [r6, #0]
    402a:	2101      	movs	r1, #1
    402c:	f004 f843 	bl	80b6 <printHex_op>
					print( NL );
    4030:	483a      	ldr	r0, [pc, #232]	; (411c <Connect_receive_ScanCode+0x160>)
    4032:	f003 ff9d 	bl	7f70 <_print>
					break;
    4036:	e05f      	b.n	40f8 <Connect_receive_ScanCode+0x13c>
				}

				// This variable is in generatedKeymaps.h
				extern uint8_t InterconnectOffsetList[];
				Connect_receive_ScanCodeBuffer.scanCode = Connect_receive_ScanCodeBuffer.scanCode + InterconnectOffsetList[ Connect_receive_ScanCodeDeviceId - 1 ];
    4038:	4b39      	ldr	r3, [pc, #228]	; (4120 <Connect_receive_ScanCode+0x164>)
    403a:	78a2      	ldrb	r2, [r4, #2]
    403c:	781b      	ldrb	r3, [r3, #0]
    403e:	4413      	add	r3, r2
    4040:	70a3      	strb	r3, [r4, #2]
			}

			// ScanCode receive debug
			if ( Connect_debug )
    4042:	4b38      	ldr	r3, [pc, #224]	; (4124 <Connect_receive_ScanCode+0x168>)
    4044:	781b      	ldrb	r3, [r3, #0]
    4046:	b1bb      	cbz	r3, 4078 <Connect_receive_ScanCode+0xbc>
			{
				dbug_msg("");
    4048:	4837      	ldr	r0, [pc, #220]	; (4128 <Connect_receive_ScanCode+0x16c>)
    404a:	f003 ff91 	bl	7f70 <_print>
				printHex( Connect_receive_ScanCodeBuffer.type );
    404e:	2101      	movs	r1, #1
    4050:	7820      	ldrb	r0, [r4, #0]
    4052:	f004 f830 	bl	80b6 <printHex_op>
				print(" ");
    4056:	4835      	ldr	r0, [pc, #212]	; (412c <Connect_receive_ScanCode+0x170>)
    4058:	f003 ff8a 	bl	7f70 <_print>
				printHex( Connect_receive_ScanCodeBuffer.state );
    405c:	2101      	movs	r1, #1
    405e:	7860      	ldrb	r0, [r4, #1]
    4060:	f004 f829 	bl	80b6 <printHex_op>
				print(" ");
    4064:	4831      	ldr	r0, [pc, #196]	; (412c <Connect_receive_ScanCode+0x170>)
    4066:	f003 ff83 	bl	7f70 <_print>
				printHex( Connect_receive_ScanCodeBuffer.scanCode );
    406a:	78a0      	ldrb	r0, [r4, #2]
    406c:	2101      	movs	r1, #1
    406e:	f004 f822 	bl	80b6 <printHex_op>
				print( NL );
    4072:	482a      	ldr	r0, [pc, #168]	; (411c <Connect_receive_ScanCode+0x160>)
    4074:	f003 ff7c 	bl	7f70 <_print>
			}

			// Send ScanCode to macro module
			Macro_pressReleaseAdd( &Connect_receive_ScanCodeBuffer );
    4078:	4826      	ldr	r0, [pc, #152]	; (4114 <Connect_receive_ScanCode+0x158>)
    407a:	f001 fa1b 	bl	54b4 <Macro_pressReleaseAdd>
    407e:	e03b      	b.n	40f8 <Connect_receive_ScanCode+0x13c>
		break;
	}
	// Propagate ScanCode packet
	// XXX It would be safer to buffer the scancodes first, before transmitting the packet -Jacob
	//     The current method is the more efficient/aggressive, but could cause issues if there were errors during transmission
	else switch ( (*pending_bytes)-- )
    4080:	1e58      	subs	r0, r3, #1
    4082:	428b      	cmp	r3, r1
    4084:	8028      	strh	r0, [r5, #0]
    4086:	d01e      	beq.n	40c6 <Connect_receive_ScanCode+0x10a>
    4088:	f64f 72ff 	movw	r2, #65535	; 0xffff
    408c:	4293      	cmp	r3, r2
    408e:	d127      	bne.n	40e0 <Connect_receive_ScanCode+0x124>
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
	{
		Connect_receive_ScanCodeDeviceId = byte;
    4090:	4b1e      	ldr	r3, [pc, #120]	; (410c <Connect_receive_ScanCode+0x150>)
    4092:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4096:	7018      	strb	r0, [r3, #0]

		// Lock the master Tx buffer
		uart_lockTx( UART_Master );
    4098:	4b25      	ldr	r3, [pc, #148]	; (4130 <Connect_receive_ScanCode+0x174>)
    409a:	78da      	ldrb	r2, [r3, #3]
    409c:	2a00      	cmp	r2, #0
    409e:	d1fd      	bne.n	409c <Connect_receive_ScanCode+0xe0>
    40a0:	2201      	movs	r2, #1
    40a2:	7899      	ldrb	r1, [r3, #2]
    40a4:	70da      	strb	r2, [r3, #3]
    40a6:	2904      	cmp	r1, #4
    40a8:	d1fd      	bne.n	40a6 <Connect_receive_ScanCode+0xea>
    40aa:	2200      	movs	r2, #0
    40ac:	709a      	strb	r2, [r3, #2]

		// Send header + Id byte
		uint8_t header[] = { 0x16, 0x01, ScanCode, byte };
    40ae:	2316      	movs	r3, #22
    40b0:	2201      	movs	r2, #1
    40b2:	f88d 000f 	strb.w	r0, [sp, #15]
    40b6:	f88d 300c 	strb.w	r3, [sp, #12]
    40ba:	f88d 200d 	strb.w	r2, [sp, #13]
    40be:	f88d 100e 	strb.w	r1, [sp, #14]
    40c2:	a803      	add	r0, sp, #12
    40c4:	e009      	b.n	40da <Connect_receive_ScanCode+0x11e>
		Connect_addBytes( header, sizeof( header ), UART_Master );
		break;
	}
	case 0xFFFE: // Number of TriggerGuides in bytes
		*pending_bytes = byte * sizeof( TriggerGuide );
    40c6:	a804      	add	r0, sp, #16
    40c8:	f810 3d09 	ldrb.w	r3, [r0, #-9]!
    40cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    40d0:	802b      	strh	r3, [r5, #0]
		Connect_receive_ScanCodeBufferPos = 0;
    40d2:	4b0f      	ldr	r3, [pc, #60]	; (4110 <Connect_receive_ScanCode+0x154>)
    40d4:	701a      	strb	r2, [r3, #0]
    40d6:	2201      	movs	r2, #1
    40d8:	4611      	mov	r1, r2
    40da:	f7ff ff0b 	bl	3ef4 <Connect_addBytes.part.1>
    40de:	e00b      	b.n	40f8 <Connect_receive_ScanCode+0x13c>
    40e0:	2201      	movs	r2, #1
    40e2:	4611      	mov	r1, r2
    40e4:	f10d 0007 	add.w	r0, sp, #7
    40e8:	f7ff ff04 	bl	3ef4 <Connect_addBytes.part.1>
	default:
		// Pass through byte
		Connect_addBytes( &byte, 1, UART_Master );

		// Unlock Tx Buffer after sending last byte
		if ( *pending_bytes == 0 )
    40ec:	882a      	ldrh	r2, [r5, #0]
    40ee:	b91a      	cbnz	r2, 40f8 <Connect_receive_ScanCode+0x13c>
			uart_unlockTx( UART_Master );
    40f0:	4b0f      	ldr	r3, [pc, #60]	; (4130 <Connect_receive_ScanCode+0x174>)
    40f2:	2104      	movs	r1, #4
    40f4:	7099      	strb	r1, [r3, #2]
    40f6:	70da      	strb	r2, [r3, #3]
		break;
	}

	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
    40f8:	8828      	ldrh	r0, [r5, #0]
}
    40fa:	fab0 f080 	clz	r0, r0
    40fe:	0940      	lsrs	r0, r0, #5
    4100:	b004      	add	sp, #16
    4102:	bd70      	pop	{r4, r5, r6, pc}
    4104:	00009774 	.word	0x00009774
    4108:	1fff9101 	.word	0x1fff9101
    410c:	1fff9d4f 	.word	0x1fff9d4f
    4110:	1fff9e5f 	.word	0x1fff9e5f
    4114:	1fff9e5c 	.word	0x1fff9e5c
    4118:	000097a9 	.word	0x000097a9
    411c:	0000c0ef 	.word	0x0000c0ef
    4120:	00009eab 	.word	0x00009eab
    4124:	1fff90fa 	.word	0x1fff90fa
    4128:	000097f0 	.word	0x000097f0
    412c:	00008952 	.word	0x00008952
    4130:	1fff9d32 	.word	0x1fff9d32

00004134 <Connect_addBytes>:
// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
{
	// Too big to fit into buffer
	if ( count > UART_Buffer_Size )
    4134:	2980      	cmp	r1, #128	; 0x80
    4136:	d901      	bls.n	413c <Connect_addBytes+0x8>
	{
		erro_msg("Too big of a command to fit into the buffer...");
    4138:	4804      	ldr	r0, [pc, #16]	; (414c <Connect_addBytes+0x18>)
    413a:	e004      	b.n	4146 <Connect_addBytes+0x12>
		return;
	}

	// Invalid UART
	if ( uart >= UART_Num_Interfaces )
    413c:	2a01      	cmp	r2, #1
    413e:	d801      	bhi.n	4144 <Connect_addBytes+0x10>
    4140:	f7ff bed8 	b.w	3ef4 <Connect_addBytes.part.1>
	{
		erro_print("Invalid UART to send from...");
    4144:	4802      	ldr	r0, [pc, #8]	; (4150 <Connect_addBytes+0x1c>)
    4146:	f003 bf13 	b.w	7f70 <_print>
    414a:	bf00      	nop
    414c:	00009804 	.word	0x00009804
    4150:	00009848 	.word	0x00009848

00004154 <Connect_receive_RemoteCapability>:
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    4154:	880b      	ldrh	r3, [r1, #0]
#define Connect_receive_RemoteCapabilityMaxArgs 25 // XXX Calculate the max using kll
RemoteCapabilityCommand Connect_receive_RemoteCapabilityBuffer;
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    4156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4158:	460f      	mov	r7, r1
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    415a:	1e59      	subs	r1, r3, #1
    415c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    4160:	b289      	uxth	r1, r1
    4162:	3bfb      	subs	r3, #251	; 0xfb
#define Connect_receive_RemoteCapabilityMaxArgs 25 // XXX Calculate the max using kll
RemoteCapabilityCommand Connect_receive_RemoteCapabilityBuffer;
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    4164:	4616      	mov	r6, r2
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    4166:	8039      	strh	r1, [r7, #0]
    4168:	4d38      	ldr	r5, [pc, #224]	; (424c <Connect_receive_RemoteCapability+0xf8>)
    416a:	2b04      	cmp	r3, #4
    416c:	d80f      	bhi.n	418e <Connect_receive_RemoteCapability+0x3a>
    416e:	e8df f003 	tbb	[pc, r3]
    4172:	090b      	.short	0x090b
    4174:	0507      	.short	0x0507
    4176:	03          	.byte	0x03
    4177:	00          	.byte	0x00
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
		Connect_receive_RemoteCapabilityBuffer.id = byte;
    4178:	7068      	strb	r0, [r5, #1]
		break;
    417a:	e061      	b.n	4240 <Connect_receive_RemoteCapability+0xec>

	case 0xFFFE: // Capability Index
		Connect_receive_RemoteCapabilityBuffer.capabilityIndex = byte;
    417c:	70a8      	strb	r0, [r5, #2]
		break;
    417e:	e05f      	b.n	4240 <Connect_receive_RemoteCapability+0xec>

	case 0xFFFD: // State
		Connect_receive_RemoteCapabilityBuffer.state = byte;
    4180:	70e8      	strb	r0, [r5, #3]
		break;
    4182:	e05d      	b.n	4240 <Connect_receive_RemoteCapability+0xec>

	case 0xFFFC: // StateType
		Connect_receive_RemoteCapabilityBuffer.stateType = byte;
    4184:	7128      	strb	r0, [r5, #4]
		break;
    4186:	e05b      	b.n	4240 <Connect_receive_RemoteCapability+0xec>

	case 0xFFFB: // Number of args
		Connect_receive_RemoteCapabilityBuffer.numArgs = byte;
    4188:	7168      	strb	r0, [r5, #5]
		*pending_bytes = byte;
    418a:	8038      	strh	r0, [r7, #0]
		break;
    418c:	e058      	b.n	4240 <Connect_receive_RemoteCapability+0xec>

	default:     // Args (# defined by previous byte)
		Connect_receive_RemoteCapabilityArgs[
			Connect_receive_RemoteCapabilityBuffer.numArgs - *pending_bytes + 1
		] = byte;
    418e:	796a      	ldrb	r2, [r5, #5]
    4190:	1a53      	subs	r3, r2, r1
    4192:	4a2f      	ldr	r2, [pc, #188]	; (4250 <Connect_receive_RemoteCapability+0xfc>)
    4194:	4413      	add	r3, r2
    4196:	7058      	strb	r0, [r3, #1]

		// If entire packet has been fully received
		if ( *pending_bytes == 0 )
    4198:	883b      	ldrh	r3, [r7, #0]
    419a:	2b00      	cmp	r3, #0
    419c:	d150      	bne.n	4240 <Connect_receive_RemoteCapability+0xec>
		{
			// Determine if this is the node to run the capability on
			// Conditions: Matches or broadcast (0xFF)
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
    419e:	4b2b      	ldr	r3, [pc, #172]	; (424c <Connect_receive_RemoteCapability+0xf8>)
    41a0:	785b      	ldrb	r3, [r3, #1]
    41a2:	2bff      	cmp	r3, #255	; 0xff
    41a4:	d003      	beq.n	41ae <Connect_receive_RemoteCapability+0x5a>
				|| Connect_receive_RemoteCapabilityBuffer.id == Connect_id )
    41a6:	4a2b      	ldr	r2, [pc, #172]	; (4254 <Connect_receive_RemoteCapability+0x100>)
    41a8:	7812      	ldrb	r2, [r2, #0]
    41aa:	429a      	cmp	r2, r3
    41ac:	d108      	bne.n	41c0 <Connect_receive_RemoteCapability+0x6c>
				extern const Capability CapabilitiesList[]; // See generatedKeymap.h
				void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
					(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(
						CapabilitiesList[
							Connect_receive_RemoteCapabilityBuffer.capabilityIndex
						].func
    41ae:	78aa      	ldrb	r2, [r5, #2]
				);
				// TODO (HaaTa) - Send some sort of TriggerMacro information as a hint for the capability
				capability(
    41b0:	4b29      	ldr	r3, [pc, #164]	; (4258 <Connect_receive_RemoteCapability+0x104>)
    41b2:	78e9      	ldrb	r1, [r5, #3]
    41b4:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
    41b8:	4b28      	ldr	r3, [pc, #160]	; (425c <Connect_receive_RemoteCapability+0x108>)
    41ba:	792a      	ldrb	r2, [r5, #4]
    41bc:	2000      	movs	r0, #0
    41be:	47a0      	blx	r4
				);
			}

			// If this is not the correct node, keep sending it in the same direction (doesn't matter if more nodes exist)
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
    41c0:	786b      	ldrb	r3, [r5, #1]
    41c2:	2bff      	cmp	r3, #255	; 0xff
    41c4:	d003      	beq.n	41ce <Connect_receive_RemoteCapability+0x7a>
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
    41c6:	4a23      	ldr	r2, [pc, #140]	; (4254 <Connect_receive_RemoteCapability+0x100>)
    41c8:	7812      	ldrb	r2, [r2, #0]
    41ca:	429a      	cmp	r2, r3
    41cc:	d038      	beq.n	4240 <Connect_receive_RemoteCapability+0xec>
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;
    41ce:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;
    41d2:	f04f 0306 	mov.w	r3, #6

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;
    41d6:	bf18      	it	ne
    41d8:	2601      	movne	r6, #1
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;
    41da:	702b      	strb	r3, [r5, #0]
    41dc:	4c20      	ldr	r4, [pc, #128]	; (4260 <Connect_receive_RemoteCapability+0x10c>)

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;

				// Lock Tx UART
				switch ( uart_direction )
    41de:	b156      	cbz	r6, 41f6 <Connect_receive_RemoteCapability+0xa2>
				{
				case UART_Master: uart_lockTx( UART_Master ); break;
    41e0:	78e3      	ldrb	r3, [r4, #3]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d1fd      	bne.n	41e2 <Connect_receive_RemoteCapability+0x8e>
    41e6:	2301      	movs	r3, #1
    41e8:	70e3      	strb	r3, [r4, #3]
    41ea:	78a3      	ldrb	r3, [r4, #2]
    41ec:	2b04      	cmp	r3, #4
    41ee:	d1fd      	bne.n	41ec <Connect_receive_RemoteCapability+0x98>
    41f0:	2300      	movs	r3, #0
    41f2:	70a3      	strb	r3, [r4, #2]
    41f4:	e009      	b.n	420a <Connect_receive_RemoteCapability+0xb6>
				case UART_Slave:  uart_lockTx( UART_Slave );  break;
    41f6:	7863      	ldrb	r3, [r4, #1]
    41f8:	2b00      	cmp	r3, #0
    41fa:	d1fd      	bne.n	41f8 <Connect_receive_RemoteCapability+0xa4>
    41fc:	2301      	movs	r3, #1
    41fe:	7063      	strb	r3, [r4, #1]
    4200:	7823      	ldrb	r3, [r4, #0]
    4202:	2b04      	cmp	r3, #4
    4204:	d1fd      	bne.n	4202 <Connect_receive_RemoteCapability+0xae>
    4206:	2300      	movs	r3, #0
    4208:	7023      	strb	r3, [r4, #0]
				}

				// Send header
				uint8_t header[] = { 0x16, 0x01 };
    420a:	4b16      	ldr	r3, [pc, #88]	; (4264 <Connect_receive_RemoteCapability+0x110>)
				Connect_addBytes( header, sizeof( header ), uart_direction );
    420c:	4632      	mov	r2, r6
				case UART_Master: uart_lockTx( UART_Master ); break;
				case UART_Slave:  uart_lockTx( UART_Slave );  break;
				}

				// Send header
				uint8_t header[] = { 0x16, 0x01 };
    420e:	881b      	ldrh	r3, [r3, #0]
    4210:	f8ad 3004 	strh.w	r3, [sp, #4]
				Connect_addBytes( header, sizeof( header ), uart_direction );
    4214:	2102      	movs	r1, #2
    4216:	a801      	add	r0, sp, #4
    4218:	f7ff ff8c 	bl	4134 <Connect_addBytes>

				// Send Remote Capability and arguments
				Connect_addBytes( (uint8_t*)&Connect_receive_RemoteCapabilityBuffer, sizeof( RemoteCapabilityCommand ), uart_direction );
    421c:	4632      	mov	r2, r6
    421e:	2106      	movs	r1, #6
    4220:	480a      	ldr	r0, [pc, #40]	; (424c <Connect_receive_RemoteCapability+0xf8>)
    4222:	f7ff ff87 	bl	4134 <Connect_addBytes>
				Connect_addBytes( Connect_receive_RemoteCapabilityArgs, Connect_receive_RemoteCapabilityBuffer.numArgs, uart_direction );
    4226:	4632      	mov	r2, r6
    4228:	7969      	ldrb	r1, [r5, #5]
    422a:	4809      	ldr	r0, [pc, #36]	; (4250 <Connect_receive_RemoteCapability+0xfc>)
    422c:	f7ff ff82 	bl	4134 <Connect_addBytes>
    4230:	2300      	movs	r3, #0
    4232:	2204      	movs	r2, #4

				// Unlock Tx UART
				switch ( uart_direction )
    4234:	b116      	cbz	r6, 423c <Connect_receive_RemoteCapability+0xe8>
				{
				case UART_Master: uart_unlockTx( UART_Master ); break;
    4236:	70a2      	strb	r2, [r4, #2]
    4238:	70e3      	strb	r3, [r4, #3]
    423a:	e001      	b.n	4240 <Connect_receive_RemoteCapability+0xec>
				case UART_Slave:  uart_unlockTx( UART_Slave );  break;
    423c:	7022      	strb	r2, [r4, #0]
    423e:	7063      	strb	r3, [r4, #1]
		}
		break;
	}

	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
    4240:	8838      	ldrh	r0, [r7, #0]
}
    4242:	fab0 f080 	clz	r0, r0
    4246:	0940      	lsrs	r0, r0, #5
    4248:	b003      	add	sp, #12
    424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    424c:	1fff9d2c 	.word	0x1fff9d2c
    4250:	1fff9d36 	.word	0x1fff9d36
    4254:	1fff8a05 	.word	0x1fff8a05
    4258:	0000a2a8 	.word	0x0000a2a8
    425c:	1fff9d38 	.word	0x1fff9d38
    4260:	1fff9d32 	.word	0x1fff9d32
    4264:	00009498 	.word	0x00009498

00004268 <Connect_send_CableCheck>:

// -- Connect send functions --

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
    4268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    426a:	4c20      	ldr	r4, [pc, #128]	; (42ec <Connect_send_CableCheck+0x84>)
    426c:	78e2      	ldrb	r2, [r4, #3]
    426e:	7863      	ldrb	r3, [r4, #1]

// -- Connect send functions --

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
    4270:	4607      	mov	r7, r0
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    4272:	2a00      	cmp	r2, #0
    4274:	d1fd      	bne.n	4272 <Connect_send_CableCheck+0xa>
    4276:	2b00      	cmp	r3, #0
    4278:	d1fd      	bne.n	4276 <Connect_send_CableCheck+0xe>
    427a:	2301      	movs	r3, #1
    427c:	70e3      	strb	r3, [r4, #3]
    427e:	7063      	strb	r3, [r4, #1]
    4280:	7826      	ldrb	r6, [r4, #0]
    4282:	78a3      	ldrb	r3, [r4, #2]
    4284:	2b04      	cmp	r3, #4
    4286:	d1fd      	bne.n	4284 <Connect_send_CableCheck+0x1c>
    4288:	2e04      	cmp	r6, #4
    428a:	d1fd      	bne.n	4288 <Connect_send_CableCheck+0x20>
    428c:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, CableCheck, patternLen };
    428e:	2316      	movs	r3, #22
    4290:	2201      	movs	r2, #1
    4292:	4631      	mov	r1, r6
    4294:	a801      	add	r0, sp, #4
    4296:	f88d 3004 	strb.w	r3, [sp, #4]
    429a:	f88d 2005 	strb.w	r2, [sp, #5]

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    429e:	70a5      	strb	r5, [r4, #2]
    42a0:	7025      	strb	r5, [r4, #0]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, CableCheck, patternLen };
    42a2:	f88d 5006 	strb.w	r5, [sp, #6]
    42a6:	f88d 7007 	strb.w	r7, [sp, #7]
    42aa:	f7ff fe23 	bl	3ef4 <Connect_addBytes.part.1>
    42ae:	4631      	mov	r1, r6
    42b0:	462a      	mov	r2, r5
    42b2:	a801      	add	r0, sp, #4
	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );
	Connect_addBytes( header, sizeof( header ), UART_Slave );

	// Send 0xD2 (11010010) for each argument
	uint8_t value = 0xD2;
    42b4:	ae02      	add	r6, sp, #8
    42b6:	f7ff fe1d 	bl	3ef4 <Connect_addBytes.part.1>
    42ba:	23d2      	movs	r3, #210	; 0xd2
    42bc:	f806 3d05 	strb.w	r3, [r6, #-5]!
	for ( uint8_t c = 0; c < patternLen; c++ )
    42c0:	42bd      	cmp	r5, r7
    42c2:	d00b      	beq.n	42dc <Connect_send_CableCheck+0x74>
    42c4:	2201      	movs	r2, #1
    42c6:	4611      	mov	r1, r2
    42c8:	4630      	mov	r0, r6
    42ca:	f7ff fe13 	bl	3ef4 <Connect_addBytes.part.1>
    42ce:	2200      	movs	r2, #0
    42d0:	2101      	movs	r1, #1
    42d2:	4630      	mov	r0, r6
    42d4:	f7ff fe0e 	bl	3ef4 <Connect_addBytes.part.1>
    42d8:	3501      	adds	r5, #1
    42da:	e7f1      	b.n	42c0 <Connect_send_CableCheck+0x58>
		Connect_addBytes( &value, 1, UART_Master );
		Connect_addBytes( &value, 1, UART_Slave );
	}

	// Release Tx buffers
	uart_unlockTx( UART_Master );
    42dc:	2204      	movs	r2, #4
    42de:	2300      	movs	r3, #0
    42e0:	70a2      	strb	r2, [r4, #2]
    42e2:	70e3      	strb	r3, [r4, #3]
	uart_unlockTx( UART_Slave );
    42e4:	7022      	strb	r2, [r4, #0]
    42e6:	7063      	strb	r3, [r4, #1]
}
    42e8:	b003      	add	sp, #12
    42ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42ec:	1fff9d32 	.word	0x1fff9d32

000042f0 <Connect_send_IdRequest>:

void Connect_send_IdRequest()
{
    42f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    42f2:	4c0d      	ldr	r4, [pc, #52]	; (4328 <Connect_send_IdRequest+0x38>)
    42f4:	78e3      	ldrb	r3, [r4, #3]
    42f6:	2b00      	cmp	r3, #0
    42f8:	d1fd      	bne.n	42f6 <Connect_send_IdRequest+0x6>
    42fa:	2301      	movs	r3, #1
    42fc:	78a6      	ldrb	r6, [r4, #2]
    42fe:	70e3      	strb	r3, [r4, #3]
    4300:	2e04      	cmp	r6, #4
    4302:	d1fd      	bne.n	4300 <Connect_send_IdRequest+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    4304:	4b09      	ldr	r3, [pc, #36]	; (432c <Connect_send_IdRequest+0x3c>)
    4306:	881a      	ldrh	r2, [r3, #0]
    4308:	f8ad 2004 	strh.w	r2, [sp, #4]
}

void Connect_send_IdRequest()
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    430c:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    430e:	789b      	ldrb	r3, [r3, #2]
}

void Connect_send_IdRequest()
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4310:	70a5      	strb	r5, [r4, #2]
    4312:	2201      	movs	r2, #1
    4314:	2103      	movs	r1, #3
    4316:	a801      	add	r0, sp, #4

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    4318:	f88d 3006 	strb.w	r3, [sp, #6]
    431c:	f7ff fdea 	bl	3ef4 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Unlock Tx
	uart_unlockTx( UART_Master );
    4320:	70a6      	strb	r6, [r4, #2]
    4322:	70e5      	strb	r5, [r4, #3]
}
    4324:	b002      	add	sp, #8
    4326:	bd70      	pop	{r4, r5, r6, pc}
    4328:	1fff9d32 	.word	0x1fff9d32
    432c:	0000949a 	.word	0x0000949a

00004330 <Connect_send_IdEnumeration>:

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
    4330:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    4332:	4c0f      	ldr	r4, [pc, #60]	; (4370 <Connect_send_IdEnumeration+0x40>)
    4334:	7863      	ldrb	r3, [r4, #1]
    4336:	2b00      	cmp	r3, #0
    4338:	d1fd      	bne.n	4336 <Connect_send_IdEnumeration+0x6>
    433a:	2301      	movs	r3, #1
    433c:	7826      	ldrb	r6, [r4, #0]
    433e:	7063      	strb	r3, [r4, #1]
    4340:	2e04      	cmp	r6, #4
    4342:	d1fd      	bne.n	4340 <Connect_send_IdEnumeration+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    4344:	2316      	movs	r3, #22

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    4346:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    4348:	f88d 3004 	strb.w	r3, [sp, #4]
    434c:	2301      	movs	r3, #1
    434e:	f88d 3005 	strb.w	r3, [sp, #5]
    4352:	f88d 0007 	strb.w	r0, [sp, #7]
    4356:	2302      	movs	r3, #2
    4358:	462a      	mov	r2, r5
    435a:	4631      	mov	r1, r6
    435c:	a801      	add	r0, sp, #4

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    435e:	7025      	strb	r5, [r4, #0]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    4360:	f88d 3006 	strb.w	r3, [sp, #6]
    4364:	f7ff fdc6 	bl	3ef4 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Slave );

	// Unlock Tx
	uart_unlockTx( UART_Slave );
    4368:	7026      	strb	r6, [r4, #0]
    436a:	7065      	strb	r5, [r4, #1]
}
    436c:	b002      	add	sp, #8
    436e:	bd70      	pop	{r4, r5, r6, pc}
    4370:	1fff9d32 	.word	0x1fff9d32

00004374 <Connect_receive_IdRequest>:
	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_IdRequest( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    4374:	b510      	push	{r4, lr}
	dbug_print("IdRequest");
    4376:	480a      	ldr	r0, [pc, #40]	; (43a0 <Connect_receive_IdRequest+0x2c>)
	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_IdRequest( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    4378:	4614      	mov	r4, r2
	dbug_print("IdRequest");
    437a:	f003 fdf9 	bl	7f70 <_print>
	// Check the directionality
	if ( uart_num == UART_Master )
    437e:	2c01      	cmp	r4, #1
    4380:	d102      	bne.n	4388 <Connect_receive_IdRequest+0x14>
	{
		erro_print("Invalid IdRequest direction...");
    4382:	4808      	ldr	r0, [pc, #32]	; (43a4 <Connect_receive_IdRequest+0x30>)
    4384:	f003 fdf4 	bl	7f70 <_print>
	}

	// Check if master, begin IdEnumeration
	if ( Connect_master )
    4388:	4b07      	ldr	r3, [pc, #28]	; (43a8 <Connect_receive_IdRequest+0x34>)
    438a:	781b      	ldrb	r3, [r3, #0]
    438c:	b11b      	cbz	r3, 4396 <Connect_receive_IdRequest+0x22>
	{
		// The first device is always id 1
		// Id 0 is reserved for the master
		Connect_send_IdEnumeration( 1 );
    438e:	2001      	movs	r0, #1
    4390:	f7ff ffce 	bl	4330 <Connect_send_IdEnumeration>
    4394:	e001      	b.n	439a <Connect_receive_IdRequest+0x26>
	}
	// Propagate IdRequest
	else
	{
		Connect_send_IdRequest();
    4396:	f7ff ffab 	bl	42f0 <Connect_send_IdRequest>
	}

	return 1;
}
    439a:	2001      	movs	r0, #1
    439c:	bd10      	pop	{r4, pc}
    439e:	bf00      	nop
    43a0:	0000987c 	.word	0x0000987c
    43a4:	0000989b 	.word	0x0000989b
    43a8:	1fff9101 	.word	0x1fff9101

000043ac <Connect_send_IdReport>:
	uart_unlockTx( UART_Slave );
}

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
    43ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    43ae:	4c0f      	ldr	r4, [pc, #60]	; (43ec <Connect_send_IdReport+0x40>)
    43b0:	78e3      	ldrb	r3, [r4, #3]
    43b2:	2b00      	cmp	r3, #0
    43b4:	d1fd      	bne.n	43b2 <Connect_send_IdReport+0x6>
    43b6:	2301      	movs	r3, #1
    43b8:	78a5      	ldrb	r5, [r4, #2]
    43ba:	70e3      	strb	r3, [r4, #3]
    43bc:	2d04      	cmp	r5, #4
    43be:	d1fd      	bne.n	43bc <Connect_send_IdReport+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    43c0:	2316      	movs	r3, #22

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    43c2:	2600      	movs	r6, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    43c4:	f88d 3004 	strb.w	r3, [sp, #4]
    43c8:	2201      	movs	r2, #1
    43ca:	2303      	movs	r3, #3
    43cc:	f88d 0007 	strb.w	r0, [sp, #7]
    43d0:	4629      	mov	r1, r5
    43d2:	a801      	add	r0, sp, #4

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    43d4:	70a6      	strb	r6, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    43d6:	f88d 2005 	strb.w	r2, [sp, #5]
    43da:	f88d 3006 	strb.w	r3, [sp, #6]
    43de:	f7ff fd89 	bl	3ef4 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Unlock Tx
	uart_unlockTx( UART_Master );
    43e2:	70a5      	strb	r5, [r4, #2]
    43e4:	70e6      	strb	r6, [r4, #3]
}
    43e6:	b002      	add	sp, #8
    43e8:	bd70      	pop	{r4, r5, r6, pc}
    43ea:	bf00      	nop
    43ec:	1fff9d32 	.word	0x1fff9d32

000043f0 <Connect_receive_IdEnumeration>:

	return 1;
}

uint8_t Connect_receive_IdEnumeration( uint8_t id, uint16_t *pending_bytes, uint8_t uart_num )
{
    43f0:	b538      	push	{r3, r4, r5, lr}
    43f2:	4604      	mov	r4, r0
    43f4:	4615      	mov	r5, r2
	dbug_print("IdEnumeration");
    43f6:	480d      	ldr	r0, [pc, #52]	; (442c <Connect_receive_IdEnumeration+0x3c>)
    43f8:	f003 fdba 	bl	7f70 <_print>
	// Check the directionality
	if ( uart_num == UART_Slave )
    43fc:	b915      	cbnz	r5, 4404 <Connect_receive_IdEnumeration+0x14>
	{
		erro_print("Invalid IdEnumeration direction...");
    43fe:	480c      	ldr	r0, [pc, #48]	; (4430 <Connect_receive_IdEnumeration+0x40>)
    4400:	f003 fdb6 	bl	7f70 <_print>
	}

	// Set the device id
	Connect_id = id;
    4404:	4d0b      	ldr	r5, [pc, #44]	; (4434 <Connect_receive_IdEnumeration+0x44>)

	// Send reponse back to master
	Connect_send_IdReport( id );
    4406:	4620      	mov	r0, r4
	{
		erro_print("Invalid IdEnumeration direction...");
	}

	// Set the device id
	Connect_id = id;
    4408:	702c      	strb	r4, [r5, #0]

	// Send reponse back to master
	Connect_send_IdReport( id );
    440a:	f7ff ffcf 	bl	43ac <Connect_send_IdReport>

	// Node now enumerated, set external power to USB Max
	// Only set if this is not the master node
	// TODO Determine power slice for each node as part of protocol
	if ( Connect_id != 0 )
    440e:	782b      	ldrb	r3, [r5, #0]
    4410:	b11b      	cbz	r3, 441a <Connect_receive_IdEnumeration+0x2a>
	{
		Output_update_external_current( 500 );
    4412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    4416:	f002 f8fb 	bl	6610 <Output_update_external_current>
	}

	// Propogate next Id if the connection is ok
	if ( Connect_cableOkSlave )
    441a:	4b07      	ldr	r3, [pc, #28]	; (4438 <Connect_receive_IdEnumeration+0x48>)
    441c:	781b      	ldrb	r3, [r3, #0]
    441e:	b11b      	cbz	r3, 4428 <Connect_receive_IdEnumeration+0x38>
	{
		Connect_send_IdEnumeration( id + 1 );
    4420:	1c60      	adds	r0, r4, #1
    4422:	b2c0      	uxtb	r0, r0
    4424:	f7ff ff84 	bl	4330 <Connect_send_IdEnumeration>
	}

	return 1;
}
    4428:	2001      	movs	r0, #1
    442a:	bd38      	pop	{r3, r4, r5, pc}
    442c:	000098d1 	.word	0x000098d1
    4430:	000098f4 	.word	0x000098f4
    4434:	1fff8a05 	.word	0x1fff8a05
    4438:	1fff90f8 	.word	0x1fff90f8

0000443c <Connect_receive_IdReport>:

uint8_t Connect_receive_IdReport( uint8_t id, uint16_t *pending_bytes, uint8_t uart_num )
{
    443c:	b538      	push	{r3, r4, r5, lr}
    443e:	4615      	mov	r5, r2
    4440:	4604      	mov	r4, r0
	dbug_print("IdReport");
    4442:	4810      	ldr	r0, [pc, #64]	; (4484 <Connect_receive_IdReport+0x48>)
    4444:	f003 fd94 	bl	7f70 <_print>
	// Check the directionality
	if ( uart_num == UART_Master )
    4448:	2d01      	cmp	r5, #1
    444a:	d102      	bne.n	4452 <Connect_receive_IdReport+0x16>
	{
		erro_print("Invalid IdRequest direction...");
    444c:	480e      	ldr	r0, [pc, #56]	; (4488 <Connect_receive_IdReport+0x4c>)
    444e:	f003 fd8f 	bl	7f70 <_print>
	}

	// Track Id response if master
	if ( Connect_master )
    4452:	4b0e      	ldr	r3, [pc, #56]	; (448c <Connect_receive_IdReport+0x50>)
    4454:	781b      	ldrb	r3, [r3, #0]
    4456:	b17b      	cbz	r3, 4478 <Connect_receive_IdReport+0x3c>
	{
		info_msg("Id Reported: ");
    4458:	480d      	ldr	r0, [pc, #52]	; (4490 <Connect_receive_IdReport+0x54>)
    445a:	f003 fd89 	bl	7f70 <_print>
		printHex( id );
    445e:	2101      	movs	r1, #1
    4460:	4620      	mov	r0, r4
    4462:	f003 fe28 	bl	80b6 <printHex_op>
		print( NL );
    4466:	480b      	ldr	r0, [pc, #44]	; (4494 <Connect_receive_IdReport+0x58>)
    4468:	f003 fd82 	bl	7f70 <_print>

		// Check if this is the highest ID
		if ( id > Connect_maxId )
    446c:	4b0a      	ldr	r3, [pc, #40]	; (4498 <Connect_receive_IdReport+0x5c>)
    446e:	781a      	ldrb	r2, [r3, #0]
    4470:	42a2      	cmp	r2, r4
    4472:	d204      	bcs.n	447e <Connect_receive_IdReport+0x42>
			Connect_maxId = id;
    4474:	701c      	strb	r4, [r3, #0]
    4476:	e002      	b.n	447e <Connect_receive_IdReport+0x42>
		return 1;
	}
	// Propagate id if yet another slave
	else
	{
		Connect_send_IdReport( id );
    4478:	4620      	mov	r0, r4
    447a:	f7ff ff97 	bl	43ac <Connect_send_IdReport>
	}

	return 1;
}
    447e:	2001      	movs	r0, #1
    4480:	bd38      	pop	{r3, r4, r5, pc}
    4482:	bf00      	nop
    4484:	0000992e 	.word	0x0000992e
    4488:	0000989b 	.word	0x0000989b
    448c:	1fff9101 	.word	0x1fff9101
    4490:	0000994c 	.word	0x0000994c
    4494:	0000c0ef 	.word	0x0000c0ef
    4498:	1fff90f9 	.word	0x1fff90f9

0000449c <Connect_send_ScanCode>:

// id is the currently assigned id to the slave
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
    449c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    44a0:	4c14      	ldr	r4, [pc, #80]	; (44f4 <Connect_send_ScanCode+0x58>)
    44a2:	78e3      	ldrb	r3, [r4, #3]

// id is the currently assigned id to the slave
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
    44a4:	4689      	mov	r9, r1
    44a6:	4690      	mov	r8, r2
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    44a8:	2b00      	cmp	r3, #0
    44aa:	d1fd      	bne.n	44a8 <Connect_send_ScanCode+0xc>
    44ac:	2301      	movs	r3, #1
    44ae:	78a5      	ldrb	r5, [r4, #2]
    44b0:	70e3      	strb	r3, [r4, #3]
    44b2:	2d04      	cmp	r5, #4
    44b4:	d1fd      	bne.n	44b2 <Connect_send_ScanCode+0x16>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    44b6:	2601      	movs	r6, #1
    44b8:	2316      	movs	r3, #22
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    44ba:	2700      	movs	r7, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    44bc:	f88d 0003 	strb.w	r0, [sp, #3]
    44c0:	4632      	mov	r2, r6
    44c2:	4668      	mov	r0, sp
    44c4:	2105      	movs	r1, #5
    44c6:	f88d 3000 	strb.w	r3, [sp]
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    44ca:	70a7      	strb	r7, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    44cc:	f88d 6001 	strb.w	r6, [sp, #1]
    44d0:	f88d 5002 	strb.w	r5, [sp, #2]
    44d4:	f88d 8004 	strb.w	r8, [sp, #4]
    44d8:	f7ff fd0c 	bl	3ef4 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Send each of the scan codes
	Connect_addBytes( (uint8_t*)scanCodeStateList, numScanCodes * TriggerGuideSize, UART_Master );
    44dc:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    44e0:	4632      	mov	r2, r6
    44e2:	b2c9      	uxtb	r1, r1
    44e4:	4648      	mov	r0, r9
    44e6:	f7ff fe25 	bl	4134 <Connect_addBytes>

	// Unlock Tx
	uart_unlockTx( UART_Master );
    44ea:	70a5      	strb	r5, [r4, #2]
    44ec:	70e7      	strb	r7, [r4, #3]
}
    44ee:	b003      	add	sp, #12
    44f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    44f4:	1fff9d32 	.word	0x1fff9d32

000044f8 <cliFunc_connectCmd>:


// ----- CLI Command Functions -----

void cliFunc_connectCmd( char* args )
{
    44f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    44fa:	aa01      	add	r2, sp, #4
    44fc:	4669      	mov	r1, sp
    44fe:	f003 fa57 	bl	79b0 <CLI_argumentIsolation>

	print( NL );
    4502:	4815      	ldr	r0, [pc, #84]	; (4558 <cliFunc_connectCmd+0x60>)
    4504:	f003 fd34 	bl	7f70 <_print>

	switch ( numToInt( &arg1Ptr[0] ) )
    4508:	9800      	ldr	r0, [sp, #0]
    450a:	f003 fe43 	bl	8194 <numToInt>
    450e:	2804      	cmp	r0, #4
    4510:	d81e      	bhi.n	4550 <cliFunc_connectCmd+0x58>
    4512:	e8df f000 	tbb	[pc, r0]
    4516:	0703      	.short	0x0703
    4518:	0e0a      	.short	0x0e0a
    451a:	12          	.byte	0x12
    451b:	00          	.byte	0x00
	{
	case CableCheck:
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    451c:	2002      	movs	r0, #2
    451e:	f7ff fea3 	bl	4268 <Connect_send_CableCheck>
		break;
    4522:	e015      	b.n	4550 <cliFunc_connectCmd+0x58>

	case IdRequest:
		Connect_send_IdRequest();
    4524:	f7ff fee4 	bl	42f0 <Connect_send_IdRequest>
		break;
    4528:	e012      	b.n	4550 <cliFunc_connectCmd+0x58>

	case IdEnumeration:
		Connect_send_IdEnumeration( 5 );
    452a:	2005      	movs	r0, #5
    452c:	f7ff ff00 	bl	4330 <Connect_send_IdEnumeration>
		break;
    4530:	e00e      	b.n	4550 <cliFunc_connectCmd+0x58>

	case IdReport:
		Connect_send_IdReport( 8 );
    4532:	2008      	movs	r0, #8
    4534:	f7ff ff3a 	bl	43ac <Connect_send_IdReport>
		break;
    4538:	e00a      	b.n	4550 <cliFunc_connectCmd+0x58>

	case ScanCode:
	{
		TriggerGuide scanCodes[] = { { 0x00, 0x01, 0x05 }, { 0x00, 0x03, 0x16 } };
    453a:	4b08      	ldr	r3, [pc, #32]	; (455c <cliFunc_connectCmd+0x64>)
    453c:	6818      	ldr	r0, [r3, #0]
    453e:	9002      	str	r0, [sp, #8]
    4540:	889b      	ldrh	r3, [r3, #4]
    4542:	f8ad 300c 	strh.w	r3, [sp, #12]
		Connect_send_ScanCode( 10, scanCodes, 2 );
    4546:	2202      	movs	r2, #2
    4548:	a902      	add	r1, sp, #8
    454a:	200a      	movs	r0, #10
    454c:	f7ff ffa6 	bl	449c <Connect_send_ScanCode>
		break;

	default:
		break;
	}
}
    4550:	b005      	add	sp, #20
    4552:	f85d fb04 	ldr.w	pc, [sp], #4
    4556:	bf00      	nop
    4558:	0000c0ef 	.word	0x0000c0ef
    455c:	0000949d 	.word	0x0000949d

00004560 <Connect_send_RemoteCapability>:

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    4560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4564:	f88d 3006 	strb.w	r3, [sp, #6]

	// Ignore current id
	if ( id == Connect_id )
    4568:	4b2c      	ldr	r3, [pc, #176]	; (461c <Connect_send_RemoteCapability+0xbc>)
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    456a:	f88d 2005 	strb.w	r2, [sp, #5]

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    456e:	4605      	mov	r5, r0
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };

	// Ignore current id
	if ( id == Connect_id )
    4570:	781a      	ldrb	r2, [r3, #0]

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    4572:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4576:	f88d 5003 	strb.w	r5, [sp, #3]
    457a:	2016      	movs	r0, #22
    457c:	f88d 0000 	strb.w	r0, [sp]
    4580:	2001      	movs	r0, #1
    4582:	f88d 0001 	strb.w	r0, [sp, #1]

	// Ignore current id
	if ( id == Connect_id )
    4586:	4295      	cmp	r5, r2
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4588:	f04f 0006 	mov.w	r0, #6
    458c:	f88d 0002 	strb.w	r0, [sp, #2]
    4590:	f88d 1004 	strb.w	r1, [sp, #4]
    4594:	f88d 7007 	strb.w	r7, [sp, #7]
    4598:	461e      	mov	r6, r3

	// Ignore current id
	if ( id == Connect_id )
    459a:	d03b      	beq.n	4614 <Connect_send_RemoteCapability+0xb4>
		return;

	// Send towards slave node
	if ( id > Connect_id )
    459c:	d91c      	bls.n	45d8 <Connect_send_RemoteCapability+0x78>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Slave );
    459e:	4c20      	ldr	r4, [pc, #128]	; (4620 <Connect_send_RemoteCapability+0xc0>)
    45a0:	7863      	ldrb	r3, [r4, #1]
    45a2:	2b00      	cmp	r3, #0
    45a4:	d1fd      	bne.n	45a2 <Connect_send_RemoteCapability+0x42>
    45a6:	2301      	movs	r3, #1
    45a8:	f894 9000 	ldrb.w	r9, [r4]
    45ac:	7063      	strb	r3, [r4, #1]
    45ae:	f1b9 0f04 	cmp.w	r9, #4
    45b2:	d1fc      	bne.n	45ae <Connect_send_RemoteCapability+0x4e>
    45b4:	f04f 0800 	mov.w	r8, #0
    45b8:	4642      	mov	r2, r8
    45ba:	2108      	movs	r1, #8
    45bc:	4668      	mov	r0, sp
    45be:	f884 8000 	strb.w	r8, [r4]
    45c2:	f7ff fc97 	bl	3ef4 <Connect_addBytes.part.1>

		// Send header
		Connect_addBytes( header, sizeof( header ), UART_Slave );

		// Send arguments
		Connect_addBytes( args, numArgs, UART_Slave );
    45c6:	4642      	mov	r2, r8
    45c8:	4639      	mov	r1, r7
    45ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    45cc:	f7ff fdb2 	bl	4134 <Connect_addBytes>

		// Unlock Tx
		uart_unlockTx( UART_Slave );
    45d0:	f884 9000 	strb.w	r9, [r4]
    45d4:	f884 8001 	strb.w	r8, [r4, #1]
	}

	// Send towards master node
	if ( id < Connect_id || id == 255 )
    45d8:	7833      	ldrb	r3, [r6, #0]
    45da:	42ab      	cmp	r3, r5
    45dc:	d902      	bls.n	45e4 <Connect_send_RemoteCapability+0x84>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Master );
    45de:	4c10      	ldr	r4, [pc, #64]	; (4620 <Connect_send_RemoteCapability+0xc0>)
    45e0:	78e3      	ldrb	r3, [r4, #3]
    45e2:	e002      	b.n	45ea <Connect_send_RemoteCapability+0x8a>
		// Unlock Tx
		uart_unlockTx( UART_Slave );
	}

	// Send towards master node
	if ( id < Connect_id || id == 255 )
    45e4:	2dff      	cmp	r5, #255	; 0xff
    45e6:	d115      	bne.n	4614 <Connect_send_RemoteCapability+0xb4>
    45e8:	e7f9      	b.n	45de <Connect_send_RemoteCapability+0x7e>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Master );
    45ea:	2b00      	cmp	r3, #0
    45ec:	d1fd      	bne.n	45ea <Connect_send_RemoteCapability+0x8a>
    45ee:	2301      	movs	r3, #1
    45f0:	78a6      	ldrb	r6, [r4, #2]
    45f2:	70e3      	strb	r3, [r4, #3]
    45f4:	2e04      	cmp	r6, #4
    45f6:	d1fd      	bne.n	45f4 <Connect_send_RemoteCapability+0x94>
    45f8:	2500      	movs	r5, #0
    45fa:	2201      	movs	r2, #1
    45fc:	2108      	movs	r1, #8
    45fe:	4668      	mov	r0, sp
    4600:	70a5      	strb	r5, [r4, #2]
    4602:	f7ff fc77 	bl	3ef4 <Connect_addBytes.part.1>

		// Send header
		Connect_addBytes( header, sizeof( header ), UART_Master );

		// Send arguments
		Connect_addBytes( args, numArgs, UART_Master );
    4606:	2201      	movs	r2, #1
    4608:	4639      	mov	r1, r7
    460a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    460c:	f7ff fd92 	bl	4134 <Connect_addBytes>

		// Unlock Tx
		uart_unlockTx( UART_Master );
    4610:	70a6      	strb	r6, [r4, #2]
    4612:	70e5      	strb	r5, [r4, #3]
	}
}
    4614:	b003      	add	sp, #12
    4616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    461a:	bf00      	nop
    461c:	1fff8a05 	.word	0x1fff8a05
    4620:	1fff9d32 	.word	0x1fff9d32

00004624 <Connect_send_Idle>:

void Connect_send_Idle( uint8_t num )
{
    4624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    4626:	4c17      	ldr	r4, [pc, #92]	; (4684 <Connect_send_Idle+0x60>)
    4628:	7862      	ldrb	r2, [r4, #1]
    462a:	78e3      	ldrb	r3, [r4, #3]
		uart_unlockTx( UART_Master );
	}
}

void Connect_send_Idle( uint8_t num )
{
    462c:	4607      	mov	r7, r0
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    462e:	2a00      	cmp	r2, #0
    4630:	d1fd      	bne.n	462e <Connect_send_Idle+0xa>
    4632:	2b00      	cmp	r3, #0
    4634:	d1fd      	bne.n	4632 <Connect_send_Idle+0xe>
    4636:	2301      	movs	r3, #1
    4638:	7063      	strb	r3, [r4, #1]
    463a:	70e3      	strb	r3, [r4, #3]
    463c:	7822      	ldrb	r2, [r4, #0]
    463e:	78a3      	ldrb	r3, [r4, #2]
    4640:	2a04      	cmp	r2, #4
    4642:	d1fd      	bne.n	4640 <Connect_send_Idle+0x1c>
    4644:	2b04      	cmp	r3, #4
    4646:	d1fd      	bne.n	4644 <Connect_send_Idle+0x20>

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
    4648:	ae02      	add	r6, sp, #8
    464a:	2316      	movs	r3, #22
}

void Connect_send_Idle( uint8_t num )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    464c:	2500      	movs	r5, #0

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
    464e:	f806 3d01 	strb.w	r3, [r6, #-1]!
}

void Connect_send_Idle( uint8_t num )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    4652:	7025      	strb	r5, [r4, #0]
    4654:	70a5      	strb	r5, [r4, #2]

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
	for ( uint8_t c = 0; c < num; c++ )
    4656:	42bd      	cmp	r5, r7
    4658:	d00b      	beq.n	4672 <Connect_send_Idle+0x4e>
    465a:	2201      	movs	r2, #1
    465c:	4611      	mov	r1, r2
    465e:	4630      	mov	r0, r6
    4660:	f7ff fc48 	bl	3ef4 <Connect_addBytes.part.1>
    4664:	2200      	movs	r2, #0
    4666:	2101      	movs	r1, #1
    4668:	4630      	mov	r0, r6
    466a:	f7ff fc43 	bl	3ef4 <Connect_addBytes.part.1>
    466e:	3501      	adds	r5, #1
    4670:	e7f1      	b.n	4656 <Connect_send_Idle+0x32>
		Connect_addBytes( &value, 1, UART_Master );
		Connect_addBytes( &value, 1, UART_Slave );
	}

	// Release Tx buffers
	uart_unlockTx( UART_Master );
    4672:	2204      	movs	r2, #4
    4674:	2300      	movs	r3, #0
    4676:	70a2      	strb	r2, [r4, #2]
    4678:	70e3      	strb	r3, [r4, #3]
	uart_unlockTx( UART_Slave );
    467a:	7022      	strb	r2, [r4, #0]
    467c:	7063      	strb	r3, [r4, #1]
}
    467e:	b003      	add	sp, #12
    4680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4682:	bf00      	nop
    4684:	1fff9d32 	.word	0x1fff9d32

00004688 <cliFunc_connectIdl>:
	info_msg("Connect Debug Mode Toggle");
	Connect_debug = !Connect_debug;
}

void cliFunc_connectIdl( char* args )
{
    4688:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    468a:	aa01      	add	r2, sp, #4
    468c:	4669      	mov	r1, sp
    468e:	f003 f98f 	bl	79b0 <CLI_argumentIsolation>

	print( NL );
    4692:	4809      	ldr	r0, [pc, #36]	; (46b8 <cliFunc_connectIdl+0x30>)
    4694:	f003 fc6c 	bl	7f70 <_print>
	info_msg("Sending Sync Idles...");
    4698:	4808      	ldr	r0, [pc, #32]	; (46bc <cliFunc_connectIdl+0x34>)
    469a:	f003 fc69 	bl	7f70 <_print>

	uint8_t count = numToInt( &arg1Ptr[0] );
    469e:	9800      	ldr	r0, [sp, #0]
    46a0:	f003 fd78 	bl	8194 <numToInt>
    46a4:	b2c0      	uxtb	r0, r0
	// Default to 2 idles
	if ( count == 0 )
    46a6:	2800      	cmp	r0, #0
		count = 2;

	Connect_send_Idle( count );
    46a8:	bf08      	it	eq
    46aa:	2002      	moveq	r0, #2
    46ac:	f7ff ffba 	bl	4624 <Connect_send_Idle>
}
    46b0:	b003      	add	sp, #12
    46b2:	f85d fb04 	ldr.w	pc, [sp], #4
    46b6:	bf00      	nop
    46b8:	0000c0ef 	.word	0x0000c0ef
    46bc:	0000996c 	.word	0x0000996c

000046c0 <Connect_reset>:

// ----- Functions -----

// Resets the state of the UART buffers and state variables
void Connect_reset()
{
    46c0:	b510      	push	{r4, lr}
	// Reset Rx
	memset( (void*)uart_rx_status, 0, sizeof( UARTStatusRx ) * UART_Num_Interfaces );
    46c2:	2208      	movs	r2, #8

	// Reset Tx
	memset( (void*)uart_tx_buf,    0, sizeof( UARTRingBuf )  * UART_Num_Interfaces );
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );
    46c4:	4c0c      	ldr	r4, [pc, #48]	; (46f8 <Connect_reset+0x38>)

// Resets the state of the UART buffers and state variables
void Connect_reset()
{
	// Reset Rx
	memset( (void*)uart_rx_status, 0, sizeof( UARTStatusRx ) * UART_Num_Interfaces );
    46c6:	480d      	ldr	r0, [pc, #52]	; (46fc <Connect_reset+0x3c>)
    46c8:	2100      	movs	r1, #0
    46ca:	f7fd ff4f 	bl	256c <memset>

	// Reset Tx
	memset( (void*)uart_tx_buf,    0, sizeof( UARTRingBuf )  * UART_Num_Interfaces );
    46ce:	f44f 7283 	mov.w	r2, #262	; 0x106
    46d2:	2100      	movs	r1, #0
    46d4:	480a      	ldr	r0, [pc, #40]	; (4700 <Connect_reset+0x40>)
    46d6:	f7fd ff49 	bl	256c <memset>
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );
    46da:	2204      	movs	r2, #4
    46dc:	2100      	movs	r1, #0
    46de:	4620      	mov	r0, r4
    46e0:	f7fd ff44 	bl	256c <memset>

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    46e4:	4b07      	ldr	r3, [pc, #28]	; (4704 <Connect_reset+0x44>)
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
    46e6:	2104      	movs	r1, #4
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    46e8:	2280      	movs	r2, #128	; 0x80
    46ea:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
    46ee:	7021      	strb	r1, [r4, #0]
    46f0:	70a1      	strb	r1, [r4, #2]
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    46f2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    46f6:	bd10      	pop	{r4, pc}
    46f8:	1fff9d32 	.word	0x1fff9d32
    46fc:	1fff9d50 	.word	0x1fff9d50
    4700:	1fff9c26 	.word	0x1fff9c26
    4704:	1fff9d58 	.word	0x1fff9d58

00004708 <cliFunc_connectRst>:
		break;
	}
}

void cliFunc_connectRst( char* args )
{
    4708:	b508      	push	{r3, lr}
	print( NL );
    470a:	4806      	ldr	r0, [pc, #24]	; (4724 <cliFunc_connectRst+0x1c>)
    470c:	f003 fc30 	bl	7f70 <_print>
	info_msg("Resetting UARTConnect state...");
    4710:	4805      	ldr	r0, [pc, #20]	; (4728 <cliFunc_connectRst+0x20>)
    4712:	f003 fc2d 	bl	7f70 <_print>
	Connect_reset();
    4716:	f7ff ffd3 	bl	46c0 <Connect_reset>

	// Reset node id
	Connect_id = 0xFF;
    471a:	4b04      	ldr	r3, [pc, #16]	; (472c <cliFunc_connectRst+0x24>)
    471c:	22ff      	movs	r2, #255	; 0xff
    471e:	701a      	strb	r2, [r3, #0]
    4720:	bd08      	pop	{r3, pc}
    4722:	bf00      	nop
    4724:	0000c0ef 	.word	0x0000c0ef
    4728:	00009994 	.word	0x00009994
    472c:	1fff8a05 	.word	0x1fff8a05

00004730 <Connect_setup>:
// Setup connection to other side
// - Only supports a single slave and master
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
    4730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Indication that UARTs are not ready
	uarts_configured = 0;
    4732:	4e58      	ldr	r6, [pc, #352]	; (4894 <Connect_setup+0x164>)

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    4734:	4958      	ldr	r1, [pc, #352]	; (4898 <Connect_setup+0x168>)
// Setup connection to other side
// - Only supports a single slave and master
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
    4736:	4605      	mov	r5, r0
	// Indication that UARTs are not ready
	uarts_configured = 0;
    4738:	2400      	movs	r4, #0

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    473a:	4858      	ldr	r0, [pc, #352]	; (489c <Connect_setup+0x16c>)
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
	// Indication that UARTs are not ready
	uarts_configured = 0;
    473c:	7034      	strb	r4, [r6, #0]

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    473e:	f003 f9af 	bl	7aa0 <CLI_registerDictionary>

	// Check if master
	Connect_master = master;
    4742:	4b57      	ldr	r3, [pc, #348]	; (48a0 <Connect_setup+0x170>)
    4744:	4630      	mov	r0, r6
    4746:	701d      	strb	r5, [r3, #0]
	if ( Connect_master )
    4748:	b10d      	cbz	r5, 474e <Connect_setup+0x1e>
		Connect_id = 0; // 0x00 is always the master Id
    474a:	4b56      	ldr	r3, [pc, #344]	; (48a4 <Connect_setup+0x174>)
    474c:	701c      	strb	r4, [r3, #0]

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    474e:	4b56      	ldr	r3, [pc, #344]	; (48a8 <Connect_setup+0x178>)
	PORTA_PCR2 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); // TX Pin
	PORTE_PCR0 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); // RX Pin
	PORTE_PCR1 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); // TX Pin

	// Baud Rate setting
	UART0_BDH = (uint8_t)(Connect_baud >> 8);
    4750:	4956      	ldr	r1, [pc, #344]	; (48ac <Connect_setup+0x17c>)
		Connect_id = 0; // 0x00 is always the master Id

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    4752:	681a      	ldr	r2, [r3, #0]
	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
    4754:	4d56      	ldr	r5, [pc, #344]	; (48b0 <Connect_setup+0x180>)
	// Default control register
	DMA_CR = 0;

	// DMA Priority
	DMA_DCHPRI0 = 0; // Ch 0, priority 0
	DMA_DCHPRI1 = 1; // ch 1, priority 1
    4756:	4e57      	ldr	r6, [pc, #348]	; (48b4 <Connect_setup+0x184>)

	// Clear error interrupts
	DMA_EEI = 0;

	// Setup TCD
	DMA_TCD0_SADDR = (uint32_t*)&UART0_D;
    4758:	4f57      	ldr	r7, [pc, #348]	; (48b8 <Connect_setup+0x188>)
		Connect_id = 0; // 0x00 is always the master Id

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    475a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    475e:	601a      	str	r2, [r3, #0]
	SIM_SCGC4 |= SIM_SCGC4_UART1; // Disable clock gating
    4760:	681a      	ldr	r2, [r3, #0]
    4762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    4766:	601a      	str	r2, [r3, #0]

	// Pin Setup for UART0 / UART1
	PORTA_PCR1 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); // RX Pin
    4768:	f240 2213 	movw	r2, #531	; 0x213
    476c:	f8c3 2fd0 	str.w	r2, [r3, #4048]	; 0xfd0
	PORTA_PCR2 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); // TX Pin
    4770:	f44f 7211 	mov.w	r2, #580	; 0x244
    4774:	f8c3 2fd4 	str.w	r2, [r3, #4052]	; 0xfd4
	PORTE_PCR0 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); // RX Pin
    4778:	4b50      	ldr	r3, [pc, #320]	; (48bc <Connect_setup+0x18c>)
    477a:	f240 3213 	movw	r2, #787	; 0x313
    477e:	601a      	str	r2, [r3, #0]
	PORTE_PCR1 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); // TX Pin
    4780:	f44f 7251 	mov.w	r2, #836	; 0x344
    4784:	605a      	str	r2, [r3, #4]

	// Baud Rate setting
	UART0_BDH = (uint8_t)(Connect_baud >> 8);
    4786:	4b4e      	ldr	r3, [pc, #312]	; (48c0 <Connect_setup+0x190>)
    4788:	881a      	ldrh	r2, [r3, #0]
    478a:	0a12      	lsrs	r2, r2, #8
    478c:	700a      	strb	r2, [r1, #0]
	UART0_BDL = (uint8_t)Connect_baud;
    478e:	4a4d      	ldr	r2, [pc, #308]	; (48c4 <Connect_setup+0x194>)
    4790:	7819      	ldrb	r1, [r3, #0]
    4792:	7011      	strb	r1, [r2, #0]
	UART0_C4  = Connect_baudFine;
    4794:	494c      	ldr	r1, [pc, #304]	; (48c8 <Connect_setup+0x198>)
    4796:	780c      	ldrb	r4, [r1, #0]
    4798:	7254      	strb	r4, [r2, #9]
	UART1_BDH = (uint8_t)(Connect_baud >> 8);
    479a:	881a      	ldrh	r2, [r3, #0]
    479c:	4c4b      	ldr	r4, [pc, #300]	; (48cc <Connect_setup+0x19c>)
    479e:	0a12      	lsrs	r2, r2, #8
    47a0:	7022      	strb	r2, [r4, #0]
	UART1_BDL = (uint8_t)Connect_baud;
    47a2:	781a      	ldrb	r2, [r3, #0]
    47a4:	4b4a      	ldr	r3, [pc, #296]	; (48d0 <Connect_setup+0x1a0>)
    47a6:	701a      	strb	r2, [r3, #0]
	UART1_C4  = Connect_baudFine;
    47a8:	780a      	ldrb	r2, [r1, #0]
    47aa:	725a      	strb	r2, [r3, #9]

	// 8 bit, Even Parity, Idle Character bit after stop
	// NOTE: For 8 bit with Parity you must enable 9 bit transmission (pg. 1065)
	//       You only need to use UART0_D for 8 bit reading/writing though
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    47ac:	4a49      	ldr	r2, [pc, #292]	; (48d4 <Connect_setup+0x1a4>)
    47ae:	2316      	movs	r3, #22
    47b0:	7013      	strb	r3, [r2, #0]
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    47b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    47b6:	2180      	movs	r1, #128	; 0x80
	// 8 bit, Even Parity, Idle Character bit after stop
	// NOTE: For 8 bit with Parity you must enable 9 bit transmission (pg. 1065)
	//       You only need to use UART0_D for 8 bit reading/writing though
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    47b8:	7013      	strb	r3, [r2, #0]

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    47ba:	4b47      	ldr	r3, [pc, #284]	; (48d8 <Connect_setup+0x1a8>)
	UART1_PFIFO = UART_PFIFO_TXFE;

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    47bc:	f5a2 320b 	sub.w	r2, r2, #142336	; 0x22c00
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    47c0:	7019      	strb	r1, [r3, #0]
	UART1_PFIFO = UART_PFIFO_TXFE;
    47c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    47c6:	f2a2 32c6 	subw	r2, r2, #966	; 0x3c6
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
	UART1_PFIFO = UART_PFIFO_TXFE;
    47ca:	7019      	strb	r1, [r3, #0]

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    47cc:	6813      	ldr	r3, [r2, #0]
    47ce:	f043 0302 	orr.w	r3, r3, #2
    47d2:	6013      	str	r3, [r2, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    47d4:	6853      	ldr	r3, [r2, #4]
    47d6:	f043 0302 	orr.w	r3, r3, #2
    47da:	6053      	str	r3, [r2, #4]

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
	DMAMUX0_CHCFG1 = 0;
    47dc:	f5a4 2493 	sub.w	r4, r4, #301056	; 0x49800

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    47e0:	f5a2 327c 	sub.w	r2, r2, #258048	; 0x3f000
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
	DMAMUX0_CHCFG1 = 0;
    47e4:	f2a4 74ff 	subw	r4, r4, #2047	; 0x7ff

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    47e8:	3a20      	subs	r2, #32
	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
    47ea:	2300      	movs	r3, #0
    47ec:	702b      	strb	r3, [r5, #0]
	DMAMUX0_CHCFG1 = 0;
    47ee:	7023      	strb	r3, [r4, #0]

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    47f0:	8013      	strh	r3, [r2, #0]
	DMA_TCD1_CSR = 0;
    47f2:	8413      	strh	r3, [r2, #32]

	// Default control register
	DMA_CR = 0;
    47f4:	4a39      	ldr	r2, [pc, #228]	; (48dc <Connect_setup+0x1ac>)
    47f6:	6013      	str	r3, [r2, #0]

	// DMA Priority
	DMA_DCHPRI0 = 0; // Ch 0, priority 0
    47f8:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103
	DMA_DCHPRI1 = 1; // ch 1, priority 1
    47fc:	2201      	movs	r2, #1
    47fe:	7032      	strb	r2, [r6, #0]

	// Clear error interrupts
	DMA_EEI = 0;
    4800:	f846 3cee 	str.w	r3, [r6, #-238]

	// Setup TCD
	DMA_TCD0_SADDR = (uint32_t*)&UART0_D;
    4804:	f8c6 7efe 	str.w	r7, [r6, #3838]	; 0xefe
    4808:	f606 66fe 	addw	r6, r6, #3838	; 0xefe
	DMA_TCD1_SADDR = (uint32_t*)&UART1_D;
    480c:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
    4810:	6237      	str	r7, [r6, #32]
	DMA_TCD0_SOFF = 0;
    4812:	80b3      	strh	r3, [r6, #4]
	DMA_TCD1_SOFF = 0;
    4814:	84b3      	strh	r3, [r6, #36]	; 0x24

	// No modulo, 8-bit transfer size
	DMA_TCD0_ATTR = DMA_TCD_ATTR_SMOD(0) | DMA_TCD_ATTR_SSIZE(0) | DMA_TCD_ATTR_DMOD(0) | DMA_TCD_ATTR_DSIZE(0);
    4816:	80f3      	strh	r3, [r6, #6]
	DMA_TCD1_ATTR = DMA_TCD_ATTR_SMOD(0) | DMA_TCD_ATTR_SSIZE(0) | DMA_TCD_ATTR_DMOD(0) | DMA_TCD_ATTR_DSIZE(0);
    4818:	84f3      	strh	r3, [r6, #38]	; 0x26

	// One byte transferred at a time
	DMA_TCD0_NBYTES_MLNO = 1;
    481a:	60b2      	str	r2, [r6, #8]
	DMA_TCD1_NBYTES_MLNO = 1;
    481c:	62b2      	str	r2, [r6, #40]	; 0x28

	// Source address does not change
	DMA_TCD0_SLAST = 0;
    481e:	60f3      	str	r3, [r6, #12]
	DMA_TCD1_SLAST = 0;
    4820:	62f3      	str	r3, [r6, #44]	; 0x2c

	// Destination buffer
	DMA_TCD0_DADDR = (uint32_t*)uart_rx_buf[0].buffer;
    4822:	4b2f      	ldr	r3, [pc, #188]	; (48e0 <Connect_setup+0x1b0>)
    4824:	6133      	str	r3, [r6, #16]
	DMA_TCD1_DADDR = (uint32_t*)uart_rx_buf[1].buffer;
    4826:	3382      	adds	r3, #130	; 0x82
    4828:	6333      	str	r3, [r6, #48]	; 0x30

	// Incoming byte, increment by 1 in the rx buffer
	DMA_TCD0_DOFF = 1;
    482a:	4b2e      	ldr	r3, [pc, #184]	; (48e4 <Connect_setup+0x1b4>)
    482c:	801a      	strh	r2, [r3, #0]
	DMA_TCD1_DOFF = 1;
    482e:	841a      	strh	r2, [r3, #32]

	// Single major loop, must be the same value
	DMA_TCD0_CITER_ELINKNO = UART_Buffer_Size;
    4830:	8059      	strh	r1, [r3, #2]
	DMA_TCD1_CITER_ELINKNO = UART_Buffer_Size;
    4832:	8459      	strh	r1, [r3, #34]	; 0x22
	DMA_TCD0_BITER_ELINKNO = UART_Buffer_Size;
    4834:	8159      	strh	r1, [r3, #10]
	DMA_TCD1_BITER_ELINKNO = UART_Buffer_Size;
    4836:	8559      	strh	r1, [r3, #42]	; 0x2a

	// Reset buffer when full
	DMA_TCD0_DLASTSGA = -( UART_Buffer_Size );
    4838:	492b      	ldr	r1, [pc, #172]	; (48e8 <Connect_setup+0x1b8>)
    483a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    483e:	600b      	str	r3, [r1, #0]
	DMA_TCD1_DLASTSGA = -( UART_Buffer_Size );
    4840:	620b      	str	r3, [r1, #32]

	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;
    4842:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    4846:	390c      	subs	r1, #12
    4848:	680b      	ldr	r3, [r1, #0]
    484a:	f043 0303 	orr.w	r3, r3, #3
    484e:	600b      	str	r3, [r1, #0]

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
    4850:	2382      	movs	r3, #130	; 0x82
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    4852:	f501 21c3 	add.w	r1, r1, #399360	; 0x61800

	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
    4856:	702b      	strb	r3, [r5, #0]
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    4858:	f201 71ff 	addw	r1, r1, #2047	; 0x7ff
	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;
    485c:	2384      	movs	r3, #132	; 0x84
    485e:	7023      	strb	r3, [r4, #0]

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    4860:	2320      	movs	r3, #32
    4862:	700b      	strb	r3, [r1, #0]
	UART1_C5 = UART_C5_RDMAS;
    4864:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    4868:	700b      	strb	r3, [r1, #0]

	// TX Enabled, RX Enabled, RX Interrupt Enabled
	UART0_C2 = UART_C2_TE | UART_C2_RE | UART_C2_RIE;
    486a:	4920      	ldr	r1, [pc, #128]	; (48ec <Connect_setup+0x1bc>)
    486c:	232c      	movs	r3, #44	; 0x2c
    486e:	700b      	strb	r3, [r1, #0]
	UART1_C2 = UART_C2_TE | UART_C2_RE | UART_C2_RIE;
    4870:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    4874:	700b      	strb	r3, [r1, #0]

	// Add interrupts to the vector table
	NVIC_ENABLE_IRQ( IRQ_UART0_STATUS );
    4876:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
    487a:	33d8      	adds	r3, #216	; 0xd8
    487c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4880:	6019      	str	r1, [r3, #0]
	NVIC_ENABLE_IRQ( IRQ_UART1_STATUS );
    4882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4886:	6019      	str	r1, [r3, #0]

	// UARTs are now ready to go
	uarts_configured = 1;
    4888:	7002      	strb	r2, [r0, #0]

	// Reset the state of the UART variables
	Connect_reset();
}
    488a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	// UARTs are now ready to go
	uarts_configured = 1;

	// Reset the state of the UART variables
	Connect_reset();
    488e:	f7ff bf17 	b.w	46c0 <Connect_reset>
    4892:	bf00      	nop
    4894:	1fff90e9 	.word	0x1fff90e9
    4898:	00009b0f 	.word	0x00009b0f
    489c:	000094a4 	.word	0x000094a4
    48a0:	1fff9101 	.word	0x1fff9101
    48a4:	1fff8a05 	.word	0x1fff8a05
    48a8:	40048034 	.word	0x40048034
    48ac:	4006a000 	.word	0x4006a000
    48b0:	40021000 	.word	0x40021000
    48b4:	40008102 	.word	0x40008102
    48b8:	4006a007 	.word	0x4006a007
    48bc:	4004d000 	.word	0x4004d000
    48c0:	1fff8a06 	.word	0x1fff8a06
    48c4:	4006a001 	.word	0x4006a001
    48c8:	1fff90ea 	.word	0x1fff90ea
    48cc:	4006b000 	.word	0x4006b000
    48d0:	4006b001 	.word	0x4006b001
    48d4:	4006a002 	.word	0x4006a002
    48d8:	4006a010 	.word	0x4006a010
    48dc:	40008000 	.word	0x40008000
    48e0:	1fff9d58 	.word	0x1fff9d58
    48e4:	40009014 	.word	0x40009014
    48e8:	40009018 	.word	0x40009018
    48ec:	4006a003 	.word	0x4006a003

000048f0 <Connect_rx_process>:
#define DMA_BUF_POS( x, pos ) \
	case x: \
		pos = DMA_TCD##x##_CITER_ELINKNO; \
		break
void Connect_rx_process( uint8_t uartNum )
{
    48f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Determine current position to read until
	uint16_t bufpos = 0;
	switch ( uartNum )
    48f4:	4604      	mov	r4, r0
    48f6:	b118      	cbz	r0, 4900 <Connect_rx_process+0x10>
    48f8:	2801      	cmp	r0, #1
    48fa:	d105      	bne.n	4908 <Connect_rx_process+0x18>
	{
	DMA_BUF_POS( 0, bufpos );
	DMA_BUF_POS( 1, bufpos );
    48fc:	4b5d      	ldr	r3, [pc, #372]	; (4a74 <Connect_rx_process+0x184>)
    48fe:	e000      	b.n	4902 <Connect_rx_process+0x12>
{
	// Determine current position to read until
	uint16_t bufpos = 0;
	switch ( uartNum )
	{
	DMA_BUF_POS( 0, bufpos );
    4900:	4b5d      	ldr	r3, [pc, #372]	; (4a78 <Connect_rx_process+0x188>)
	DMA_BUF_POS( 1, bufpos );
    4902:	881e      	ldrh	r6, [r3, #0]
    4904:	b2b6      	uxth	r6, r6
    4906:	e000      	b.n	490a <Connect_rx_process+0x1a>
		pos = DMA_TCD##x##_CITER_ELINKNO; \
		break
void Connect_rx_process( uint8_t uartNum )
{
	// Determine current position to read until
	uint16_t bufpos = 0;
    4908:	2600      	movs	r6, #0
	DMA_BUF_POS( 1, bufpos );
	}

	// Process each of the new bytes
	// Even if we receive more bytes during processing, wait until the next check so we don't starve other tasks
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
    490a:	f04f 0982 	mov.w	r9, #130	; 0x82
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    490e:	4b5b      	ldr	r3, [pc, #364]	; (4a7c <Connect_rx_process+0x18c>)
	DMA_BUF_POS( 1, bufpos );
	}

	// Process each of the new bytes
	// Even if we receive more bytes during processing, wait until the next check so we don't starve other tasks
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
    4910:	fb09 f904 	mul.w	r9, r9, r4
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    4914:	eb03 0a09 	add.w	sl, r3, r9
	DMA_BUF_POS( 1, bufpos );
	}

	// Process each of the new bytes
	// Even if we receive more bytes during processing, wait until the next check so we don't starve other tasks
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
    4918:	4b58      	ldr	r3, [pc, #352]	; (4a7c <Connect_rx_process+0x18c>)
    491a:	eb03 0209 	add.w	r2, r3, r9
    491e:	f8b2 3080 	ldrh.w	r3, [r2, #128]	; 0x80
    4922:	b29b      	uxth	r3, r3
    4924:	42b3      	cmp	r3, r6
    4926:	f000 80a2 	beq.w	4a6e <Connect_rx_process+0x17e>
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
    492a:	f8b2 3080 	ldrh.w	r3, [r2, #128]	; 0x80
    492e:	b29b      	uxth	r3, r3
    4930:	b1c3      	cbz	r3, 4964 <Connect_rx_process+0x74>
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    4932:	f8ba 3080 	ldrh.w	r3, [sl, #128]	; 0x80

		if ( Connect_debug )
    4936:	f8df 8170 	ldr.w	r8, [pc, #368]	; 4aa8 <Connect_rx_process+0x1b8>
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    493a:	b29b      	uxth	r3, r3
    493c:	1e5a      	subs	r2, r3, #1
    493e:	b292      	uxth	r2, r2
    4940:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    4944:	f8aa 2080 	strh.w	r2, [sl, #128]	; 0x80
    4948:	f81a 5003 	ldrb.w	r5, [sl, r3]

		if ( Connect_debug )
    494c:	f898 3000 	ldrb.w	r3, [r8]
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    4950:	b2ed      	uxtb	r5, r5

		if ( Connect_debug )
    4952:	b173      	cbz	r3, 4972 <Connect_rx_process+0x82>
		{
			printHex( byte );
    4954:	4628      	mov	r0, r5
    4956:	2101      	movs	r1, #1
    4958:	f003 fbad 	bl	80b6 <printHex_op>
			print(" ");
    495c:	4848      	ldr	r0, [pc, #288]	; (4a80 <Connect_rx_process+0x190>)
    495e:	f003 fb07 	bl	7f70 <_print>
    4962:	e006      	b.n	4972 <Connect_rx_process+0x82>
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
		{
			uart_rx_buf[ uartNum ].last_read = UART_Buffer_Size;
    4964:	2380      	movs	r3, #128	; 0x80

			// Check to see if we're at the boundary
			if ( bufpos == UART_Buffer_Size )
    4966:	429e      	cmp	r6, r3
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
		{
			uart_rx_buf[ uartNum ].last_read = UART_Buffer_Size;
    4968:	f8a2 3080 	strh.w	r3, [r2, #128]	; 0x80

			// Check to see if we're at the boundary
			if ( bufpos == UART_Buffer_Size )
    496c:	d1e1      	bne.n	4932 <Connect_rx_process+0x42>
    496e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			printHex( byte );
			print(" ");
		}

		// Process UART byte
		switch ( uart_rx_status[ uartNum ].status )
    4972:	4f44      	ldr	r7, [pc, #272]	; (4a84 <Connect_rx_process+0x194>)
    4974:	f817 3024 	ldrb.w	r3, [r7, r4, lsl #2]
    4978:	46bb      	mov	fp, r7
    497a:	2b03      	cmp	r3, #3
    497c:	d867      	bhi.n	4a4e <Connect_rx_process+0x15e>
    497e:	e8df f003 	tbb	[pc, r3]
    4982:	0f02      	.short	0x0f02
    4984:	501a      	.short	0x501a
		{
		// Every packet must start with a SYN / 0x16
		case UARTStatus_Wait:
			if ( Connect_debug )
    4986:	f898 3000 	ldrb.w	r3, [r8]
    498a:	b113      	cbz	r3, 4992 <Connect_rx_process+0xa2>
			{
				print(" Wait ");
    498c:	483e      	ldr	r0, [pc, #248]	; (4a88 <Connect_rx_process+0x198>)
    498e:	f003 faef 	bl	7f70 <_print>
			}
			uart_rx_status[ uartNum ].status = byte == 0x16 ? UARTStatus_SYN : UARTStatus_Wait;
    4992:	f1a5 0316 	sub.w	r3, r5, #22
    4996:	425d      	negs	r5, r3
    4998:	415d      	adcs	r5, r3
    499a:	f807 5024 	strb.w	r5, [r7, r4, lsl #2]
			break;
    499e:	e05d      	b.n	4a5c <Connect_rx_process+0x16c>

		// After a SYN, there must be a SOH / 0x01
		case UARTStatus_SYN:
			if ( Connect_debug )
    49a0:	f898 3000 	ldrb.w	r3, [r8]
    49a4:	b113      	cbz	r3, 49ac <Connect_rx_process+0xbc>
			{
				print(" SYN ");
    49a6:	4839      	ldr	r0, [pc, #228]	; (4a8c <Connect_rx_process+0x19c>)
    49a8:	f003 fae2 	bl	7f70 <_print>
			}
			uart_rx_status[ uartNum ].status = byte == 0x01 ? UARTStatus_SOH : UARTStatus_Wait;
    49ac:	2d01      	cmp	r5, #1
    49ae:	bf0c      	ite	eq
    49b0:	2302      	moveq	r3, #2
    49b2:	2300      	movne	r3, #0
    49b4:	e008      	b.n	49c8 <Connect_rx_process+0xd8>
		// After a SOH the packet structure may diverge a bit
		// This is the packet type field (refer to the Command enum)
		// For very small packets (e.g. IdRequest) this is all that's required to take action
		case UARTStatus_SOH:
		{
			if ( Connect_debug )
    49b6:	f898 3000 	ldrb.w	r3, [r8]
    49ba:	b113      	cbz	r3, 49c2 <Connect_rx_process+0xd2>
			{
				print(" SOH ");
    49bc:	4834      	ldr	r0, [pc, #208]	; (4a90 <Connect_rx_process+0x1a0>)
    49be:	f003 fad7 	bl	7f70 <_print>
			}

			// Check if this is actually a reserved CMD 0x16 (Error condition)
			if ( byte == Command_SYN )
    49c2:	2d16      	cmp	r5, #22
    49c4:	d103      	bne.n	49ce <Connect_rx_process+0xde>
			{
				uart_rx_status[ uartNum ].status = UARTStatus_SYN;
    49c6:	2301      	movs	r3, #1
    49c8:	f807 3024 	strb.w	r3, [r7, r4, lsl #2]
				break;
    49cc:	e046      	b.n	4a5c <Connect_rx_process+0x16c>
			}

			// Otherwise process the command
			if ( byte < Command_TOP )
    49ce:	2d08      	cmp	r5, #8
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
    49d0:	bf98      	it	ls
    49d2:	2203      	movls	r2, #3
    49d4:	ea4f 0384 	mov.w	r3, r4, lsl #2
    49d8:	bf9b      	ittet	ls
    49da:	f807 2024 	strbls.w	r2, [r7, r4, lsl #2]
				uart_rx_status[ uartNum ].command = byte;
    49de:	eb0b 0203 	addls.w	r2, fp, r3
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
			}
			// Invalid packet type, ignore
			else
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    49e2:	2200      	movhi	r2, #0

			// Otherwise process the command
			if ( byte < Command_TOP )
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
				uart_rx_status[ uartNum ].command = byte;
    49e4:	7055      	strbls	r5, [r2, #1]
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
    49e6:	bf94      	ite	ls
    49e8:	f64f 70ff 	movwls	r0, #65535	; 0xffff
			}
			// Invalid packet type, ignore
			else
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    49ec:	f807 2024 	strbhi.w	r2, [r7, r4, lsl #2]
			}

			// Check if this is a very short packet
			switch ( uart_rx_status[ uartNum ].command )
    49f0:	eb0b 0503 	add.w	r5, fp, r3
			// Otherwise process the command
			if ( byte < Command_TOP )
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
				uart_rx_status[ uartNum ].command = byte;
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
    49f4:	bf98      	it	ls
    49f6:	8050      	strhls	r0, [r2, #2]
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
			}

			// Check if this is a very short packet
			switch ( uart_rx_status[ uartNum ].command )
    49f8:	786b      	ldrb	r3, [r5, #1]
    49fa:	2b01      	cmp	r3, #1
    49fc:	d105      	bne.n	4a0a <Connect_rx_process+0x11a>
			{
			case IdRequest:
				Connect_receive_IdRequest( 0, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum );
    49fe:	4622      	mov	r2, r4
    4a00:	1ca9      	adds	r1, r5, #2
    4a02:	2000      	movs	r0, #0
    4a04:	f7ff fcb6 	bl	4374 <Connect_receive_IdRequest>
    4a08:	e01c      	b.n	4a44 <Connect_rx_process+0x154>
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
				break;

			default:
				if ( Connect_debug )
    4a0a:	f898 3000 	ldrb.w	r3, [r8]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d082      	beq.n	4918 <Connect_rx_process+0x28>
				{
					print(" ### ");
    4a12:	4820      	ldr	r0, [pc, #128]	; (4a94 <Connect_rx_process+0x1a4>)
    4a14:	f003 faac 	bl	7f70 <_print>
					printHex( uart_rx_status[ uartNum ].command );
    4a18:	7868      	ldrb	r0, [r5, #1]
    4a1a:	2101      	movs	r1, #1
    4a1c:	f003 fb4b 	bl	80b6 <printHex_op>
    4a20:	e01c      	b.n	4a5c <Connect_rx_process+0x16c>

		// After the packet type has been deciphered do Command specific processing
		// Until the Command has received all the bytes it requires the UART buffer stays in this state
		case UARTStatus_Command:
		{
			if ( Connect_debug )
    4a22:	f898 3000 	ldrb.w	r3, [r8]
    4a26:	b113      	cbz	r3, 4a2e <Connect_rx_process+0x13e>
			{
				print(" CMD ");
    4a28:	481b      	ldr	r0, [pc, #108]	; (4a98 <Connect_rx_process+0x1a8>)
    4a2a:	f003 faa1 	bl	7f70 <_print>
			}
			/* Call specific UARTConnect command receive function */
			uint8_t (*rcvFunc)(uint8_t, uint16_t(*), uint8_t) = (uint8_t(*)(uint8_t, uint16_t(*), uint8_t))(Connect_receiveFunctions[ uart_rx_status[ uartNum ].command ]);
    4a2e:	eb0b 0184 	add.w	r1, fp, r4, lsl #2
    4a32:	4b1a      	ldr	r3, [pc, #104]	; (4a9c <Connect_rx_process+0x1ac>)
    4a34:	784a      	ldrb	r2, [r1, #1]
			if ( rcvFunc( byte, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum ) )
    4a36:	4628      	mov	r0, r5
    4a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4a3c:	3102      	adds	r1, #2
    4a3e:	4622      	mov	r2, r4
    4a40:	4798      	blx	r3
    4a42:	b158      	cbz	r0, 4a5c <Connect_rx_process+0x16c>
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    4a44:	4b0f      	ldr	r3, [pc, #60]	; (4a84 <Connect_rx_process+0x194>)
    4a46:	2200      	movs	r2, #0
    4a48:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
    4a4c:	e006      	b.n	4a5c <Connect_rx_process+0x16c>
			break;
		}

		// Unknown status, should never get here
		default:
			erro_msg("Invalid UARTStatus...");
    4a4e:	4814      	ldr	r0, [pc, #80]	; (4aa0 <Connect_rx_process+0x1b0>)
    4a50:	f003 fa8e 	bl	7f70 <_print>
			uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    4a54:	2300      	movs	r3, #0
    4a56:	f807 3024 	strb.w	r3, [r7, r4, lsl #2]
			continue;
    4a5a:	e75d      	b.n	4918 <Connect_rx_process+0x28>
		}

		if ( Connect_debug )
    4a5c:	f898 3000 	ldrb.w	r3, [r8]
    4a60:	2b00      	cmp	r3, #0
    4a62:	f43f af59 	beq.w	4918 <Connect_rx_process+0x28>
		{
			print( NL );
    4a66:	480f      	ldr	r0, [pc, #60]	; (4aa4 <Connect_rx_process+0x1b4>)
    4a68:	f003 fa82 	bl	7f70 <_print>
    4a6c:	e754      	b.n	4918 <Connect_rx_process+0x28>
    4a6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a72:	bf00      	nop
    4a74:	40009036 	.word	0x40009036
    4a78:	40009016 	.word	0x40009016
    4a7c:	1fff9d58 	.word	0x1fff9d58
    4a80:	00008952 	.word	0x00008952
    4a84:	1fff9d50 	.word	0x1fff9d50
    4a88:	000099c5 	.word	0x000099c5
    4a8c:	000099cc 	.word	0x000099cc
    4a90:	000099d2 	.word	0x000099d2
    4a94:	000099d8 	.word	0x000099d8
    4a98:	000099de 	.word	0x000099de
    4a9c:	1fff8a08 	.word	0x1fff8a08
    4aa0:	000099e4 	.word	0x000099e4
    4aa4:	0000c0ef 	.word	0x0000c0ef
    4aa8:	1fff90fa 	.word	0x1fff90fa

00004aac <Connect_scan>:
// - Interrupts will deal with most input functions
// - Used to send queries
// - SyncEvent is sent immediately once the current command is sent
// - SyncEvent is also blocking until sent
void Connect_scan()
{
    4aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Check if initially configured as a slave and usb comes up
	// Then reconfigure as a master
	if ( !Connect_master && Output_Available && !Connect_override )
    4aae:	4b64      	ldr	r3, [pc, #400]	; (4c40 <Connect_scan+0x194>)
    4ab0:	781a      	ldrb	r2, [r3, #0]
    4ab2:	461c      	mov	r4, r3
    4ab4:	b942      	cbnz	r2, 4ac8 <Connect_scan+0x1c>
    4ab6:	4b63      	ldr	r3, [pc, #396]	; (4c44 <Connect_scan+0x198>)
    4ab8:	781a      	ldrb	r2, [r3, #0]
    4aba:	b12a      	cbz	r2, 4ac8 <Connect_scan+0x1c>
    4abc:	4a62      	ldr	r2, [pc, #392]	; (4c48 <Connect_scan+0x19c>)
    4abe:	7812      	ldrb	r2, [r2, #0]
    4ac0:	b912      	cbnz	r2, 4ac8 <Connect_scan+0x1c>
	{
		Connect_setup( Output_Available );
    4ac2:	7818      	ldrb	r0, [r3, #0]
    4ac4:	f7ff fe34 	bl	4730 <Connect_setup>
	}

	// Limit how often we do cable checks
	//uint32_t time_compare = 0x007; // Used for debugging cables -HaaTa
	uint32_t time_compare = 0x7FF; // Must be all 1's, 0x3FF is valid, 0x4FF is not
	uint32_t current_time = systick_millis_count;
    4ac8:	4b60      	ldr	r3, [pc, #384]	; (4c4c <Connect_scan+0x1a0>)
	if ( Connect_lastCheck != current_time
    4aca:	4a61      	ldr	r2, [pc, #388]	; (4c50 <Connect_scan+0x1a4>)
	}

	// Limit how often we do cable checks
	//uint32_t time_compare = 0x007; // Used for debugging cables -HaaTa
	uint32_t time_compare = 0x7FF; // Must be all 1's, 0x3FF is valid, 0x4FF is not
	uint32_t current_time = systick_millis_count;
    4acc:	681b      	ldr	r3, [r3, #0]
	if ( Connect_lastCheck != current_time
    4ace:	6811      	ldr	r1, [r2, #0]
    4ad0:	428b      	cmp	r3, r1
    4ad2:	d014      	beq.n	4afe <Connect_scan+0x52>
		&& ( current_time & time_compare ) == time_compare
    4ad4:	f3c3 000a 	ubfx	r0, r3, #0, #11
    4ad8:	f240 71ff 	movw	r1, #2047	; 0x7ff
    4adc:	4288      	cmp	r0, r1
    4ade:	d10e      	bne.n	4afe <Connect_scan+0x52>
	{
		// Make sure we don't double check if the clock speed is too high
		Connect_lastCheck = current_time;

		// Send a cable check command of 2 bytes
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    4ae0:	2002      	movs	r0, #2
	if ( Connect_lastCheck != current_time
		&& ( current_time & time_compare ) == time_compare
	)
	{
		// Make sure we don't double check if the clock speed is too high
		Connect_lastCheck = current_time;
    4ae2:	6013      	str	r3, [r2, #0]

		// Send a cable check command of 2 bytes
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    4ae4:	f7ff fbc0 	bl	4268 <Connect_send_CableCheck>

		// If this is a slave, and we don't have an id yeth
		// Don't bother sending if there are cable issues
		if ( !Connect_master && Connect_id == 0xFF && Connect_cableOkMaster )
    4ae8:	7823      	ldrb	r3, [r4, #0]
    4aea:	b943      	cbnz	r3, 4afe <Connect_scan+0x52>
    4aec:	4b59      	ldr	r3, [pc, #356]	; (4c54 <Connect_scan+0x1a8>)
    4aee:	781b      	ldrb	r3, [r3, #0]
    4af0:	2bff      	cmp	r3, #255	; 0xff
    4af2:	d104      	bne.n	4afe <Connect_scan+0x52>
    4af4:	4b58      	ldr	r3, [pc, #352]	; (4c58 <Connect_scan+0x1ac>)
    4af6:	781b      	ldrb	r3, [r3, #0]
    4af8:	b10b      	cbz	r3, 4afe <Connect_scan+0x52>
		{
			Connect_send_IdRequest();
    4afa:	f7ff fbf9 	bl	42f0 <Connect_send_IdRequest>
		}
	}

	// Only process commands if uarts have been configured
	if ( uarts_configured )
    4afe:	4b57      	ldr	r3, [pc, #348]	; (4c5c <Connect_scan+0x1b0>)
    4b00:	781b      	ldrb	r3, [r3, #0]
    4b02:	2b00      	cmp	r3, #0
    4b04:	f000 809a 	beq.w	4c3c <Connect_scan+0x190>
	{
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
    4b08:	4d55      	ldr	r5, [pc, #340]	; (4c60 <Connect_scan+0x1b4>)
    4b0a:	78ab      	ldrb	r3, [r5, #2]
    4b0c:	b923      	cbnz	r3, 4b18 <Connect_scan+0x6c>
			uart_fillTxFifo( 0 );
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
    4b0e:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    4b12:	2b00      	cmp	r3, #0
    4b14:	d143      	bne.n	4b9e <Connect_scan+0xf2>
    4b16:	e045      	b.n	4ba4 <Connect_scan+0xf8>
	// Only process commands if uarts have been configured
	if ( uarts_configured )
	{
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
    4b18:	4e52      	ldr	r6, [pc, #328]	; (4c64 <Connect_scan+0x1b8>)
    4b1a:	7833      	ldrb	r3, [r6, #0]
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	d1f6      	bne.n	4b0e <Connect_scan+0x62>
			uart_fillTxFifo( 0 );
    4b20:	4b51      	ldr	r3, [pc, #324]	; (4c68 <Connect_scan+0x1bc>)
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
    4b28:	109c      	asrs	r4, r3, #2
    4b2a:	b10b      	cbz	r3, 4b30 <Connect_scan+0x84>
    4b2c:	b2e4      	uxtb	r4, r4
    4b2e:	e000      	b.n	4b32 <Connect_scan+0x86>
    4b30:	2401      	movs	r4, #1
    4b32:	4b4e      	ldr	r3, [pc, #312]	; (4c6c <Connect_scan+0x1c0>)
    4b34:	781b      	ldrb	r3, [r3, #0]
    4b36:	b1bb      	cbz	r3, 4b68 <Connect_scan+0xbc>
    4b38:	484d      	ldr	r0, [pc, #308]	; (4c70 <Connect_scan+0x1c4>)
    4b3a:	f003 fa19 	bl	7f70 <_print>
    4b3e:	2101      	movs	r1, #1
    4b40:	4620      	mov	r0, r4
    4b42:	f003 fab8 	bl	80b6 <printHex_op>
    4b46:	484b      	ldr	r0, [pc, #300]	; (4c74 <Connect_scan+0x1c8>)
    4b48:	f003 fa12 	bl	7f70 <_print>
    4b4c:	2101      	movs	r1, #1
    4b4e:	7830      	ldrb	r0, [r6, #0]
    4b50:	f003 fab1 	bl	80b6 <printHex_op>
    4b54:	4847      	ldr	r0, [pc, #284]	; (4c74 <Connect_scan+0x1c8>)
    4b56:	f003 fa0b 	bl	7f70 <_print>
    4b5a:	78a8      	ldrb	r0, [r5, #2]
    4b5c:	2101      	movs	r1, #1
    4b5e:	f003 faaa 	bl	80b6 <printHex_op>
    4b62:	4845      	ldr	r0, [pc, #276]	; (4c78 <Connect_scan+0x1cc>)
    4b64:	f003 fa04 	bl	7f70 <_print>
    4b68:	7833      	ldrb	r3, [r6, #0]
    4b6a:	4844      	ldr	r0, [pc, #272]	; (4c7c <Connect_scan+0x1d0>)
    4b6c:	1ae4      	subs	r4, r4, r3
    4b6e:	4b3c      	ldr	r3, [pc, #240]	; (4c60 <Connect_scan+0x1b4>)
    4b70:	b2e4      	uxtb	r4, r4
    4b72:	2600      	movs	r6, #0
    4b74:	2c00      	cmp	r4, #0
    4b76:	d0ca      	beq.n	4b0e <Connect_scan+0x62>
    4b78:	78aa      	ldrb	r2, [r5, #2]
    4b7a:	2a00      	cmp	r2, #0
    4b7c:	d0c7      	beq.n	4b0e <Connect_scan+0x62>
    4b7e:	7819      	ldrb	r1, [r3, #0]
    4b80:	1c4f      	adds	r7, r1, #1
    4b82:	4419      	add	r1, r3
    4b84:	701f      	strb	r7, [r3, #0]
    4b86:	78c9      	ldrb	r1, [r1, #3]
    4b88:	7001      	strb	r1, [r0, #0]
    4b8a:	3a01      	subs	r2, #1
    4b8c:	709a      	strb	r2, [r3, #2]
    4b8e:	f993 2000 	ldrsb.w	r2, [r3]
    4b92:	3c01      	subs	r4, #1
    4b94:	2a00      	cmp	r2, #0
    4b96:	bfb8      	it	lt
    4b98:	701e      	strblt	r6, [r3, #0]
    4b9a:	b2e4      	uxtb	r4, r4
    4b9c:	e7ea      	b.n	4b74 <Connect_scan+0xc8>
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
    4b9e:	4e38      	ldr	r6, [pc, #224]	; (4c80 <Connect_scan+0x1d4>)
    4ba0:	7833      	ldrb	r3, [r6, #0]
    4ba2:	b13b      	cbz	r3, 4bb4 <Connect_scan+0x108>
			uart_fillTxFifo( 1 );

		// Process Rx Buffers
		Connect_rx_process( 0 );
    4ba4:	2000      	movs	r0, #0
    4ba6:	f7ff fea3 	bl	48f0 <Connect_rx_process>
		Connect_rx_process( 1 );
    4baa:	2001      	movs	r0, #1
	}
}
    4bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
			uart_fillTxFifo( 1 );

		// Process Rx Buffers
		Connect_rx_process( 0 );
		Connect_rx_process( 1 );
    4bb0:	f7ff be9e 	b.w	48f0 <Connect_rx_process>
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
			uart_fillTxFifo( 0 );
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
			uart_fillTxFifo( 1 );
    4bb4:	4b33      	ldr	r3, [pc, #204]	; (4c84 <Connect_scan+0x1d8>)
    4bb6:	781b      	ldrb	r3, [r3, #0]
    4bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    4bbc:	109c      	asrs	r4, r3, #2
    4bbe:	b10b      	cbz	r3, 4bc4 <Connect_scan+0x118>
    4bc0:	b2e4      	uxtb	r4, r4
    4bc2:	e000      	b.n	4bc6 <Connect_scan+0x11a>
    4bc4:	2401      	movs	r4, #1
    4bc6:	4b29      	ldr	r3, [pc, #164]	; (4c6c <Connect_scan+0x1c0>)
    4bc8:	781b      	ldrb	r3, [r3, #0]
    4bca:	b1c3      	cbz	r3, 4bfe <Connect_scan+0x152>
    4bcc:	482e      	ldr	r0, [pc, #184]	; (4c88 <Connect_scan+0x1dc>)
    4bce:	f003 f9cf 	bl	7f70 <_print>
    4bd2:	2101      	movs	r1, #1
    4bd4:	4620      	mov	r0, r4
    4bd6:	f003 fa6e 	bl	80b6 <printHex_op>
    4bda:	4826      	ldr	r0, [pc, #152]	; (4c74 <Connect_scan+0x1c8>)
    4bdc:	f003 f9c8 	bl	7f70 <_print>
    4be0:	2101      	movs	r1, #1
    4be2:	7830      	ldrb	r0, [r6, #0]
    4be4:	f003 fa67 	bl	80b6 <printHex_op>
    4be8:	4822      	ldr	r0, [pc, #136]	; (4c74 <Connect_scan+0x1c8>)
    4bea:	f003 f9c1 	bl	7f70 <_print>
    4bee:	f895 0085 	ldrb.w	r0, [r5, #133]	; 0x85
    4bf2:	2101      	movs	r1, #1
    4bf4:	f003 fa5f 	bl	80b6 <printHex_op>
    4bf8:	481f      	ldr	r0, [pc, #124]	; (4c78 <Connect_scan+0x1cc>)
    4bfa:	f003 f9b9 	bl	7f70 <_print>
    4bfe:	7833      	ldrb	r3, [r6, #0]
    4c00:	4e22      	ldr	r6, [pc, #136]	; (4c8c <Connect_scan+0x1e0>)
    4c02:	1ae4      	subs	r4, r4, r3
    4c04:	4b16      	ldr	r3, [pc, #88]	; (4c60 <Connect_scan+0x1b4>)
    4c06:	b2e4      	uxtb	r4, r4
    4c08:	2700      	movs	r7, #0
    4c0a:	2c00      	cmp	r4, #0
    4c0c:	d0ca      	beq.n	4ba4 <Connect_scan+0xf8>
    4c0e:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    4c12:	2a00      	cmp	r2, #0
    4c14:	d0c6      	beq.n	4ba4 <Connect_scan+0xf8>
    4c16:	f893 1083 	ldrb.w	r1, [r3, #131]	; 0x83
    4c1a:	1c48      	adds	r0, r1, #1
    4c1c:	4419      	add	r1, r3
    4c1e:	3a01      	subs	r2, #1
    4c20:	f891 1086 	ldrb.w	r1, [r1, #134]	; 0x86
    4c24:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
    4c28:	3c01      	subs	r4, #1
    4c2a:	7031      	strb	r1, [r6, #0]
    4c2c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    4c30:	0602      	lsls	r2, r0, #24
    4c32:	bf48      	it	mi
    4c34:	f883 7083 	strbmi.w	r7, [r3, #131]	; 0x83
    4c38:	b2e4      	uxtb	r4, r4
    4c3a:	e7e6      	b.n	4c0a <Connect_scan+0x15e>
    4c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c3e:	bf00      	nop
    4c40:	1fff9101 	.word	0x1fff9101
    4c44:	1fff91ec 	.word	0x1fff91ec
    4c48:	1fff9100 	.word	0x1fff9100
    4c4c:	1fff90c4 	.word	0x1fff90c4
    4c50:	1fff90e4 	.word	0x1fff90e4
    4c54:	1fff8a05 	.word	0x1fff8a05
    4c58:	1fff90e8 	.word	0x1fff90e8
    4c5c:	1fff90e9 	.word	0x1fff90e9
    4c60:	1fff9c26 	.word	0x1fff9c26
    4c64:	4006a014 	.word	0x4006a014
    4c68:	4006a010 	.word	0x4006a010
    4c6c:	1fff90fa 	.word	0x1fff90fa
    4c70:	00009a0f 	.word	0x00009a0f
    4c74:	000096b0 	.word	0x000096b0
    4c78:	0000c0ef 	.word	0x0000c0ef
    4c7c:	4006a007 	.word	0x4006a007
    4c80:	4006b014 	.word	0x4006b014
    4c84:	4006b010 	.word	0x4006b010
    4c88:	00009a1b 	.word	0x00009a1b
    4c8c:	4006b007 	.word	0x4006b007

00004c90 <Connect_currentChange>:
}


// Called by parent Scan module whenever the available current changes
void Connect_currentChange( unsigned int current )
{
    4c90:	4770      	bx	lr
    4c92:	0000      	movs	r0, r0

00004c94 <Scan_setup>:

// ----- Functions -----

// Setup
inline void Scan_setup()
{
    4c94:	b508      	push	{r3, lr}
	// Setup UART Connect, if Output_Available, this is the master node
	Connect_setup( Output_Available );
    4c96:	4b07      	ldr	r3, [pc, #28]	; (4cb4 <Scan_setup+0x20>)
    4c98:	7818      	ldrb	r0, [r3, #0]
    4c9a:	f7ff fd49 	bl	4730 <Connect_setup>

	// Setup GPIO pins for matrix scanning
	Matrix_setup();
    4c9e:	f7fe fa45 	bl	312c <Matrix_setup>

	// Setup ISSI chip to control the leds
	LED_setup();
    4ca2:	f7fd fed9 	bl	2a58 <LED_setup>

	// Setup the ST/NHD lcd display
	LCD_setup();
    4ca6:	f7fe fdad 	bl	3804 <LCD_setup>

	// Reset scan count
	Scan_scanCount = 0;
    4caa:	4b03      	ldr	r3, [pc, #12]	; (4cb8 <Scan_setup+0x24>)
    4cac:	2200      	movs	r2, #0
    4cae:	801a      	strh	r2, [r3, #0]
    4cb0:	bd08      	pop	{r3, pc}
    4cb2:	bf00      	nop
    4cb4:	1fff91ec 	.word	0x1fff91ec
    4cb8:	1fff9102 	.word	0x1fff9102

00004cbc <Scan_loop>:
}


// Main Detection Loop
inline uint8_t Scan_loop()
{
    4cbc:	b508      	push	{r3, lr}
	// Scan Matrix
	Matrix_scan( Scan_scanCount++ );
    4cbe:	4b07      	ldr	r3, [pc, #28]	; (4cdc <Scan_loop+0x20>)
    4cc0:	8818      	ldrh	r0, [r3, #0]
    4cc2:	1c42      	adds	r2, r0, #1
    4cc4:	801a      	strh	r2, [r3, #0]
    4cc6:	f7fe fa9b 	bl	3200 <Matrix_scan>

	// Process any interconnect commands
	Connect_scan();
    4cca:	f7ff feef 	bl	4aac <Connect_scan>

	// Process any LED events
	LED_scan();
    4cce:	f7fe f879 	bl	2dc4 <LED_scan>

	// Process any LCD events
	LCD_scan();
    4cd2:	f7fe fe21 	bl	3918 <LCD_scan>

	return 0;
}
    4cd6:	2000      	movs	r0, #0
    4cd8:	bd08      	pop	{r3, pc}
    4cda:	bf00      	nop
    4cdc:	1fff9102 	.word	0x1fff9102

00004ce0 <Scan_finishedWithMacro>:


// Signal from Macro Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithMacro( uint8_t sentKeys )
{
    4ce0:	4770      	bx	lr
    4ce2:	0000      	movs	r0, r0

00004ce4 <Scan_finishedWithOutput>:
// Signal from Output Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithOutput( uint8_t sentKeys )
{
	// Reset scan loop indicator (resets each key debounce state)
	// TODO should this occur after USB send or Macro processing?
	Scan_scanCount = 0;
    4ce4:	4b01      	ldr	r3, [pc, #4]	; (4cec <Scan_finishedWithOutput+0x8>)
    4ce6:	2200      	movs	r2, #0
    4ce8:	801a      	strh	r2, [r3, #0]
    4cea:	4770      	bx	lr
    4cec:	1fff9102 	.word	0x1fff9102

00004cf0 <Scan_currentChange>:


// Signal from the Output Module that the available current has changed
// current - mA
void Scan_currentChange( unsigned int current )
{
    4cf0:	b510      	push	{r4, lr}
    4cf2:	4604      	mov	r4, r0
	// Indicate to all submodules current change
	Connect_currentChange( current );
    4cf4:	f7ff ffcc 	bl	4c90 <Connect_currentChange>
	Matrix_currentChange( current );
    4cf8:	4620      	mov	r0, r4
    4cfa:	f7fe fbe9 	bl	34d0 <Matrix_currentChange>
	LED_currentChange( current );
    4cfe:	4620      	mov	r0, r4
    4d00:	f7fe f876 	bl	2df0 <LED_currentChange>
	LCD_currentChange( current );
    4d04:	4620      	mov	r0, r4
}
    4d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
	// Indicate to all submodules current change
	Connect_currentChange( current );
	Matrix_currentChange( current );
	LED_currentChange( current );
	LCD_currentChange( current );
    4d0a:	f7fe be41 	b.w	3990 <LCD_currentChange>
    4d0e:	0000      	movs	r0, r0

00004d10 <cliFunc_capList>:


// ----- CLI Command Functions -----

void cliFunc_capList( char* args )
{
    4d10:	b570      	push	{r4, r5, r6, lr}
	print( NL );
    4d12:	4810      	ldr	r0, [pc, #64]	; (4d54 <cliFunc_capList+0x44>)
		printHex( cap );
		print(" - ");

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
    4d14:	4e10      	ldr	r6, [pc, #64]	; (4d58 <cliFunc_capList+0x48>)

// ----- CLI Command Functions -----

void cliFunc_capList( char* args )
{
	print( NL );
    4d16:	f003 f92b 	bl	7f70 <_print>
	info_msg("Capabilities List ");
    4d1a:	4810      	ldr	r0, [pc, #64]	; (4d5c <cliFunc_capList+0x4c>)
    4d1c:	f003 f928 	bl	7f70 <_print>
	printHex( CapabilitiesNum );
    4d20:	2101      	movs	r1, #1
    4d22:	2011      	movs	r0, #17
    4d24:	f003 f9c7 	bl	80b6 <printHex_op>
    4d28:	2400      	movs	r4, #0

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
	{
		print( NL "\t" );
    4d2a:	480d      	ldr	r0, [pc, #52]	; (4d60 <cliFunc_capList+0x50>)
    4d2c:	f003 f920 	bl	7f70 <_print>
		printHex( cap );
    4d30:	2101      	movs	r1, #1
    4d32:	b2a0      	uxth	r0, r4
    4d34:	f003 f9bf 	bl	80b6 <printHex_op>
		print(" - ");
    4d38:	480a      	ldr	r0, [pc, #40]	; (4d64 <cliFunc_capList+0x54>)
    4d3a:	f003 f919 	bl	7f70 <_print>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
		capability( 0, 0xFF, 0xFF, 0 );
    4d3e:	2300      	movs	r3, #0
    4d40:	22ff      	movs	r2, #255	; 0xff
    4d42:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
    4d46:	4611      	mov	r1, r2
    4d48:	4618      	mov	r0, r3
    4d4a:	3401      	adds	r4, #1
    4d4c:	47a8      	blx	r5
	print( NL );
	info_msg("Capabilities List ");
	printHex( CapabilitiesNum );

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
    4d4e:	2c11      	cmp	r4, #17
    4d50:	d1eb      	bne.n	4d2a <cliFunc_capList+0x1a>
		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
		capability( 0, 0xFF, 0xFF, 0 );
	}
}
    4d52:	bd70      	pop	{r4, r5, r6, pc}
    4d54:	0000c0ef 	.word	0x0000c0ef
    4d58:	0000a2a8 	.word	0x0000a2a8
    4d5c:	0000ad7e 	.word	0x0000ad7e
    4d60:	0000ada3 	.word	0x0000ada3
    4d64:	00009a17 	.word	0x00009a17

00004d68 <cliFunc_macroStep>:
		}
	}
}

void cliFunc_macroStep( char* args )
{
    4d68:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    4d6a:	aa01      	add	r2, sp, #4
    4d6c:	4669      	mov	r1, sp
    4d6e:	f002 fe1f 	bl	79b0 <CLI_argumentIsolation>

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );
    4d72:	9800      	ldr	r0, [sp, #0]
    4d74:	f003 fa0e 	bl	8194 <numToInt>
    4d78:	b2c0      	uxtb	r0, r0

	if ( count == 0 )
    4d7a:	2800      	cmp	r0, #0
		count = 1;

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    4d7c:	4b03      	ldr	r3, [pc, #12]	; (4d8c <cliFunc_macroStep+0x24>)

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );

	if ( count == 0 )
		count = 1;
    4d7e:	bf08      	it	eq
    4d80:	2001      	moveq	r0, #1

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    4d82:	8018      	strh	r0, [r3, #0]
}
    4d84:	b003      	add	sp, #12
    4d86:	f85d fb04 	ldr.w	pc, [sp], #4
    4d8a:	bf00      	nop
    4d8c:	1fff9106 	.word	0x1fff9106

00004d90 <cliFunc_capSelect>:
		capability( 0, 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    4d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
			{
				if ( CapabilitiesList[ cap ].func == (const void*)Output_flashMode_capability )
    4d94:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4e94 <cliFunc_capSelect+0x104>
void cliFunc_capSelect( char* args )
{
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4d98:	9001      	str	r0, [sp, #4]
    4d9a:	2700      	movs	r7, #0
		capability( 0, 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    4d9c:	4604      	mov	r4, r0
	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;

	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
    4d9e:	46bb      	mov	fp, r7
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;
    4da0:	46b8      	mov	r8, r7
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
    4da2:	2602      	movs	r6, #2

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
			{
				if ( CapabilitiesList[ cap ].func == (const void*)Output_flashMode_capability )
    4da4:	46ca      	mov	sl, r9

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4da6:	9801      	ldr	r0, [sp, #4]
    4da8:	aa01      	add	r2, sp, #4
    4daa:	4669      	mov	r1, sp
    4dac:	f002 fe00 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		// Extra arguments are ignored
		if ( *arg1Ptr == '\0' )
    4db0:	9800      	ldr	r0, [sp, #0]
    4db2:	7803      	ldrb	r3, [r0, #0]
    4db4:	2b00      	cmp	r3, #0
    4db6:	d05b      	beq.n	4e70 <cliFunc_capSelect+0xe0>
			break;

		// For the first argument, choose the capability
		if ( c == 0 ) switch ( arg1Ptr[0] )
    4db8:	f017 0fff 	tst.w	r7, #255	; 0xff
    4dbc:	d10d      	bne.n	4dda <cliFunc_capSelect+0x4a>
    4dbe:	2b4b      	cmp	r3, #75	; 0x4b
    4dc0:	d10b      	bne.n	4dda <cliFunc_capSelect+0x4a>
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    4dc2:	3001      	adds	r0, #1
    4dc4:	f003 f9e6 	bl	8194 <numToInt>
    4dc8:	fa5f f880 	uxtb.w	r8, r0

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4dcc:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
			continue;
    4dd0:	465d      	mov	r5, fp
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4dd2:	791b      	ldrb	r3, [r3, #4]
    4dd4:	441e      	add	r6, r3
    4dd6:	b2f6      	uxtb	r6, r6
			continue;
    4dd8:	e044      	b.n	4e64 <cliFunc_capSelect+0xd4>
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    4dda:	f003 f9db 	bl	8194 <numToInt>
    4dde:	f10b 0501 	add.w	r5, fp, #1
    4de2:	b2ed      	uxtb	r5, r5

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    4de4:	42b5      	cmp	r5, r6
			continue;
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    4de6:	f804 000b 	strb.w	r0, [r4, fp]

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    4dea:	d13b      	bne.n	4e64 <cliFunc_capSelect+0xd4>
		{
			// Indicate that the capability was called
			print( NL );
    4dec:	4822      	ldr	r0, [pc, #136]	; (4e78 <cliFunc_capSelect+0xe8>)
    4dee:	f003 f8bf 	bl	7f70 <_print>
			info_msg("K");
    4df2:	4822      	ldr	r0, [pc, #136]	; (4e7c <cliFunc_capSelect+0xec>)
    4df4:	f003 f8bc 	bl	7f70 <_print>
			printInt8( cap );
    4df8:	4640      	mov	r0, r8
    4dfa:	f003 f8e8 	bl	7fce <printInt8>
			print(" - ");
    4dfe:	4820      	ldr	r0, [pc, #128]	; (4e80 <cliFunc_capSelect+0xf0>)
    4e00:	f003 f8b6 	bl	7f70 <_print>
			printHex( argSet[0] );
    4e04:	2101      	movs	r1, #1
    4e06:	7820      	ldrb	r0, [r4, #0]
    4e08:	f003 f955 	bl	80b6 <printHex_op>
			print(" - ");
    4e0c:	481c      	ldr	r0, [pc, #112]	; (4e80 <cliFunc_capSelect+0xf0>)
    4e0e:	f003 f8af 	bl	7f70 <_print>
			printHex( argSet[1] );
    4e12:	2101      	movs	r1, #1
    4e14:	7860      	ldrb	r0, [r4, #1]
    4e16:	f003 f94e 	bl	80b6 <printHex_op>
			print(" - ");
    4e1a:	4819      	ldr	r0, [pc, #100]	; (4e80 <cliFunc_capSelect+0xf0>)
    4e1c:	f003 f8a8 	bl	7f70 <_print>
			printHex( argSet[2] );
    4e20:	2101      	movs	r1, #1
    4e22:	78a0      	ldrb	r0, [r4, #2]
    4e24:	f003 f947 	bl	80b6 <printHex_op>
			print( "..." NL );
    4e28:	4816      	ldr	r0, [pc, #88]	; (4e84 <cliFunc_capSelect+0xf4>)
    4e2a:	f003 f8a1 	bl	7f70 <_print>

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
			{
				if ( CapabilitiesList[ cap ].func == (const void*)Output_flashMode_capability )
    4e2e:	4a16      	ldr	r2, [pc, #88]	; (4e88 <cliFunc_capSelect+0xf8>)
			printHex( argSet[2] );
			print( "..." NL );

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
    4e30:	2300      	movs	r3, #0
			{
				if ( CapabilitiesList[ cap ].func == (const void*)Output_flashMode_capability )
    4e32:	f859 1033 	ldr.w	r1, [r9, r3, lsl #3]
    4e36:	4291      	cmp	r1, r2
    4e38:	d109      	bne.n	4e4e <cliFunc_capSelect+0xbe>
				{
					print( NL );
    4e3a:	480f      	ldr	r0, [pc, #60]	; (4e78 <cliFunc_capSelect+0xe8>)
    4e3c:	f003 f898 	bl	7f70 <_print>
					warn_print("flashModeEnabled not set, cancelling firmware reload...");
    4e40:	4812      	ldr	r0, [pc, #72]	; (4e8c <cliFunc_capSelect+0xfc>)
    4e42:	f003 f895 	bl	7f70 <_print>
					info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    4e46:	4812      	ldr	r0, [pc, #72]	; (4e90 <cliFunc_capSelect+0x100>)
    4e48:	f003 f892 	bl	7f70 <_print>
    4e4c:	e010      	b.n	4e70 <cliFunc_capSelect+0xe0>
			printHex( argSet[2] );
			print( "..." NL );

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
    4e4e:	3301      	adds	r3, #1
    4e50:	2b11      	cmp	r3, #17
    4e52:	d1ee      	bne.n	4e32 <cliFunc_capSelect+0xa2>
				}
			}

			void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
				(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( 0, argSet[0], argSet[1], &argSet[2] );
    4e54:	f85a 6038 	ldr.w	r6, [sl, r8, lsl #3]
    4e58:	7862      	ldrb	r2, [r4, #1]
    4e5a:	7821      	ldrb	r1, [r4, #0]
    4e5c:	1ca3      	adds	r3, r4, #2
    4e5e:	2000      	movs	r0, #0
    4e60:	47b0      	blx	r6
    4e62:	462e      	mov	r6, r5
	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
	uint8_t *argSet = (uint8_t*)args;

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
    4e64:	42ae      	cmp	r6, r5
    4e66:	f107 0701 	add.w	r7, r7, #1
    4e6a:	d901      	bls.n	4e70 <cliFunc_capSelect+0xe0>
    4e6c:	46ab      	mov	fp, r5
    4e6e:	e79a      	b.n	4da6 <cliFunc_capSelect+0x16>
			void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
				(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( 0, argSet[0], argSet[1], &argSet[2] );
		}
	}
}
    4e70:	b003      	add	sp, #12
    4e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e76:	bf00      	nop
    4e78:	0000c0ef 	.word	0x0000c0ef
    4e7c:	0000ada7 	.word	0x0000ada7
    4e80:	00009a17 	.word	0x00009a17
    4e84:	0000ae04 	.word	0x0000ae04
    4e88:	000061ad 	.word	0x000061ad
    4e8c:	0000adbb 	.word	0x0000adbb
    4e90:	0000ae0a 	.word	0x0000ae0a
    4e94:	0000a2a8 	.word	0x0000a2a8

00004e98 <cliFunc_layerDebug>:
		}
	}
}

void cliFunc_layerDebug( char *args )
{
    4e98:	b510      	push	{r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    4e9a:	4c08      	ldr	r4, [pc, #32]	; (4ebc <cliFunc_layerDebug+0x24>)

	print( NL );
    4e9c:	4808      	ldr	r0, [pc, #32]	; (4ec0 <cliFunc_layerDebug+0x28>)
}

void cliFunc_layerDebug( char *args )
{
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    4e9e:	7823      	ldrb	r3, [r4, #0]
    4ea0:	fab3 f383 	clz	r3, r3
    4ea4:	095b      	lsrs	r3, r3, #5
    4ea6:	7023      	strb	r3, [r4, #0]

	print( NL );
    4ea8:	f003 f862 	bl	7f70 <_print>
	info_msg("Layer Debug Mode: ");
    4eac:	4805      	ldr	r0, [pc, #20]	; (4ec4 <cliFunc_layerDebug+0x2c>)
    4eae:	f003 f85f 	bl	7f70 <_print>
	printInt8( layerDebugMode );
    4eb2:	7820      	ldrb	r0, [r4, #0]
}
    4eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;

	print( NL );
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
    4eb8:	f003 b889 	b.w	7fce <printInt8>
    4ebc:	1fff9115 	.word	0x1fff9115
    4ec0:	0000c0ef 	.word	0x0000c0ef
    4ec4:	0000ae51 	.word	0x0000ae51

00004ec8 <cliFunc_layerState>:
		printHex( LayerIndex[ layer ].last );
	}
}

void cliFunc_layerState( char* args )
{
    4ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t arg1 = 0;
	uint8_t arg2 = 0;

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
    4eca:	2400      	movs	r4, #0
void cliFunc_layerState( char* args )
{
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4ecc:	9001      	str	r0, [sp, #4]

	uint8_t arg1 = 0;
    4ece:	4625      	mov	r5, r4

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4ed0:	9801      	ldr	r0, [sp, #4]
    4ed2:	aa01      	add	r2, sp, #4
    4ed4:	4669      	mov	r1, sp
    4ed6:	f002 fd6b 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    4eda:	9800      	ldr	r0, [sp, #0]
    4edc:	7803      	ldrb	r3, [r0, #0]
    4ede:	b30b      	cbz	r3, 4f24 <cliFunc_layerState+0x5c>
			break;

		switch ( c )
    4ee0:	2c01      	cmp	r4, #1
    4ee2:	d006      	beq.n	4ef2 <cliFunc_layerState+0x2a>
		{
		// First argument (e.g. L1)
		case 0:
			if ( arg1Ptr[0] != 'L' )
    4ee4:	2b4c      	cmp	r3, #76	; 0x4c
    4ee6:	d11d      	bne.n	4f24 <cliFunc_layerState+0x5c>
				return;

			arg1 = (uint8_t)numToInt( &arg1Ptr[1] );
    4ee8:	3001      	adds	r0, #1
    4eea:	f003 f953 	bl	8194 <numToInt>
    4eee:	b2c5      	uxtb	r5, r0
			break;
    4ef0:	e014      	b.n	4f1c <cliFunc_layerState+0x54>
		// Second argument (e.g. 4)
		case 1:
			arg2 = (uint8_t)numToInt( arg1Ptr );
    4ef2:	f003 f94f 	bl	8194 <numToInt>
    4ef6:	b2c6      	uxtb	r6, r0

			// Display operation (to indicate that it worked)
			print( NL );
    4ef8:	480b      	ldr	r0, [pc, #44]	; (4f28 <cliFunc_layerState+0x60>)
    4efa:	f003 f839 	bl	7f70 <_print>
			info_msg("Setting Layer L");
    4efe:	480b      	ldr	r0, [pc, #44]	; (4f2c <cliFunc_layerState+0x64>)
    4f00:	f003 f836 	bl	7f70 <_print>
			printInt8( arg1 );
    4f04:	4628      	mov	r0, r5
    4f06:	f003 f862 	bl	7fce <printInt8>
			print(" to - ");
    4f0a:	4809      	ldr	r0, [pc, #36]	; (4f30 <cliFunc_layerState+0x68>)
    4f0c:	f003 f830 	bl	7f70 <_print>
			printHex( arg2 );
    4f10:	4621      	mov	r1, r4
    4f12:	4630      	mov	r0, r6
    4f14:	f003 f8cf 	bl	80b6 <printHex_op>

			// Set the layer state
			LayerState[ arg1 ] = arg2;
    4f18:	4b06      	ldr	r3, [pc, #24]	; (4f34 <cliFunc_layerState+0x6c>)
    4f1a:	555e      	strb	r6, [r3, r5]

	uint8_t arg1 = 0;
	uint8_t arg2 = 0;

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
    4f1c:	3401      	adds	r4, #1
    4f1e:	b2e4      	uxtb	r4, r4
    4f20:	2c02      	cmp	r4, #2
    4f22:	d1d5      	bne.n	4ed0 <cliFunc_layerState+0x8>
			// Set the layer state
			LayerState[ arg1 ] = arg2;
			break;
		}
	}
}
    4f24:	b002      	add	sp, #8
    4f26:	bd70      	pop	{r4, r5, r6, pc}
    4f28:	0000c0ef 	.word	0x0000c0ef
    4f2c:	0000ae76 	.word	0x0000ae76
    4f30:	0000ae98 	.word	0x0000ae98
    4f34:	1fffa084 	.word	0x1fffa084

00004f38 <cliFunc_macroDebug>:

void cliFunc_macroDebug( char* args )
{
    4f38:	b510      	push	{r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    4f3a:	4c08      	ldr	r4, [pc, #32]	; (4f5c <cliFunc_macroDebug+0x24>)

	print( NL );
    4f3c:	4808      	ldr	r0, [pc, #32]	; (4f60 <cliFunc_macroDebug+0x28>)
}

void cliFunc_macroDebug( char* args )
{
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    4f3e:	7823      	ldrb	r3, [r4, #0]
    4f40:	fab3 f383 	clz	r3, r3
    4f44:	095b      	lsrs	r3, r3, #5
    4f46:	7023      	strb	r3, [r4, #0]

	print( NL );
    4f48:	f003 f812 	bl	7f70 <_print>
	info_msg("Macro Debug Mode: ");
    4f4c:	4805      	ldr	r0, [pc, #20]	; (4f64 <cliFunc_macroDebug+0x2c>)
    4f4e:	f003 f80f 	bl	7f70 <_print>
	printInt8( macroDebugMode );
    4f52:	7820      	ldrb	r0, [r4, #0]
}
    4f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;

	print( NL );
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
    4f58:	f003 b839 	b.w	7fce <printInt8>
    4f5c:	1fff9116 	.word	0x1fff9116
    4f60:	0000c0ef 	.word	0x0000c0ef
    4f64:	0000ae9f 	.word	0x0000ae9f

00004f68 <cliFunc_macroProc>:
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}

void cliFunc_macroProc( char* args )
{
    4f68:	b510      	push	{r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    4f6a:	4c08      	ldr	r4, [pc, #32]	; (4f8c <cliFunc_macroProc+0x24>)

	print( NL );
    4f6c:	4808      	ldr	r0, [pc, #32]	; (4f90 <cliFunc_macroProc+0x28>)
}

void cliFunc_macroProc( char* args )
{
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    4f6e:	7823      	ldrb	r3, [r4, #0]
    4f70:	fab3 f383 	clz	r3, r3
    4f74:	095b      	lsrs	r3, r3, #5
    4f76:	7023      	strb	r3, [r4, #0]

	print( NL );
    4f78:	f002 fffa 	bl	7f70 <_print>
	info_msg("Macro Processing Mode: ");
    4f7c:	4805      	ldr	r0, [pc, #20]	; (4f94 <cliFunc_macroProc+0x2c>)
    4f7e:	f002 fff7 	bl	7f70 <_print>
	printInt8( macroPauseMode );
    4f82:	7820      	ldrb	r0, [r4, #0]
}
    4f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;

	print( NL );
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
    4f88:	f003 b821 	b.w	7fce <printInt8>
    4f8c:	1fff9104 	.word	0x1fff9104
    4f90:	0000c0ef 	.word	0x0000c0ef
    4f94:	0000aec4 	.word	0x0000aec4

00004f98 <cliFunc_layerList>:
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
    4f98:	b538      	push	{r3, r4, r5, lr}
	print( NL );
    4f9a:	481a      	ldr	r0, [pc, #104]	; (5004 <cliFunc_layerList+0x6c>)
    4f9c:	4d1a      	ldr	r5, [pc, #104]	; (5008 <cliFunc_layerList+0x70>)
    4f9e:	f002 ffe7 	bl	7f70 <_print>
	info_msg("Layer List");
    4fa2:	481a      	ldr	r0, [pc, #104]	; (500c <cliFunc_layerList+0x74>)
    4fa4:	f002 ffe4 	bl	7f70 <_print>
    4fa8:	2400      	movs	r4, #0

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    4faa:	4819      	ldr	r0, [pc, #100]	; (5010 <cliFunc_layerList+0x78>)
    4fac:	f002 ffe0 	bl	7f70 <_print>
		printHex( layer );
    4fb0:	2101      	movs	r1, #1
    4fb2:	b2a0      	uxth	r0, r4
    4fb4:	f003 f87f 	bl	80b6 <printHex_op>
		print(" - ");
    4fb8:	4816      	ldr	r0, [pc, #88]	; (5014 <cliFunc_layerList+0x7c>)
    4fba:	f002 ffd9 	bl	7f70 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    4fbe:	6868      	ldr	r0, [r5, #4]
    4fc0:	f001 fafa 	bl	65b8 <Output_putstr>

		// Default map
		if ( layer == 0 )
    4fc4:	b914      	cbnz	r4, 4fcc <cliFunc_layerList+0x34>
			print(" \033[1m(default)\033[0m");
    4fc6:	4814      	ldr	r0, [pc, #80]	; (5018 <cliFunc_layerList+0x80>)
    4fc8:	f002 ffd2 	bl	7f70 <_print>

		// Layer State
		print( NL "\t\t Layer State: " );
    4fcc:	4813      	ldr	r0, [pc, #76]	; (501c <cliFunc_layerList+0x84>)
    4fce:	f002 ffcf 	bl	7f70 <_print>
		printHex( LayerState[ layer ] );
    4fd2:	4b13      	ldr	r3, [pc, #76]	; (5020 <cliFunc_layerList+0x88>)
    4fd4:	2101      	movs	r1, #1
    4fd6:	5d18      	ldrb	r0, [r3, r4]
    4fd8:	f003 f86d 	bl	80b6 <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    4fdc:	4811      	ldr	r0, [pc, #68]	; (5024 <cliFunc_layerList+0x8c>)
    4fde:	f002 ffc7 	bl	7f70 <_print>
		printHex( LayerIndex[ layer ].first );
    4fe2:	2101      	movs	r1, #1
    4fe4:	7a28      	ldrb	r0, [r5, #8]
    4fe6:	f003 f866 	bl	80b6 <printHex_op>
		print(" -> ");
    4fea:	480f      	ldr	r0, [pc, #60]	; (5028 <cliFunc_layerList+0x90>)
    4fec:	f002 ffc0 	bl	7f70 <_print>
    4ff0:	3401      	adds	r4, #1
		printHex( LayerIndex[ layer ].last );
    4ff2:	7a68      	ldrb	r0, [r5, #9]
    4ff4:	2101      	movs	r1, #1
    4ff6:	f003 f85e 	bl	80b6 <printHex_op>
{
	print( NL );
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
    4ffa:	2c03      	cmp	r4, #3
    4ffc:	f105 050c 	add.w	r5, r5, #12
    5000:	d1d3      	bne.n	4faa <cliFunc_layerList+0x12>
		print(" First -> Last Indices: ");
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
		printHex( LayerIndex[ layer ].last );
	}
}
    5002:	bd38      	pop	{r3, r4, r5, pc}
    5004:	0000c0ef 	.word	0x0000c0ef
    5008:	0000a9b4 	.word	0x0000a9b4
    500c:	0000aeee 	.word	0x0000aeee
    5010:	0000ada3 	.word	0x0000ada3
    5014:	00009a17 	.word	0x00009a17
    5018:	0000af0b 	.word	0x0000af0b
    501c:	0000af1e 	.word	0x0000af1e
    5020:	1fffa084 	.word	0x1fffa084
    5024:	0000af31 	.word	0x0000af31
    5028:	000095a0 	.word	0x000095a0

0000502c <cliFunc_macroList>:
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
}

void cliFunc_macroList( char* args )
{
    502c:	b570      	push	{r4, r5, r6, lr}
	// Show pending key events
	print( NL );
    502e:	4847      	ldr	r0, [pc, #284]	; (514c <cliFunc_macroList+0x120>)
	info_msg("Pending Key Events: ");
	printInt16( (uint16_t)macroTriggerListBufferSize );
    5030:	4c47      	ldr	r4, [pc, #284]	; (5150 <cliFunc_macroList+0x124>)
	print(" : ");
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
	{
		printHex( macroTriggerListBuffer[ key ].scanCode );
    5032:	4e48      	ldr	r6, [pc, #288]	; (5154 <cliFunc_macroList+0x128>)
}

void cliFunc_macroList( char* args )
{
	// Show pending key events
	print( NL );
    5034:	f002 ff9c 	bl	7f70 <_print>
	info_msg("Pending Key Events: ");
    5038:	4847      	ldr	r0, [pc, #284]	; (5158 <cliFunc_macroList+0x12c>)
    503a:	f002 ff99 	bl	7f70 <_print>
	printInt16( (uint16_t)macroTriggerListBufferSize );
    503e:	7820      	ldrb	r0, [r4, #0]
    5040:	f002 ffe3 	bl	800a <printInt16>
	print(" : ");
    5044:	4845      	ldr	r0, [pc, #276]	; (515c <cliFunc_macroList+0x130>)
    5046:	f002 ff93 	bl	7f70 <_print>
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    504a:	2300      	movs	r3, #0
    504c:	7822      	ldrb	r2, [r4, #0]
    504e:	1c5d      	adds	r5, r3, #1
    5050:	b2db      	uxtb	r3, r3
    5052:	429a      	cmp	r2, r3
    5054:	d90b      	bls.n	506e <cliFunc_macroList+0x42>
	{
		printHex( macroTriggerListBuffer[ key ].scanCode );
    5056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    505a:	4433      	add	r3, r6
    505c:	2101      	movs	r1, #1
    505e:	7898      	ldrb	r0, [r3, #2]
    5060:	f003 f829 	bl	80b6 <printHex_op>
		print(" ");
    5064:	483e      	ldr	r0, [pc, #248]	; (5160 <cliFunc_macroList+0x134>)
    5066:	f002 ff83 	bl	7f70 <_print>
    506a:	462b      	mov	r3, r5
    506c:	e7ee      	b.n	504c <cliFunc_macroList+0x20>
	}

	// Show pending trigger macros
	print( NL );
    506e:	4837      	ldr	r0, [pc, #220]	; (514c <cliFunc_macroList+0x120>)
	info_msg("Pending Trigger Macros: ");
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    5070:	4c3c      	ldr	r4, [pc, #240]	; (5164 <cliFunc_macroList+0x138>)
	print(" : ");
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
	{
		printHex( macroTriggerMacroPendingList[ macro ] );
    5072:	4e3d      	ldr	r6, [pc, #244]	; (5168 <cliFunc_macroList+0x13c>)
		printHex( macroTriggerListBuffer[ key ].scanCode );
		print(" ");
	}

	// Show pending trigger macros
	print( NL );
    5074:	f002 ff7c 	bl	7f70 <_print>
	info_msg("Pending Trigger Macros: ");
    5078:	483c      	ldr	r0, [pc, #240]	; (516c <cliFunc_macroList+0x140>)
    507a:	f002 ff79 	bl	7f70 <_print>
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    507e:	8820      	ldrh	r0, [r4, #0]
    5080:	f002 ffc3 	bl	800a <printInt16>
	print(" : ");
    5084:	4835      	ldr	r0, [pc, #212]	; (515c <cliFunc_macroList+0x130>)
    5086:	f002 ff73 	bl	7f70 <_print>
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    508a:	2300      	movs	r3, #0
    508c:	8822      	ldrh	r2, [r4, #0]
    508e:	1c5d      	adds	r5, r3, #1
    5090:	b2db      	uxtb	r3, r3
    5092:	4293      	cmp	r3, r2
    5094:	d209      	bcs.n	50aa <cliFunc_macroList+0x7e>
	{
		printHex( macroTriggerMacroPendingList[ macro ] );
    5096:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
    509a:	2101      	movs	r1, #1
    509c:	f003 f80b 	bl	80b6 <printHex_op>
		print(" ");
    50a0:	482f      	ldr	r0, [pc, #188]	; (5160 <cliFunc_macroList+0x134>)
    50a2:	f002 ff65 	bl	7f70 <_print>
    50a6:	462b      	mov	r3, r5
    50a8:	e7f0      	b.n	508c <cliFunc_macroList+0x60>
	}

	// Show pending result macros
	print( NL );
    50aa:	4828      	ldr	r0, [pc, #160]	; (514c <cliFunc_macroList+0x120>)
	info_msg("Pending Result Macros: ");
	printInt16( (uint16_t)macroResultMacroPendingList.size );
    50ac:	4c30      	ldr	r4, [pc, #192]	; (5170 <cliFunc_macroList+0x144>)
		printHex( macroTriggerMacroPendingList[ macro ] );
		print(" ");
	}

	// Show pending result macros
	print( NL );
    50ae:	f002 ff5f 	bl	7f70 <_print>
	info_msg("Pending Result Macros: ");
    50b2:	4830      	ldr	r0, [pc, #192]	; (5174 <cliFunc_macroList+0x148>)
    50b4:	f002 ff5c 	bl	7f70 <_print>
	printInt16( (uint16_t)macroResultMacroPendingList.size );
    50b8:	f8b4 02e8 	ldrh.w	r0, [r4, #744]	; 0x2e8
    50bc:	f002 ffa5 	bl	800a <printInt16>
	print(" : ");
    50c0:	4826      	ldr	r0, [pc, #152]	; (515c <cliFunc_macroList+0x130>)
    50c2:	f002 ff55 	bl	7f70 <_print>
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    50c6:	4626      	mov	r6, r4
    50c8:	2300      	movs	r3, #0
    50ca:	f8b4 22e8 	ldrh.w	r2, [r4, #744]	; 0x2e8
    50ce:	1c5d      	adds	r5, r3, #1
    50d0:	b2db      	uxtb	r3, r3
    50d2:	4293      	cmp	r3, r2
    50d4:	d20a      	bcs.n	50ec <cliFunc_macroList+0xc0>
	{
		printHex( macroResultMacroPendingList.data[ macro ].index );
    50d6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    50da:	2101      	movs	r1, #1
    50dc:	8898      	ldrh	r0, [r3, #4]
    50de:	f002 ffea 	bl	80b6 <printHex_op>
		print(" ");
    50e2:	481f      	ldr	r0, [pc, #124]	; (5160 <cliFunc_macroList+0x134>)
    50e4:	f002 ff44 	bl	7f70 <_print>
    50e8:	462b      	mov	r3, r5
    50ea:	e7ee      	b.n	50ca <cliFunc_macroList+0x9e>
	}

	// Show available trigger macro indices
	print( NL );
    50ec:	4817      	ldr	r0, [pc, #92]	; (514c <cliFunc_macroList+0x120>)
    50ee:	f002 ff3f 	bl	7f70 <_print>
	info_msg("Trigger Macros Range: T0 -> T");
    50f2:	4821      	ldr	r0, [pc, #132]	; (5178 <cliFunc_macroList+0x14c>)
    50f4:	f002 ff3c 	bl	7f70 <_print>
	printInt16( (uint16_t)TriggerMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    50f8:	205e      	movs	r0, #94	; 0x5e
    50fa:	f002 ff86 	bl	800a <printInt16>

	// Show available result macro indices
	print( NL );
    50fe:	4813      	ldr	r0, [pc, #76]	; (514c <cliFunc_macroList+0x120>)
    5100:	f002 ff36 	bl	7f70 <_print>
	info_msg("Result  Macros Range: R0 -> R");
    5104:	481d      	ldr	r0, [pc, #116]	; (517c <cliFunc_macroList+0x150>)
    5106:	f002 ff33 	bl	7f70 <_print>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    510a:	205c      	movs	r0, #92	; 0x5c
    510c:	f002 ff7d 	bl	800a <printInt16>

	// Show Trigger to Result Macro Links
	print( NL );
    5110:	480e      	ldr	r0, [pc, #56]	; (514c <cliFunc_macroList+0x120>)
    5112:	f002 ff2d 	bl	7f70 <_print>
	info_msg("Trigger : Result Macro Pairs");
    5116:	481a      	ldr	r0, [pc, #104]	; (5180 <cliFunc_macroList+0x154>)
    5118:	f002 ff2a 	bl	7f70 <_print>
    511c:	2400      	movs	r4, #0
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		print( NL );
    511e:	480b      	ldr	r0, [pc, #44]	; (514c <cliFunc_macroList+0x120>)
    5120:	f002 ff26 	bl	7f70 <_print>
		print("\tT");
    5124:	4817      	ldr	r0, [pc, #92]	; (5184 <cliFunc_macroList+0x158>)
    5126:	f002 ff23 	bl	7f70 <_print>
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
    512a:	b2a0      	uxth	r0, r4
    512c:	f002 ff6d 	bl	800a <printInt16>
		print(" : R");
    5130:	4815      	ldr	r0, [pc, #84]	; (5188 <cliFunc_macroList+0x15c>)
    5132:	f002 ff1d 	bl	7f70 <_print>
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
    5136:	4b15      	ldr	r3, [pc, #84]	; (518c <cliFunc_macroList+0x160>)
    5138:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    513c:	3401      	adds	r4, #1
    513e:	7918      	ldrb	r0, [r3, #4]
    5140:	f002 ff63 	bl	800a <printInt16>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)

	// Show Trigger to Result Macro Links
	print( NL );
	info_msg("Trigger : Result Macro Pairs");
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5144:	2c5f      	cmp	r4, #95	; 0x5f
    5146:	d1ea      	bne.n	511e <cliFunc_macroList+0xf2>
		print("\tT");
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
		print(" : R");
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}
    5148:	bd70      	pop	{r4, r5, r6, pc}
    514a:	bf00      	nop
    514c:	0000c0ef 	.word	0x0000c0ef
    5150:	1fff9108 	.word	0x1fff9108
    5154:	1fff9e62 	.word	0x1fff9e62
    5158:	0000af4a 	.word	0x0000af4a
    515c:	0000af71 	.word	0x0000af71
    5160:	00008952 	.word	0x00008952
    5164:	1fff9118 	.word	0x1fff9118
    5168:	1fff911a 	.word	0x1fff911a
    516c:	0000af75 	.word	0x0000af75
    5170:	1fffa2ac 	.word	0x1fffa2ac
    5174:	0000afa0 	.word	0x0000afa0
    5178:	0000afca 	.word	0x0000afca
    517c:	0000affa 	.word	0x0000affa
    5180:	0000b02a 	.word	0x0000b02a
    5184:	0000b059 	.word	0x0000b059
    5188:	0000b05c 	.word	0x0000b05c
    518c:	0000a47c 	.word	0x0000a47c

00005190 <Macro_layerState>:

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5190:	1e51      	subs	r1, r2, #1
    5192:	2901      	cmp	r1, #1

// ----- Capabilities -----

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
    5194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5196:	d851      	bhi.n	523c <Macro_layerState+0xac>
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
	uint16_t stackItem = 0;
	while ( stackItem < macroLayerIndexStackSize )
    5198:	4c29      	ldr	r4, [pc, #164]	; (5240 <Macro_layerState+0xb0>)
	{
		// Flag if layer is already in the LayerIndexStack
		if ( macroLayerIndexStack[ stackItem ] == layer )
    519a:	492a      	ldr	r1, [pc, #168]	; (5244 <Macro_layerState+0xb4>)
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
	uint16_t stackItem = 0;
	while ( stackItem < macroLayerIndexStackSize )
    519c:	8827      	ldrh	r7, [r4, #0]
    519e:	2500      	movs	r5, #0
    51a0:	b2a8      	uxth	r0, r5
    51a2:	42b8      	cmp	r0, r7
    51a4:	d208      	bcs.n	51b8 <Macro_layerState+0x28>
    51a6:	3501      	adds	r5, #1
	{
		// Flag if layer is already in the LayerIndexStack
		if ( macroLayerIndexStack[ stackItem ] == layer )
    51a8:	eb01 0645 	add.w	r6, r1, r5, lsl #1
    51ac:	f836 6c02 	ldrh.w	r6, [r6, #-2]
    51b0:	4296      	cmp	r6, r2
    51b2:	d1f5      	bne.n	51a0 <Macro_layerState+0x10>
		{
			inLayerIndexStack = 1;
    51b4:	2601      	movs	r6, #1
    51b6:	e000      	b.n	51ba <Macro_layerState+0x2a>
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
    51b8:	2600      	movs	r6, #0
		// Increment to next item
		stackItem++;
	}

	// Toggle Layer State Byte
	if ( LayerState[ layer ] & layerState )
    51ba:	4d23      	ldr	r5, [pc, #140]	; (5248 <Macro_layerState+0xb8>)
    51bc:	5ca9      	ldrb	r1, [r5, r2]
    51be:	420b      	tst	r3, r1
	{
		// Unset
		LayerState[ layer ] &= ~layerState;
    51c0:	bf14      	ite	ne
    51c2:	4399      	bicne	r1, r3
	}
	else
	{
		// Set
		LayerState[ layer ] |= layerState;
    51c4:	4319      	orreq	r1, r3
    51c6:	54a9      	strb	r1, [r5, r2]
	}

	// If the layer was not in the LayerIndexStack add it
	if ( !inLayerIndexStack )
    51c8:	b926      	cbnz	r6, 51d4 <Macro_layerState+0x44>
	{
		macroLayerIndexStack[ macroLayerIndexStackSize++ ] = layer;
    51ca:	1c7b      	adds	r3, r7, #1
    51cc:	8023      	strh	r3, [r4, #0]
    51ce:	4b1d      	ldr	r3, [pc, #116]	; (5244 <Macro_layerState+0xb4>)
    51d0:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
	}

	// If the layer is in the LayerIndexStack and the state is 0x00, remove
	if ( LayerState[ layer ] == 0x00 && inLayerIndexStack )
    51d4:	5cab      	ldrb	r3, [r5, r2]
    51d6:	b96b      	cbnz	r3, 51f4 <Macro_layerState+0x64>
    51d8:	b166      	cbz	r6, 51f4 <Macro_layerState+0x64>
	{
		// Remove the layer from the LayerIndexStack
		// Using the already positioned stackItem variable from the loop above
		while ( stackItem < macroLayerIndexStackSize )
    51da:	8823      	ldrh	r3, [r4, #0]
		{
			macroLayerIndexStack[ stackItem ] = macroLayerIndexStack[ stackItem + 1 ];
    51dc:	4a19      	ldr	r2, [pc, #100]	; (5244 <Macro_layerState+0xb4>)
	// If the layer is in the LayerIndexStack and the state is 0x00, remove
	if ( LayerState[ layer ] == 0x00 && inLayerIndexStack )
	{
		// Remove the layer from the LayerIndexStack
		// Using the already positioned stackItem variable from the loop above
		while ( stackItem < macroLayerIndexStackSize )
    51de:	4298      	cmp	r0, r3
    51e0:	d206      	bcs.n	51f0 <Macro_layerState+0x60>
		{
			macroLayerIndexStack[ stackItem ] = macroLayerIndexStack[ stackItem + 1 ];
    51e2:	1c41      	adds	r1, r0, #1
    51e4:	f832 6011 	ldrh.w	r6, [r2, r1, lsl #1]
    51e8:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
			stackItem++;
    51ec:	b288      	uxth	r0, r1
    51ee:	e7f6      	b.n	51de <Macro_layerState+0x4e>
		}

		// Reduce LayerIndexStack size
		macroLayerIndexStackSize--;
    51f0:	3b01      	subs	r3, #1
    51f2:	8023      	strh	r3, [r4, #0]
	}

	// Layer Debug Mode
	if ( layerDebugMode )
    51f4:	4b15      	ldr	r3, [pc, #84]	; (524c <Macro_layerState+0xbc>)
    51f6:	781b      	ldrb	r3, [r3, #0]
    51f8:	b303      	cbz	r3, 523c <Macro_layerState+0xac>
	{
		dbug_msg("Layer ");
    51fa:	4815      	ldr	r0, [pc, #84]	; (5250 <Macro_layerState+0xc0>)
    51fc:	f002 feb8 	bl	7f70 <_print>
    5200:	2600      	movs	r6, #0

		// Iterate over each of the layers displaying the state as a hex value
		for ( index_uint_t index = 0; index < LayerNum; index++ )
		{
			printHex_op( LayerState[ index ], 0 );
    5202:	5da8      	ldrb	r0, [r5, r6]
    5204:	2100      	movs	r1, #0
    5206:	3601      	adds	r6, #1
    5208:	f002 ff55 	bl	80b6 <printHex_op>
	if ( layerDebugMode )
	{
		dbug_msg("Layer ");

		// Iterate over each of the layers displaying the state as a hex value
		for ( index_uint_t index = 0; index < LayerNum; index++ )
    520c:	2e03      	cmp	r6, #3
    520e:	d1f8      	bne.n	5202 <Macro_layerState+0x72>
		{
			printHex_op( LayerState[ index ], 0 );
		}

		// Always show the default layer (it's always 0)
		print(" 0");
    5210:	4810      	ldr	r0, [pc, #64]	; (5254 <Macro_layerState+0xc4>)

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
    5212:	4d0c      	ldr	r5, [pc, #48]	; (5244 <Macro_layerState+0xb4>)
		{
			printHex_op( LayerState[ index ], 0 );
		}

		// Always show the default layer (it's always 0)
		print(" 0");
    5214:	f002 feac 	bl	7f70 <_print>

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
    5218:	8824      	ldrh	r4, [r4, #0]
    521a:	b154      	cbz	r4, 5232 <Macro_layerState+0xa2>
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
    521c:	3c01      	subs	r4, #1
		print(" 0");

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
		{
			print(":");
    521e:	480e      	ldr	r0, [pc, #56]	; (5258 <Macro_layerState+0xc8>)
    5220:	f002 fea6 	bl	7f70 <_print>
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
    5224:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    5228:	2100      	movs	r1, #0
    522a:	f002 ff44 	bl	80b6 <printHex_op>

		// Always show the default layer (it's always 0)
		print(" 0");

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
    522e:	b2a4      	uxth	r4, r4
    5230:	e7f3      	b.n	521a <Macro_layerState+0x8a>
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    5232:	480a      	ldr	r0, [pc, #40]	; (525c <Macro_layerState+0xcc>)
	}
}
    5234:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    5238:	f002 be9a 	b.w	7f70 <_print>
    523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    523e:	bf00      	nop
    5240:	1fff910a 	.word	0x1fff910a
    5244:	1fff910c 	.word	0x1fff910c
    5248:	1fffa084 	.word	0x1fffa084
    524c:	1fff9115 	.word	0x1fff9115
    5250:	0000b061 	.word	0x0000b061
    5254:	0000b07b 	.word	0x0000b07b
    5258:	000089e7 	.word	0x000089e7
    525c:	0000c0ef 	.word	0x0000c0ef

00005260 <Macro_layerState_capability>:

// Modifies the specified Layer control byte
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    5260:	4608      	mov	r0, r1
    5262:	4611      	mov	r1, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5264:	29ff      	cmp	r1, #255	; 0xff

// Modifies the specified Layer control byte
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    5266:	461a      	mov	r2, r3
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5268:	d104      	bne.n	5274 <Macro_layerState_capability+0x14>
    526a:	28ff      	cmp	r0, #255	; 0xff
    526c:	d105      	bne.n	527a <Macro_layerState_capability+0x1a>
	{
		print("Macro_layerState(layerIndex,layerState)");
    526e:	4805      	ldr	r0, [pc, #20]	; (5284 <Macro_layerState_capability+0x24>)
    5270:	f002 be7e 	b.w	7f70 <_print>
	}

	// Only use capability on press or release
	// TODO Analog
	// XXX This may cause issues, might be better to implement state table here to decide -HaaTa
	if ( stateType == 0x00 && state == 0x02 ) // Hold condition
    5274:	b909      	cbnz	r1, 527a <Macro_layerState_capability+0x1a>
    5276:	2802      	cmp	r0, #2
    5278:	d003      	beq.n	5282 <Macro_layerState_capability+0x22>
	uint16_t layer = *(uint16_t*)(&args[0]);

	// Get layer toggle byte
	uint8_t layerState = args[ sizeof(uint16_t) ];

	Macro_layerState( state, stateType, layer, layerState );
    527a:	7893      	ldrb	r3, [r2, #2]
    527c:	8812      	ldrh	r2, [r2, #0]
    527e:	f7ff bf87 	b.w	5190 <Macro_layerState>
    5282:	4770      	bx	lr
    5284:	0000b07e 	.word	0x0000b07e

00005288 <Macro_layerLatch_capability>:


// Latches given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLatch_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    5288:	4608      	mov	r0, r1
    528a:	4611      	mov	r1, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    528c:	29ff      	cmp	r1, #255	; 0xff


// Latches given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLatch_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    528e:	461a      	mov	r2, r3
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5290:	d104      	bne.n	529c <Macro_layerLatch_capability+0x14>
    5292:	28ff      	cmp	r0, #255	; 0xff
    5294:	d105      	bne.n	52a2 <Macro_layerLatch_capability+0x1a>
	{
		print("Macro_layerLatch(layerIndex)");
    5296:	4805      	ldr	r0, [pc, #20]	; (52ac <Macro_layerLatch_capability+0x24>)
    5298:	f002 be6a 	b.w	7f70 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state != 0x03 ) // Only on release
    529c:	b909      	cbnz	r1, 52a2 <Macro_layerLatch_capability+0x1a>
    529e:	2803      	cmp	r0, #3
    52a0:	d103      	bne.n	52aa <Macro_layerLatch_capability+0x22>

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	Macro_layerState( state, stateType, layer, 0x02 );
    52a2:	2302      	movs	r3, #2
    52a4:	8812      	ldrh	r2, [r2, #0]
    52a6:	f7ff bf73 	b.w	5190 <Macro_layerState>
    52aa:	4770      	bx	lr
    52ac:	0000b0a6 	.word	0x0000b0a6

000052b0 <Macro_layerLock_capability>:


// Locks given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLock_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    52b0:	4608      	mov	r0, r1
    52b2:	4611      	mov	r1, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    52b4:	29ff      	cmp	r1, #255	; 0xff


// Locks given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLock_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    52b6:	461a      	mov	r2, r3
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    52b8:	d104      	bne.n	52c4 <Macro_layerLock_capability+0x14>
    52ba:	28ff      	cmp	r0, #255	; 0xff
    52bc:	d105      	bne.n	52ca <Macro_layerLock_capability+0x1a>
	{
		print("Macro_layerLock(layerIndex)");
    52be:	4805      	ldr	r0, [pc, #20]	; (52d4 <Macro_layerLock_capability+0x24>)
    52c0:	f002 be56 	b.w	7f70 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    52c4:	b909      	cbnz	r1, 52ca <Macro_layerLock_capability+0x1a>
    52c6:	2801      	cmp	r0, #1
    52c8:	d103      	bne.n	52d2 <Macro_layerLock_capability+0x22>

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	Macro_layerState( state, stateType, layer, 0x04 );
    52ca:	2304      	movs	r3, #4
    52cc:	8812      	ldrh	r2, [r2, #0]
    52ce:	f7ff bf5f 	b.w	5190 <Macro_layerState>
    52d2:	4770      	bx	lr
    52d4:	0000b0c3 	.word	0x0000b0c3

000052d8 <Macro_layerShift_capability>:
// Shifts given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerShift_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    52d8:	2aff      	cmp	r2, #255	; 0xff


// Shifts given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerShift_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    52da:	4608      	mov	r0, r1
    52dc:	4611      	mov	r1, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    52de:	d104      	bne.n	52ea <Macro_layerShift_capability+0x12>
    52e0:	28ff      	cmp	r0, #255	; 0xff
    52e2:	d106      	bne.n	52f2 <Macro_layerShift_capability+0x1a>
	{
		print("Macro_layerShift(layerIndex)");
    52e4:	4809      	ldr	r0, [pc, #36]	; (530c <Macro_layerShift_capability+0x34>)
    52e6:	f002 be43 	b.w	7f70 <_print>
		return;
	}

	// Only use capability on press or release
	// TODO Analog
	if ( stateType == 0x00 && ( state == 0x00 || state == 0x02 ) ) // Only pass press or release conditions
    52ea:	b912      	cbnz	r2, 52f2 <Macro_layerShift_capability+0x1a>
    52ec:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    52f0:	d00b      	beq.n	530a <Macro_layerShift_capability+0x32>
		return;

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);
    52f2:	881a      	ldrh	r2, [r3, #0]

	// Only set the layer if it is disabled
	if ( LayerState[ layer ] != 0x00 && state == 0x01 )
    52f4:	4b06      	ldr	r3, [pc, #24]	; (5310 <Macro_layerShift_capability+0x38>)
    52f6:	5c9b      	ldrb	r3, [r3, r2]
    52f8:	b113      	cbz	r3, 5300 <Macro_layerShift_capability+0x28>
    52fa:	2801      	cmp	r0, #1
    52fc:	d102      	bne.n	5304 <Macro_layerShift_capability+0x2c>
    52fe:	4770      	bx	lr
		return;

	// Only unset the layer if it is enabled
	if ( LayerState[ layer ] == 0x00 && state == 0x03 )
    5300:	2803      	cmp	r0, #3
    5302:	d002      	beq.n	530a <Macro_layerShift_capability+0x32>
		return;

	Macro_layerState( state, stateType, layer, 0x01 );
    5304:	2301      	movs	r3, #1
    5306:	f7ff bf43 	b.w	5190 <Macro_layerState>
    530a:	4770      	bx	lr
    530c:	0000b0df 	.word	0x0000b0df
    5310:	1fffa084 	.word	0x1fffa084

00005314 <Macro_layerRotate_capability>:
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5314:	2aff      	cmp	r2, #255	; 0xff
// Rotate layer to next/previous
// Uses state variable to keep track of the current layer position
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    5316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    531a:	460d      	mov	r5, r1
    531c:	4616      	mov	r6, r2
    531e:	461f      	mov	r7, r3
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5320:	d106      	bne.n	5330 <Macro_layerRotate_capability+0x1c>
    5322:	29ff      	cmp	r1, #255	; 0xff
    5324:	d107      	bne.n	5336 <Macro_layerRotate_capability+0x22>
	{
		print("Macro_layerRotate(previous)");
    5326:	4815      	ldr	r0, [pc, #84]	; (537c <Macro_layerRotate_capability+0x68>)
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    5328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
void Macro_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Macro_layerRotate(previous)");
    532c:	f002 be20 	b.w	7f70 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    5330:	b90a      	cbnz	r2, 5336 <Macro_layerRotate_capability+0x22>
    5332:	2901      	cmp	r1, #1
    5334:	d11f      	bne.n	5376 <Macro_layerRotate_capability+0x62>
		return;

	// Unset previous rotation layer if not 0
	if ( Macro_rotationLayer != 0 )
    5336:	4c12      	ldr	r4, [pc, #72]	; (5380 <Macro_layerRotate_capability+0x6c>)
    5338:	8822      	ldrh	r2, [r4, #0]
    533a:	b122      	cbz	r2, 5346 <Macro_layerRotate_capability+0x32>
	{
		Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    533c:	2304      	movs	r3, #4
    533e:	4631      	mov	r1, r6
    5340:	4628      	mov	r0, r5
    5342:	f7ff ff25 	bl	5190 <Macro_layerState>

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    5346:	7839      	ldrb	r1, [r7, #0]
	{
		Macro_rotationLayer++;
    5348:	4a0d      	ldr	r2, [pc, #52]	; (5380 <Macro_layerRotate_capability+0x6c>)
    534a:	8823      	ldrh	r3, [r4, #0]

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    534c:	b929      	cbnz	r1, 535a <Macro_layerRotate_capability+0x46>
	{
		Macro_rotationLayer++;
    534e:	3301      	adds	r3, #1
    5350:	b29b      	uxth	r3, r3

		// Invalid layer
		if ( Macro_rotationLayer >= LayerNum )
    5352:	2b02      	cmp	r3, #2
    5354:	d906      	bls.n	5364 <Macro_layerRotate_capability+0x50>
			Macro_rotationLayer = 0;
    5356:	8011      	strh	r1, [r2, #0]
    5358:	e005      	b.n	5366 <Macro_layerRotate_capability+0x52>
	}
	// Previous
	else
	{
		Macro_rotationLayer--;
    535a:	3b01      	subs	r3, #1
    535c:	b29b      	uxth	r3, r3

		// Layer wrap
		if ( Macro_rotationLayer >= LayerNum )
    535e:	2b02      	cmp	r3, #2
			Macro_rotationLayer = LayerNum - 1;
    5360:	bf88      	it	hi
    5362:	2302      	movhi	r3, #2
    5364:	8013      	strh	r3, [r2, #0]
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    5366:	8822      	ldrh	r2, [r4, #0]
    5368:	4631      	mov	r1, r6
    536a:	4628      	mov	r0, r5
    536c:	2304      	movs	r3, #4
}
    536e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if ( Macro_rotationLayer >= LayerNum )
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    5372:	f7ff bf0d 	b.w	5190 <Macro_layerState>
    5376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    537a:	bf00      	nop
    537c:	0000b0fc 	.word	0x0000b0fc
    5380:	1fff9e60 	.word	0x1fff9e60

00005384 <Macro_layerLookup>:
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    5384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    5388:	7805      	ldrb	r5, [r0, #0]

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
	uint8_t scanCode = guide->scanCode;
    538a:	7884      	ldrb	r4, [r0, #2]
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    538c:	460e      	mov	r6, r1
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    538e:	b9fd      	cbnz	r5, 53d0 <Macro_layerLookup+0x4c>
    5390:	7843      	ldrb	r3, [r0, #1]
    5392:	2b01      	cmp	r3, #1
    5394:	d01c      	beq.n	53d0 <Macro_layerLookup+0x4c>
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    5396:	4b3f      	ldr	r3, [pc, #252]	; (5494 <Macro_layerLookup+0x110>)

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    5398:	483f      	ldr	r0, [pc, #252]	; (5498 <Macro_layerLookup+0x114>)
	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    539a:	5d1a      	ldrb	r2, [r3, r4]

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    539c:	230c      	movs	r3, #12
    539e:	4353      	muls	r3, r2
    53a0:	18c1      	adds	r1, r0, r3
		const Layer *layer = &LayerIndex[ cachedLayer ];

		// Cache trigger list before attempting to expire latch
		nat_ptr_t *trigger_list = map[ scanCode - layer->first ];
    53a2:	58c3      	ldr	r3, [r0, r3]
    53a4:	7a09      	ldrb	r1, [r1, #8]
    53a6:	1a64      	subs	r4, r4, r1
    53a8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

		// Check if latch has been pressed for this layer
		uint8_t latch = LayerState[ cachedLayer ] & 0x02;
    53ac:	4b3b      	ldr	r3, [pc, #236]	; (549c <Macro_layerLookup+0x118>)
		if ( latch && latch_expire )
    53ae:	5c9b      	ldrb	r3, [r3, r2]
    53b0:	079b      	lsls	r3, r3, #30
    53b2:	d56b      	bpl.n	548c <Macro_layerLookup+0x108>
    53b4:	2e00      	cmp	r6, #0
    53b6:	d069      	beq.n	548c <Macro_layerLookup+0x108>
		{
			Macro_layerState( 0, 0, cachedLayer, 0x02 );
    53b8:	4629      	mov	r1, r5
    53ba:	4628      	mov	r0, r5
    53bc:	2302      	movs	r3, #2
    53be:	f7ff fee7 	bl	5190 <Macro_layerState>
				TriggerMacro *trigger,
				uint8_t state,
				uint8_t stateType,
				uint8_t *args
			);
			LCD_layerStack_capability( 0, 0, 0, 0 );
    53c2:	462b      	mov	r3, r5
    53c4:	462a      	mov	r2, r5
    53c6:	4629      	mov	r1, r5
    53c8:	4628      	mov	r0, r5
    53ca:	f7fe fb75 	bl	3ab8 <LCD_layerStack_capability>
    53ce:	e05d      	b.n	548c <Macro_layerLookup+0x108>

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    53d0:	4b33      	ldr	r3, [pc, #204]	; (54a0 <Macro_layerLookup+0x11c>)
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    53d2:	4f32      	ldr	r7, [pc, #200]	; (549c <Macro_layerLookup+0x118>)

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    53d4:	881d      	ldrh	r5, [r3, #0]
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    53d6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 54a4 <Macro_layerLookup+0x120>
    53da:	46b9      	mov	r9, r7

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    53dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    53e0:	429d      	cmp	r5, r3
    53e2:	d038      	beq.n	5456 <Macro_layerLookup+0xd2>
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    53e4:	f838 a015 	ldrh.w	sl, [r8, r5, lsl #1]

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    53e8:	f817 300a 	ldrb.w	r3, [r7, sl]
    53ec:	f003 0302 	and.w	r3, r3, #2
		if ( latch && latch_expire )
    53f0:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    53f4:	b133      	cbz	r3, 5404 <Macro_layerLookup+0x80>
    53f6:	b12e      	cbz	r6, 5404 <Macro_layerLookup+0x80>
		{
			Macro_layerState( 0, 0, macroLayerIndexStack[ layerIndex ], 0x02 );
    53f8:	2100      	movs	r1, #0
    53fa:	2302      	movs	r3, #2
    53fc:	4652      	mov	r2, sl
    53fe:	4608      	mov	r0, r1
    5400:	f7ff fec6 	bl	5190 <Macro_layerState>
		}

		// Only use layer, if state is valid
		// XOR each of the state bits
		// If only two are enabled, do not use this state
		if ( (LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x01) ^ (latch>>1) ^ ((LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x04)>>2) )
    5404:	4b27      	ldr	r3, [pc, #156]	; (54a4 <Macro_layerLookup+0x120>)
    5406:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
    540a:	f819 3001 	ldrb.w	r3, [r9, r1]
    540e:	f003 0201 	and.w	r2, r3, #1
    5412:	ea82 0b5b 	eor.w	fp, r2, fp, lsr #1
    5416:	f3c3 0380 	ubfx	r3, r3, #2, #1
    541a:	459b      	cmp	fp, r3
    541c:	d018      	beq.n	5450 <Macro_layerLookup+0xcc>
		{
			// Lookup layer
			nat_ptr_t **map = (nat_ptr_t**)layer->triggerMap;
    541e:	220c      	movs	r2, #12
    5420:	481d      	ldr	r0, [pc, #116]	; (5498 <Macro_layerLookup+0x114>)
    5422:	fb02 f20a 	mul.w	r2, r2, sl
    5426:	1883      	adds	r3, r0, r2
    5428:	5882      	ldr	r2, [r0, r2]

			// Determine if layer has key defined
			// Make sure scanCode is between layer first and last scancodes
			if ( map != 0
    542a:	b18a      	cbz	r2, 5450 <Macro_layerLookup+0xcc>
				&& scanCode <= layer->last
    542c:	7a58      	ldrb	r0, [r3, #9]
    542e:	42a0      	cmp	r0, r4
    5430:	d30e      	bcc.n	5450 <Macro_layerLookup+0xcc>
				&& scanCode >= layer->first
    5432:	7a1b      	ldrb	r3, [r3, #8]
    5434:	429c      	cmp	r4, r3
    5436:	d30b      	bcc.n	5450 <Macro_layerLookup+0xcc>
				&& *map[ scanCode - layer->first ] != 0 )
    5438:	1ae3      	subs	r3, r4, r3
    543a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    543e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5442:	681b      	ldr	r3, [r3, #0]
    5444:	b123      	cbz	r3, 5450 <Macro_layerLookup+0xcc>
			{
				// Set the layer cache
				macroTriggerListLayerCache[ scanCode ] = macroLayerIndexStack[ layerIndex ];
    5446:	4b13      	ldr	r3, [pc, #76]	; (5494 <Macro_layerLookup+0x110>)
    5448:	5519      	strb	r1, [r3, r4]

				return map[ scanCode - layer->first ];
    544a:	6800      	ldr	r0, [r0, #0]
    544c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    5450:	3d01      	subs	r5, #1
    5452:	b2ad      	uxth	r5, r5
    5454:	e7c2      	b.n	53dc <Macro_layerLookup+0x58>
	const Layer *layer = &LayerIndex[0];

	// Make sure scanCode is between layer first and last scancodes
	if ( map != 0
		&& scanCode <= layer->last
		&& scanCode >= layer->first
    5456:	1ea3      	subs	r3, r4, #2
    5458:	b2da      	uxtb	r2, r3
    545a:	2a57      	cmp	r2, #87	; 0x57
    545c:	d809      	bhi.n	5472 <Macro_layerLookup+0xee>
		&& *map[ scanCode - layer->first ] != 0 )
    545e:	4a12      	ldr	r2, [pc, #72]	; (54a8 <Macro_layerLookup+0x124>)
    5460:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5464:	6803      	ldr	r3, [r0, #0]
    5466:	b123      	cbz	r3, 5472 <Macro_layerLookup+0xee>
	{
		// Set the layer cache to default map
		macroTriggerListLayerCache[ scanCode ] = 0;
    5468:	4b0a      	ldr	r3, [pc, #40]	; (5494 <Macro_layerLookup+0x110>)
    546a:	2200      	movs	r2, #0
    546c:	551a      	strb	r2, [r3, r4]

		return map[ scanCode - layer->first ];
    546e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
    5472:	480e      	ldr	r0, [pc, #56]	; (54ac <Macro_layerLookup+0x128>)
    5474:	f002 fd7c 	bl	7f70 <_print>
	printHex( scanCode );
    5478:	2101      	movs	r1, #1
    547a:	4620      	mov	r0, r4
    547c:	f002 fe1b 	bl	80b6 <printHex_op>
	print( NL );
    5480:	480b      	ldr	r0, [pc, #44]	; (54b0 <Macro_layerLookup+0x12c>)
    5482:	f002 fd75 	bl	7f70 <_print>
	return 0;
    5486:	2000      	movs	r0, #0
    5488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			);
			LCD_layerStack_capability( 0, 0, 0, 0 );
#endif
		}

		return trigger_list;
    548c:	4620      	mov	r0, r4
	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
	printHex( scanCode );
	print( NL );
	return 0;
}
    548e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5492:	bf00      	nop
    5494:	1fffa087 	.word	0x1fffa087
    5498:	0000a9b4 	.word	0x0000a9b4
    549c:	1fffa084 	.word	0x1fffa084
    54a0:	1fff910a 	.word	0x1fff910a
    54a4:	1fff910c 	.word	0x1fff910c
    54a8:	1fff8af0 	.word	0x1fff8af0
    54ac:	0000b118 	.word	0x0000b118
    54b0:	0000c0ef 	.word	0x0000c0ef

000054b4 <Macro_pressReleaseAdd>:

// Add an interconnect ScanCode
// These are handled differently (less information is sent, hold/off states must be assumed)
#if defined(ConnectEnabled_define) || defined(PressReleaseCache_define)
void Macro_pressReleaseAdd( void *trigger_ptr )
{
    54b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TriggerGuide *trigger = (TriggerGuide*)trigger_ptr;

	// Error checking
	uint8_t error = 0;
	switch ( trigger->type )
    54b6:	7803      	ldrb	r3, [r0, #0]

// Add an interconnect ScanCode
// These are handled differently (less information is sent, hold/off states must be assumed)
#if defined(ConnectEnabled_define) || defined(PressReleaseCache_define)
void Macro_pressReleaseAdd( void *trigger_ptr )
{
    54b8:	4604      	mov	r4, r0
	TriggerGuide *trigger = (TriggerGuide*)trigger_ptr;

	// Error checking
	uint8_t error = 0;
	switch ( trigger->type )
    54ba:	b923      	cbnz	r3, 54c6 <Macro_pressReleaseAdd+0x12>
	{
	case 0x00: // Normal key
		switch ( trigger->state )
    54bc:	7842      	ldrb	r2, [r0, #1]
    54be:	2a03      	cmp	r2, #3
    54c0:	d905      	bls.n	54ce <Macro_pressReleaseAdd+0x1a>
		case 0x01:
		case 0x02:
		case 0x03:
			break;
		default:
			erro_msg("Invalid key state - ");
    54c2:	4824      	ldr	r0, [pc, #144]	; (5554 <Macro_pressReleaseAdd+0xa0>)
    54c4:	e000      	b.n	54c8 <Macro_pressReleaseAdd+0x14>
		}
		break;

	// Invalid TriggerGuide type
	default:
		erro_msg("Invalid type - ");
    54c6:	4824      	ldr	r0, [pc, #144]	; (5558 <Macro_pressReleaseAdd+0xa4>)
    54c8:	f002 fd52 	bl	7f70 <_print>
		error = 1;
    54cc:	2301      	movs	r3, #1
		break;
	}

	// Check if ScanCode is out of range
	if ( trigger->scanCode > MaxScanCode )
    54ce:	78a7      	ldrb	r7, [r4, #2]
    54d0:	2f59      	cmp	r7, #89	; 0x59
    54d2:	d903      	bls.n	54dc <Macro_pressReleaseAdd+0x28>
	{
		warn_msg("ScanCode is out of range/not defined - ");
    54d4:	4821      	ldr	r0, [pc, #132]	; (555c <Macro_pressReleaseAdd+0xa8>)
    54d6:	f002 fd4b 	bl	7f70 <_print>
    54da:	e006      	b.n	54ea <Macro_pressReleaseAdd+0x36>
		error = 1;
	}

	// Display TriggerGuide
	if ( error )
    54dc:	b92b      	cbnz	r3, 54ea <Macro_pressReleaseAdd+0x36>
		return;
	}

	// Add trigger to the Interconnect Cache
	// During each processing loop, a scancode may be re-added depending on it's state
	for ( var_uint_t c = 0; c < macroInterconnectCacheSize; c++ )
    54de:	4920      	ldr	r1, [pc, #128]	; (5560 <Macro_pressReleaseAdd+0xac>)
    54e0:	f8df e088 	ldr.w	lr, [pc, #136]	; 556c <Macro_pressReleaseAdd+0xb8>
    54e4:	780a      	ldrb	r2, [r1, #0]
    54e6:	4608      	mov	r0, r1
    54e8:	e016      	b.n	5518 <Macro_pressReleaseAdd+0x64>
	}

	// Display TriggerGuide
	if ( error )
	{
		printHex( trigger->type );
    54ea:	2101      	movs	r1, #1
    54ec:	7820      	ldrb	r0, [r4, #0]
    54ee:	f002 fde2 	bl	80b6 <printHex_op>
		print(" ");
    54f2:	481c      	ldr	r0, [pc, #112]	; (5564 <Macro_pressReleaseAdd+0xb0>)
    54f4:	f002 fd3c 	bl	7f70 <_print>
		printHex( trigger->state );
    54f8:	2101      	movs	r1, #1
    54fa:	7860      	ldrb	r0, [r4, #1]
    54fc:	f002 fddb 	bl	80b6 <printHex_op>
		print(" ");
    5500:	4818      	ldr	r0, [pc, #96]	; (5564 <Macro_pressReleaseAdd+0xb0>)
    5502:	f002 fd35 	bl	7f70 <_print>
		printHex( trigger->scanCode );
    5506:	78a0      	ldrb	r0, [r4, #2]
    5508:	2101      	movs	r1, #1
    550a:	f002 fdd4 	bl	80b6 <printHex_op>
		print( NL );
    550e:	4816      	ldr	r0, [pc, #88]	; (5568 <Macro_pressReleaseAdd+0xb4>)
		}
	}

	// If not in the list, add it
	macroInterconnectCache[ macroInterconnectCacheSize++ ] = *trigger;
}
    5510:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printHex( trigger->type );
		print(" ");
		printHex( trigger->state );
		print(" ");
		printHex( trigger->scanCode );
		print( NL );
    5514:	f002 bd2c 	b.w	7f70 <_print>
		return;
	}

	// Add trigger to the Interconnect Cache
	// During each processing loop, a scancode may be re-added depending on it's state
	for ( var_uint_t c = 0; c < macroInterconnectCacheSize; c++ )
    5518:	b2d9      	uxtb	r1, r3
    551a:	428a      	cmp	r2, r1
    551c:	4d13      	ldr	r5, [pc, #76]	; (556c <Macro_pressReleaseAdd+0xb8>)
    551e:	d90e      	bls.n	553e <Macro_pressReleaseAdd+0x8a>
	{
		// Check if the same ScanCode
		if ( macroInterconnectCache[ c ].scanCode == trigger->scanCode )
    5520:	4619      	mov	r1, r3
    5522:	3301      	adds	r3, #1
    5524:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    5528:	4476      	add	r6, lr
    552a:	f816 6c01 	ldrb.w	r6, [r6, #-1]
    552e:	42be      	cmp	r6, r7
    5530:	d1f2      	bne.n	5518 <Macro_pressReleaseAdd+0x64>
		{
			// Update the state
			macroInterconnectCache[ c ].state = trigger->state;
    5532:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5536:	4429      	add	r1, r5
    5538:	7863      	ldrb	r3, [r4, #1]
    553a:	704b      	strb	r3, [r1, #1]
			return;
    553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	// If not in the list, add it
	macroInterconnectCache[ macroInterconnectCacheSize++ ] = *trigger;
    553e:	1c53      	adds	r3, r2, #1
    5540:	7003      	strb	r3, [r0, #0]
    5542:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5546:	8821      	ldrh	r1, [r4, #0]
    5548:	52a9      	strh	r1, [r5, r2]
    554a:	18ab      	adds	r3, r5, r2
    554c:	78a2      	ldrb	r2, [r4, #2]
    554e:	709a      	strb	r2, [r3, #2]
    5550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5552:	bf00      	nop
    5554:	0000b156 	.word	0x0000b156
    5558:	0000b180 	.word	0x0000b180
    555c:	0000b1a5 	.word	0x0000b1a5
    5560:	1fff9114 	.word	0x1fff9114
    5564:	00008952 	.word	0x00008952
    5568:	0000c0ef 	.word	0x0000c0ef
    556c:	1fffa0e0 	.word	0x1fffa0e0

00005570 <Macro_keyState>:
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    5570:	b570      	push	{r4, r5, r6, lr}
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	if ( !Connect_master )
    5572:	4b12      	ldr	r3, [pc, #72]	; (55bc <Macro_keyState+0x4c>)
    5574:	781b      	ldrb	r3, [r3, #0]
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    5576:	4604      	mov	r4, r0
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	if ( !Connect_master )
    5578:	b913      	cbnz	r3, 5580 <Macro_keyState+0x10>
	{
		// ScanCodes are only added if there was a state change (on/off)
		switch ( state )
    557a:	b1f1      	cbz	r1, 55ba <Macro_keyState+0x4a>
    557c:	2902      	cmp	r1, #2
    557e:	d01c      	beq.n	55ba <Macro_keyState+0x4a>
		}
	}
#endif

	// Only add to macro trigger list if one of three states
	switch ( state )
    5580:	1e4b      	subs	r3, r1, #1
    5582:	2b02      	cmp	r3, #2
    5584:	d819      	bhi.n	55ba <Macro_keyState+0x4a>
	{
	case 0x01: // Pressed
	case 0x02: // Held
	case 0x03: // Released
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
    5586:	2c59      	cmp	r4, #89	; 0x59
    5588:	d90b      	bls.n	55a2 <Macro_keyState+0x32>
		{
			warn_msg("ScanCode is out of range/not defined: ");
    558a:	480d      	ldr	r0, [pc, #52]	; (55c0 <Macro_keyState+0x50>)
    558c:	f002 fcf0 	bl	7f70 <_print>
			printHex( scanCode );
    5590:	4620      	mov	r0, r4
    5592:	2101      	movs	r1, #1
    5594:	f002 fd8f 	bl	80b6 <printHex_op>
			print( NL );
    5598:	480a      	ldr	r0, [pc, #40]	; (55c4 <Macro_keyState+0x54>)
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
		break;
	}
}
    559a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
		{
			warn_msg("ScanCode is out of range/not defined: ");
			printHex( scanCode );
			print( NL );
    559e:	f002 bce7 	b.w	7f70 <_print>
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    55a2:	4a09      	ldr	r2, [pc, #36]	; (55c8 <Macro_keyState+0x58>)
    55a4:	4d09      	ldr	r5, [pc, #36]	; (55cc <Macro_keyState+0x5c>)
    55a6:	7813      	ldrb	r3, [r2, #0]
    55a8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    55ac:	182e      	adds	r6, r5, r0
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    55ae:	3301      	adds	r3, #1
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
    55b0:	7071      	strb	r1, [r6, #1]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
    55b2:	2100      	movs	r1, #0
    55b4:	5429      	strb	r1, [r5, r0]
			printHex( scanCode );
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    55b6:	70b4      	strb	r4, [r6, #2]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    55b8:	7013      	strb	r3, [r2, #0]
    55ba:	bd70      	pop	{r4, r5, r6, pc}
    55bc:	1fff9101 	.word	0x1fff9101
    55c0:	0000b1e2 	.word	0x0000b1e2
    55c4:	0000c0ef 	.word	0x0000c0ef
    55c8:	1fff9108 	.word	0x1fff9108
    55cc:	1fff9e62 	.word	0x1fff9e62

000055d0 <cliFunc_keyHold>:
		}
	}
}

void cliFunc_keyHold( char* args )
{
    55d0:	b513      	push	{r0, r1, r4, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    55d2:	ac02      	add	r4, sp, #8
    55d4:	f844 0d04 	str.w	r0, [r4, #-4]!

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    55d8:	9801      	ldr	r0, [sp, #4]
    55da:	4622      	mov	r2, r4
    55dc:	4669      	mov	r1, sp
    55de:	f002 f9e7 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    55e2:	9800      	ldr	r0, [sp, #0]
    55e4:	7803      	ldrb	r3, [r0, #0]
    55e6:	b14b      	cbz	r3, 55fc <cliFunc_keyHold+0x2c>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    55e8:	2b53      	cmp	r3, #83	; 0x53
    55ea:	d1f5      	bne.n	55d8 <cliFunc_keyHold+0x8>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x02 ); // Hold scancode
    55ec:	3001      	adds	r0, #1
    55ee:	f002 fdd1 	bl	8194 <numToInt>
    55f2:	2102      	movs	r1, #2
    55f4:	b2c0      	uxtb	r0, r0
    55f6:	f7ff ffbb 	bl	5570 <Macro_keyState>
			break;
    55fa:	e7ed      	b.n	55d8 <cliFunc_keyHold+0x8>
		}
	}
}
    55fc:	b002      	add	sp, #8
    55fe:	bd10      	pop	{r4, pc}

00005600 <cliFunc_keyPress>:

void cliFunc_keyPress( char* args )
{
    5600:	b513      	push	{r0, r1, r4, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5602:	ac02      	add	r4, sp, #8
    5604:	f844 0d04 	str.w	r0, [r4, #-4]!

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5608:	9801      	ldr	r0, [sp, #4]
    560a:	4622      	mov	r2, r4
    560c:	4669      	mov	r1, sp
    560e:	f002 f9cf 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5612:	9800      	ldr	r0, [sp, #0]
    5614:	7803      	ldrb	r3, [r0, #0]
    5616:	b14b      	cbz	r3, 562c <cliFunc_keyPress+0x2c>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    5618:	2b53      	cmp	r3, #83	; 0x53
    561a:	d1f5      	bne.n	5608 <cliFunc_keyPress+0x8>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x01 ); // Press scancode
    561c:	3001      	adds	r0, #1
    561e:	f002 fdb9 	bl	8194 <numToInt>
    5622:	2101      	movs	r1, #1
    5624:	b2c0      	uxtb	r0, r0
    5626:	f7ff ffa3 	bl	5570 <Macro_keyState>
			break;
    562a:	e7ed      	b.n	5608 <cliFunc_keyPress+0x8>
		}
	}
}
    562c:	b002      	add	sp, #8
    562e:	bd10      	pop	{r4, pc}

00005630 <cliFunc_keyRelease>:

void cliFunc_keyRelease( char* args )
{
    5630:	b513      	push	{r0, r1, r4, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5632:	ac02      	add	r4, sp, #8
    5634:	f844 0d04 	str.w	r0, [r4, #-4]!

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5638:	9801      	ldr	r0, [sp, #4]
    563a:	4622      	mov	r2, r4
    563c:	4669      	mov	r1, sp
    563e:	f002 f9b7 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5642:	9800      	ldr	r0, [sp, #0]
    5644:	7803      	ldrb	r3, [r0, #0]
    5646:	b14b      	cbz	r3, 565c <cliFunc_keyRelease+0x2c>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    5648:	2b53      	cmp	r3, #83	; 0x53
    564a:	d1f5      	bne.n	5638 <cliFunc_keyRelease+0x8>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x03 ); // Release scancode
    564c:	3001      	adds	r0, #1
    564e:	f002 fda1 	bl	8194 <numToInt>
    5652:	2103      	movs	r1, #3
    5654:	b2c0      	uxtb	r0, r0
    5656:	f7ff ff8b 	bl	5570 <Macro_keyState>
			break;
    565a:	e7ed      	b.n	5638 <cliFunc_keyRelease+0x8>
		}
	}
}
    565c:	b002      	add	sp, #8
    565e:	bd10      	pop	{r4, pc}

00005660 <Macro_appendResultMacroToPendingList>:


// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
    5660:	b570      	push	{r4, r5, r6, lr}
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    5662:	4b21      	ldr	r3, [pc, #132]	; (56e8 <Macro_appendResultMacroToPendingList+0x88>)
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    5664:	7902      	ldrb	r2, [r0, #4]

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    5666:	f8b3 12e8 	ldrh.w	r1, [r3, #744]	; 0x2e8
    566a:	2500      	movs	r5, #0
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList.data[ macro ].index == resultMacroIndex )
    566c:	b296      	uxth	r6, r2
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    566e:	b2ec      	uxtb	r4, r5
    5670:	428c      	cmp	r4, r1
    5672:	d206      	bcs.n	5682 <Macro_appendResultMacroToPendingList+0x22>
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList.data[ macro ].index == resultMacroIndex )
    5674:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    5678:	3501      	adds	r5, #1
    567a:	88a4      	ldrh	r4, [r4, #4]
    567c:	42b4      	cmp	r4, r6
    567e:	d1f6      	bne.n	566e <Macro_appendResultMacroToPendingList+0xe>
    5680:	e031      	b.n	56e6 <Macro_appendResultMacroToPendingList+0x86>
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size ].trigger = (TriggerMacro*)triggerMacro;
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size++ ].index = resultMacroIndex;
    5682:	1c4c      	adds	r4, r1, #1
		if ( macroResultMacroPendingList.data[ macro ].index == resultMacroIndex )
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size ].trigger = (TriggerMacro*)triggerMacro;
    5684:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size++ ].index = resultMacroIndex;
    5688:	f8a3 42e8 	strh.w	r4, [r3, #744]	; 0x2e8
    568c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    5690:	6800      	ldr	r0, [r0, #0]
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size ].trigger = (TriggerMacro*)triggerMacro;
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size++ ].index = resultMacroIndex;
    5692:	809a      	strh	r2, [r3, #4]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    5694:	7801      	ldrb	r1, [r0, #0]
	// No duplicates found, add to pending list
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size ].trigger = (TriggerMacro*)triggerMacro;
	macroResultMacroPendingList.data[ macroResultMacroPendingList.size++ ].index = resultMacroIndex;

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
    5696:	2300      	movs	r3, #0
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    5698:	b131      	cbz	r1, 56a8 <Macro_appendResultMacroToPendingList+0x48>
	{
		pos += TriggerGuideSize * comboLength + 1;
    569a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    569e:	3101      	adds	r1, #1
    56a0:	4419      	add	r1, r3
    56a2:	b2cb      	uxtb	r3, r1
		comboLength = triggerMacro->guide[ pos ];
    56a4:	5cc1      	ldrb	r1, [r0, r3]
    56a6:	e7f7      	b.n	5698 <Macro_appendResultMacroToPendingList+0x38>
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    56a8:	4403      	add	r3, r0
	// Lookup scanCode in buffer list for the current state and stateType
	for ( var_uint_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    56aa:	4d10      	ldr	r5, [pc, #64]	; (56ec <Macro_appendResultMacroToPendingList+0x8c>)
	{
		pos += TriggerGuideSize * comboLength + 1;
		comboLength = triggerMacro->guide[ pos ];
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    56ac:	f813 4c01 	ldrb.w	r4, [r3, #-1]

	// Lookup scanCode in buffer list for the current state and stateType
	for ( var_uint_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    56b0:	4b0f      	ldr	r3, [pc, #60]	; (56f0 <Macro_appendResultMacroToPendingList+0x90>)
    56b2:	7819      	ldrb	r1, [r3, #0]
    56b4:	4b0f      	ldr	r3, [pc, #60]	; (56f4 <Macro_appendResultMacroToPendingList+0x94>)
    56b6:	2003      	movs	r0, #3
    56b8:	fb00 3001 	mla	r0, r0, r1, r3
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    56bc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    56c0:	4429      	add	r1, r5
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;

	// Lookup scanCode in buffer list for the current state and stateType
	for ( var_uint_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    56c2:	4283      	cmp	r3, r0
    56c4:	d00a      	beq.n	56dc <Macro_appendResultMacroToPendingList+0x7c>
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
    56c6:	781d      	ldrb	r5, [r3, #0]
    56c8:	42a5      	cmp	r5, r4
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    56ca:	bf01      	itttt	eq
    56cc:	f813 5c01 	ldrbeq.w	r5, [r3, #-1]
    56d0:	704d      	strbeq	r5, [r1, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    56d2:	f813 5c02 	ldrbeq.w	r5, [r3, #-2]
    56d6:	708d      	strbeq	r5, [r1, #2]
    56d8:	3303      	adds	r3, #3
    56da:	e7f2      	b.n	56c2 <Macro_appendResultMacroToPendingList+0x62>
		}
	}

	// Reset the macro position
	ResultMacroRecordList[ resultMacroIndex ].pos = 0;
    56dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    56e0:	4b02      	ldr	r3, [pc, #8]	; (56ec <Macro_appendResultMacroToPendingList+0x8c>)
    56e2:	2100      	movs	r1, #0
    56e4:	5499      	strb	r1, [r3, r2]
    56e6:	bd70      	pop	{r4, r5, r6, pc}
    56e8:	1fffa2ac 	.word	0x1fffa2ac
    56ec:	1fff9f6d 	.word	0x1fff9f6d
    56f0:	1fff9108 	.word	0x1fff9108
    56f4:	1fff9e64 	.word	0x1fff9e64

000056f8 <Macro_process>:


// Macro Procesing Loop
// Called once per USB buffer send
inline void Macro_process()
{
    56f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	// If this is a interconnect slave node, send all scancodes to master node
	if ( !Connect_master )
    56fc:	4b33      	ldr	r3, [pc, #204]	; (57cc <Macro_process+0xd4>)
    56fe:	781d      	ldrb	r5, [r3, #0]
    5700:	b95d      	cbnz	r5, 571a <Macro_process+0x22>
	{
		if ( macroTriggerListBufferSize > 0 )
    5702:	4c33      	ldr	r4, [pc, #204]	; (57d0 <Macro_process+0xd8>)
    5704:	7822      	ldrb	r2, [r4, #0]
    5706:	2a00      	cmp	r2, #0
    5708:	d05d      	beq.n	57c6 <Macro_process+0xce>
		{
			Connect_send_ScanCode( Connect_id, macroTriggerListBuffer, macroTriggerListBufferSize );
    570a:	4b32      	ldr	r3, [pc, #200]	; (57d4 <Macro_process+0xdc>)
    570c:	4932      	ldr	r1, [pc, #200]	; (57d8 <Macro_process+0xe0>)
    570e:	7818      	ldrb	r0, [r3, #0]
    5710:	f7fe fec4 	bl	449c <Connect_send_ScanCode>
			macroTriggerListBufferSize = 0;
    5714:	7025      	strb	r5, [r4, #0]
    5716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif

#if defined(ConnectEnabled_define) || defined(PressReleaseCache_define)
#if defined(ConnectEnabled_define)
	// Check if there are any ScanCodes in the interconnect cache to process
	if ( Connect_master && macroInterconnectCacheSize > 0 )
    571a:	4a30      	ldr	r2, [pc, #192]	; (57dc <Macro_process+0xe4>)
    571c:	7811      	ldrb	r1, [r2, #0]
    571e:	b919      	cbnz	r1, 5728 <Macro_process+0x30>
		}
	}
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
    5720:	4b2f      	ldr	r3, [pc, #188]	; (57e0 <Macro_process+0xe8>)
    5722:	781b      	ldrb	r3, [r3, #0]
    5724:	bbb3      	cbnz	r3, 5794 <Macro_process+0x9c>
    5726:	e03d      	b.n	57a4 <Macro_process+0xac>
	if ( Connect_master && macroInterconnectCacheSize > 0 )
#endif
	{
		// Iterate over all the cache ScanCodes
		uint8_t currentInterconnectCacheSize = macroInterconnectCacheSize;
		macroInterconnectCacheSize = 0;
    5728:	2300      	movs	r3, #0
    572a:	7013      	strb	r3, [r2, #0]
    572c:	4b2d      	ldr	r3, [pc, #180]	; (57e4 <Macro_process+0xec>)
		for ( uint8_t c = 0; c < currentInterconnectCacheSize; c++ )
		{
			// Add to the trigger list
			macroTriggerListBuffer[ macroTriggerListBufferSize++ ] = macroInterconnectCache[ c ];
    572e:	4e28      	ldr	r6, [pc, #160]	; (57d0 <Macro_process+0xd8>)
    5730:	4f29      	ldr	r7, [pc, #164]	; (57d8 <Macro_process+0xe0>)
    5732:	2403      	movs	r4, #3
    5734:	fb04 3401 	mla	r4, r4, r1, r3
    5738:	1e5d      	subs	r5, r3, #1
				switch ( macroInterconnectCache[ c ].state )
				{
				// Re-add to interconnect cache in hold state
				case 0x01: // Press
				//case 0x02: // Hold // XXX Why does this not work? -HaaTa
					macroInterconnectCache[ c ].state = 0x02;
    573a:	f04f 0e02 	mov.w	lr, #2
#endif
	{
		// Iterate over all the cache ScanCodes
		uint8_t currentInterconnectCacheSize = macroInterconnectCacheSize;
		macroInterconnectCacheSize = 0;
		for ( uint8_t c = 0; c < currentInterconnectCacheSize; c++ )
    573e:	42a3      	cmp	r3, r4
    5740:	d0ee      	beq.n	5720 <Macro_process+0x28>
		{
			// Add to the trigger list
			macroTriggerListBuffer[ macroTriggerListBufferSize++ ] = macroInterconnectCache[ c ];
    5742:	7831      	ldrb	r1, [r6, #0]
    5744:	1c48      	adds	r0, r1, #1
    5746:	7030      	strb	r0, [r6, #0]
    5748:	4618      	mov	r0, r3
    574a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    574e:	f830 8d01 	ldrh.w	r8, [r0, #-1]!
    5752:	f827 8001 	strh.w	r8, [r7, r1]
    5756:	eb07 0c01 	add.w	ip, r7, r1
    575a:	7881      	ldrb	r1, [r0, #2]
    575c:	f88c 1002 	strb.w	r1, [ip, #2]

			// TODO Handle other TriggerGuide types (e.g. analog)
			switch ( macroInterconnectCache[ c ].type )
    5760:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    5764:	b9a1      	cbnz	r1, 5790 <Macro_process+0x98>
			{
			// Normal (Press/Hold/Release)
			case 0x00:
				// Decide what to do based on the current state
				switch ( macroInterconnectCache[ c ].state )
    5766:	7819      	ldrb	r1, [r3, #0]
    5768:	2901      	cmp	r1, #1
    576a:	d111      	bne.n	5790 <Macro_process+0x98>
				{
				// Re-add to interconnect cache in hold state
				case 0x01: // Press
				//case 0x02: // Hold // XXX Why does this not work? -HaaTa
					macroInterconnectCache[ c ].state = 0x02;
					macroInterconnectCache[ macroInterconnectCacheSize++ ] = macroInterconnectCache[ c ];
    576c:	7811      	ldrb	r1, [r2, #0]
				switch ( macroInterconnectCache[ c ].state )
				{
				// Re-add to interconnect cache in hold state
				case 0x01: // Press
				//case 0x02: // Hold // XXX Why does this not work? -HaaTa
					macroInterconnectCache[ c ].state = 0x02;
    576e:	f883 e000 	strb.w	lr, [r3]
					macroInterconnectCache[ macroInterconnectCacheSize++ ] = macroInterconnectCache[ c ];
    5772:	f101 0c01 	add.w	ip, r1, #1
    5776:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    577a:	f8b0 8000 	ldrh.w	r8, [r0]
    577e:	f825 8001 	strh.w	r8, [r5, r1]
    5782:	f882 c000 	strb.w	ip, [r2]
    5786:	eb05 0c01 	add.w	ip, r5, r1
    578a:	7881      	ldrb	r1, [r0, #2]
    578c:	f88c 1002 	strb.w	r1, [ip, #2]
    5790:	3303      	adds	r3, #3
    5792:	e7d4      	b.n	573e <Macro_process+0x46>
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
	{
		if ( macroStepCounter == 0 )
    5794:	4a14      	ldr	r2, [pc, #80]	; (57e8 <Macro_process+0xf0>)
    5796:	8813      	ldrh	r3, [r2, #0]
    5798:	b1ab      	cbz	r3, 57c6 <Macro_process+0xce>
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    579a:	3b01      	subs	r3, #1
		dbug_print("Macro Step");
    579c:	4813      	ldr	r0, [pc, #76]	; (57ec <Macro_process+0xf4>)
	{
		if ( macroStepCounter == 0 )
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    579e:	8013      	strh	r3, [r2, #0]
		dbug_print("Macro Step");
    57a0:	f002 fbe6 	bl	7f70 <_print>

	// Process result macros
	Result_process();

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    57a4:	4c0a      	ldr	r4, [pc, #40]	; (57d0 <Macro_process+0xd8>)
		macroStepCounter--;
		dbug_print("Macro Step");
	}

	// Process Trigger Macros
	Trigger_process();
    57a6:	f000 fb6f 	bl	5e88 <Trigger_process>


	// Process result macros
	Result_process();
    57aa:	f000 fa0b 	bl	5bc4 <Result_process>

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    57ae:	7820      	ldrb	r0, [r4, #0]
    57b0:	f7ff fa96 	bl	4ce0 <Scan_finishedWithMacro>

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    57b4:	4a0e      	ldr	r2, [pc, #56]	; (57f0 <Macro_process+0xf8>)
    57b6:	7812      	ldrb	r2, [r2, #0]

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;
    57b8:	2300      	movs	r3, #0
    57ba:	7023      	strb	r3, [r4, #0]

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    57bc:	b11a      	cbz	r2, 57c6 <Macro_process+0xce>
	{
		USBKeys_Modifiers = 0;
    57be:	4a0d      	ldr	r2, [pc, #52]	; (57f4 <Macro_process+0xfc>)
    57c0:	7013      	strb	r3, [r2, #0]
		USBKeys_Sent = 0;
    57c2:	4a0d      	ldr	r2, [pc, #52]	; (57f8 <Macro_process+0x100>)
    57c4:	7013      	strb	r3, [r2, #0]
    57c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57ca:	bf00      	nop
    57cc:	1fff9101 	.word	0x1fff9101
    57d0:	1fff9108 	.word	0x1fff9108
    57d4:	1fff8a05 	.word	0x1fff8a05
    57d8:	1fff9e62 	.word	0x1fff9e62
    57dc:	1fff9114 	.word	0x1fff9114
    57e0:	1fff9104 	.word	0x1fff9104
    57e4:	1fffa0e1 	.word	0x1fffa0e1
    57e8:	1fff9106 	.word	0x1fff9106
    57ec:	0000b21e 	.word	0x0000b21e
    57f0:	1fff9116 	.word	0x1fff9116
    57f4:	1fff91da 	.word	0x1fff91da
    57f8:	1fffa5bf 	.word	0x1fffa5bf

000057fc <Macro_setup>:
	}
}


inline void Macro_setup()
{
    57fc:	b508      	push	{r3, lr}
	// Register Macro CLI dictionary
	CLI_registerDictionary( macroCLIDict, macroCLIDictName );
    57fe:	490a      	ldr	r1, [pc, #40]	; (5828 <Macro_setup+0x2c>)
    5800:	480a      	ldr	r0, [pc, #40]	; (582c <Macro_setup+0x30>)
    5802:	f002 f94d 	bl	7aa0 <CLI_registerDictionary>

	// Disable Macro debug mode
	macroDebugMode = 0;
    5806:	4a0a      	ldr	r2, [pc, #40]	; (5830 <Macro_setup+0x34>)
    5808:	2300      	movs	r3, #0
    580a:	7013      	strb	r3, [r2, #0]

	// Disable Macro pause flag
	macroPauseMode = 0;
    580c:	4a09      	ldr	r2, [pc, #36]	; (5834 <Macro_setup+0x38>)
    580e:	7013      	strb	r3, [r2, #0]

	// Set Macro step counter to zero
	macroStepCounter = 0;
    5810:	4a09      	ldr	r2, [pc, #36]	; (5838 <Macro_setup+0x3c>)
    5812:	8013      	strh	r3, [r2, #0]

	// Make sure macro trigger buffer is empty
	macroTriggerListBufferSize = 0;
    5814:	4a09      	ldr	r2, [pc, #36]	; (583c <Macro_setup+0x40>)
    5816:	7013      	strb	r3, [r2, #0]

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;
    5818:	4a09      	ldr	r2, [pc, #36]	; (5840 <Macro_setup+0x44>)
    581a:	8013      	strh	r3, [r2, #0]

	// Setup Triggers
	Trigger_setup();
    581c:	f000 fb26 	bl	5e6c <Trigger_setup>

	// Setup Results
	Result_setup();
}
    5820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Setup Triggers
	Trigger_setup();

	// Setup Results
	Result_setup();
    5824:	f000 b9b8 	b.w	5b98 <Result_setup>
    5828:	00009cd8 	.word	0x00009cd8
    582c:	00009ef8 	.word	0x00009ef8
    5830:	1fff9116 	.word	0x1fff9116
    5834:	1fff9104 	.word	0x1fff9104
    5838:	1fff9106 	.word	0x1fff9106
    583c:	1fff9108 	.word	0x1fff9108
    5840:	1fff9e60 	.word	0x1fff9e60

00005844 <macroDebugShowTrigger>:
}

void macroDebugShowTrigger( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    5844:	285e      	cmp	r0, #94	; 0x5e
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
}

void macroDebugShowTrigger( var_uint_t index )
{
    5846:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    584a:	4605      	mov	r5, r0
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    584c:	d865      	bhi.n	591a <macroDebugShowTrigger+0xd6>

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    584e:	4834      	ldr	r0, [pc, #208]	; (5920 <macroDebugShowTrigger+0xdc>)
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    5850:	4e34      	ldr	r6, [pc, #208]	; (5924 <macroDebugShowTrigger+0xe0>)

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    5852:	f002 fb8d 	bl	7f70 <_print>
	info_msg("Trigger Macro Index: ");
    5856:	4834      	ldr	r0, [pc, #208]	; (5928 <macroDebugShowTrigger+0xe4>)
    5858:	f002 fb8a 	bl	7f70 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    585c:	4628      	mov	r0, r5
    585e:	f002 fbd4 	bl	800a <printInt16>
	print( NL );
    5862:	482f      	ldr	r0, [pc, #188]	; (5920 <macroDebugShowTrigger+0xdc>)
    5864:	f002 fb84 	bl	7f70 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    5868:	f856 8035 	ldr.w	r8, [r6, r5, lsl #3]
    586c:	f898 7000 	ldrb.w	r7, [r8]
	info_msg("Trigger Macro Index: ");
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
    5870:	2400      	movs	r4, #0
	uint8_t comboLength = macro->guide[ pos ];

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    5872:	b367      	cbz	r7, 58ce <macroDebugShowTrigger+0x8a>
	{
		// Initial position of the combo
		var_uint_t comboPos = ++pos;
    5874:	3401      	adds	r4, #1
    5876:	b2e4      	uxtb	r4, r4

		// Iterate through the combo
		while ( pos < comboLength * TriggerGuideSize + comboPos )
    5878:	2303      	movs	r3, #3
    587a:	fb13 4707 	smlabb	r7, r3, r7, r4
    587e:	42bc      	cmp	r4, r7
    5880:	d21e      	bcs.n	58c0 <macroDebugShowTrigger+0x7c>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ pos ]);
    5882:	eb08 0904 	add.w	r9, r8, r4

			// Display guide information about trigger key
			printHex( guide->scanCode );
    5886:	2101      	movs	r1, #1
    5888:	f899 0002 	ldrb.w	r0, [r9, #2]
    588c:	f002 fc13 	bl	80b6 <printHex_op>
			print("|");
    5890:	4826      	ldr	r0, [pc, #152]	; (592c <macroDebugShowTrigger+0xe8>)
    5892:	f002 fb6d 	bl	7f70 <_print>
			printHex( guide->type );
    5896:	2101      	movs	r1, #1
    5898:	f818 0004 	ldrb.w	r0, [r8, r4]
    589c:	f002 fc0b 	bl	80b6 <printHex_op>
			print("|");
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    58a0:	3403      	adds	r4, #3

			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
    58a2:	4822      	ldr	r0, [pc, #136]	; (592c <macroDebugShowTrigger+0xe8>)
    58a4:	f002 fb64 	bl	7f70 <_print>
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    58a8:	b2e4      	uxtb	r4, r4
			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
			printHex( guide->state );
    58aa:	2101      	movs	r1, #1
    58ac:	f899 0001 	ldrb.w	r0, [r9, #1]
    58b0:	f002 fc01 	bl	80b6 <printHex_op>

			// Increment position
			pos += TriggerGuideSize;

			// Only show combo separator if there are combos left in the sequence element
			if ( pos < comboLength * TriggerGuideSize + comboPos )
    58b4:	42bc      	cmp	r4, r7
    58b6:	d2e2      	bcs.n	587e <macroDebugShowTrigger+0x3a>
				print("+");
    58b8:	481d      	ldr	r0, [pc, #116]	; (5930 <macroDebugShowTrigger+0xec>)
    58ba:	f002 fb59 	bl	7f70 <_print>
    58be:	e7de      	b.n	587e <macroDebugShowTrigger+0x3a>
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos ];
    58c0:	f818 7004 	ldrb.w	r7, [r8, r4]

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    58c4:	b11f      	cbz	r7, 58ce <macroDebugShowTrigger+0x8a>
			print(";");
    58c6:	481b      	ldr	r0, [pc, #108]	; (5934 <macroDebugShowTrigger+0xf0>)
    58c8:	f002 fb52 	bl	7f70 <_print>
    58cc:	e7d1      	b.n	5872 <macroDebugShowTrigger+0x2e>
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    58ce:	4c1a      	ldr	r4, [pc, #104]	; (5938 <macroDebugShowTrigger+0xf4>)
		if ( comboLength != 0 )
			print(";");
	}

	// Display current position
	print( NL "Position: " );
    58d0:	481a      	ldr	r0, [pc, #104]	; (593c <macroDebugShowTrigger+0xf8>)
    58d2:	f002 fb4d 	bl	7f70 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    58d6:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
			print(";");
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    58da:	f814 0015 	ldrb.w	r0, [r4, r5, lsl #1]
    58de:	f002 fb94 	bl	800a <printInt16>

	// Display result macro index
	print( NL "Result Macro Index: " );
    58e2:	4817      	ldr	r0, [pc, #92]	; (5940 <macroDebugShowTrigger+0xfc>)
    58e4:	f002 fb44 	bl	7f70 <_print>
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
	switch ( record->state )
    58e8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    58ec:	7930      	ldrb	r0, [r6, #4]
    58ee:	f002 fb8c 	bl	800a <printInt16>

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
    58f2:	4814      	ldr	r0, [pc, #80]	; (5944 <macroDebugShowTrigger+0x100>)
    58f4:	f002 fb3c 	bl	7f70 <_print>
	switch ( record->state )
    58f8:	786b      	ldrb	r3, [r5, #1]
    58fa:	2b01      	cmp	r3, #1
    58fc:	d006      	beq.n	590c <macroDebugShowTrigger+0xc8>
    58fe:	d303      	bcc.n	5908 <macroDebugShowTrigger+0xc4>
    5900:	2b02      	cmp	r3, #2
    5902:	d005      	beq.n	5910 <macroDebugShowTrigger+0xcc>
    5904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	case TriggerMacro_Press:   print("Press");   break;
    5908:	480f      	ldr	r0, [pc, #60]	; (5948 <macroDebugShowTrigger+0x104>)
    590a:	e002      	b.n	5912 <macroDebugShowTrigger+0xce>
	case TriggerMacro_Release: print("Release"); break;
    590c:	480f      	ldr	r0, [pc, #60]	; (594c <macroDebugShowTrigger+0x108>)
    590e:	e000      	b.n	5912 <macroDebugShowTrigger+0xce>
	case TriggerMacro_Waiting: print("Waiting"); break;
    5910:	480f      	ldr	r0, [pc, #60]	; (5950 <macroDebugShowTrigger+0x10c>)
	}
}
    5912:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	print( NL "Trigger Macro State: " );
	switch ( record->state )
	{
	case TriggerMacro_Press:   print("Press");   break;
	case TriggerMacro_Release: print("Release"); break;
	case TriggerMacro_Waiting: print("Waiting"); break;
    5916:	f002 bb2b 	b.w	7f70 <_print>
    591a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    591e:	bf00      	nop
    5920:	0000c0ef 	.word	0x0000c0ef
    5924:	0000a47c 	.word	0x0000a47c
    5928:	0000b23e 	.word	0x0000b23e
    592c:	0000b266 	.word	0x0000b266
    5930:	00009772 	.word	0x00009772
    5934:	0000b268 	.word	0x0000b268
    5938:	1fffa1eb 	.word	0x1fffa1eb
    593c:	0000b26a 	.word	0x0000b26a
    5940:	0000b277 	.word	0x0000b277
    5944:	0000b28e 	.word	0x0000b28e
    5948:	0000b319 	.word	0x0000b319
    594c:	0000b322 	.word	0x0000b322
    5950:	0000b2a6 	.word	0x0000b2a6

00005954 <macroDebugShowResult>:
}

void macroDebugShowResult( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    5954:	285c      	cmp	r0, #92	; 0x5c
	case TriggerMacro_Waiting: print("Waiting"); break;
	}
}

void macroDebugShowResult( var_uint_t index )
{
    5956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    595a:	4604      	mov	r4, r0
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    595c:	f200 8093 	bhi.w	5a86 <macroDebugShowResult+0x132>

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];

	print( NL );
    5960:	484a      	ldr	r0, [pc, #296]	; (5a8c <macroDebugShowResult+0x138>)
			// Display Function Index
			printHex( guide->index );
			print("|");

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    5962:	f8df 913c 	ldr.w	r9, [pc, #316]	; 5aa0 <macroDebugShowResult+0x14c>

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];

	print( NL );
    5966:	f002 fb03 	bl	7f70 <_print>
	info_msg("Result Macro Index: ");
    596a:	4849      	ldr	r0, [pc, #292]	; (5a90 <macroDebugShowResult+0x13c>)
    596c:	f002 fb00 	bl	7f70 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    5970:	4620      	mov	r0, r4
    5972:	f002 fb4a 	bl	800a <printInt16>
	print( NL );
    5976:	4845      	ldr	r0, [pc, #276]	; (5a8c <macroDebugShowResult+0x138>)
    5978:	f002 fafa 	bl	7f70 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos++ ];
    597c:	4b45      	ldr	r3, [pc, #276]	; (5a94 <macroDebugShowResult+0x140>)
    597e:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
    5982:	f896 8000 	ldrb.w	r8, [r6]
    5986:	2701      	movs	r7, #1

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    5988:	f1b8 0f00 	cmp.w	r8, #0
    598c:	d060      	beq.n	5a50 <macroDebugShowResult+0xfc>
    598e:	463d      	mov	r5, r7
    5990:	2700      	movs	r7, #0
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    5992:	2101      	movs	r1, #1
    5994:	5d70      	ldrb	r0, [r6, r5]
    5996:	f002 fb8e 	bl	80b6 <printHex_op>
			print("|");
    599a:	483f      	ldr	r0, [pc, #252]	; (5a98 <macroDebugShowResult+0x144>)
    599c:	f002 fae8 	bl	7f70 <_print>

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    59a0:	5d73      	ldrb	r3, [r6, r5]
    59a2:	2101      	movs	r1, #1
    59a4:	f839 0033 	ldrh.w	r0, [r9, r3, lsl #3]
    59a8:	f002 fb85 	bl	80b6 <printHex_op>
			print("|");
    59ac:	483a      	ldr	r0, [pc, #232]	; (5a98 <macroDebugShowResult+0x144>)
    59ae:	f002 fadf 	bl	7f70 <_print>

			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
				(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    59b2:	5d73      	ldrb	r3, [r6, r5]
			capability( 0, 0xFF, 0xFF, 0 );
    59b4:	22ff      	movs	r2, #255	; 0xff
    59b6:	f859 b033 	ldr.w	fp, [r9, r3, lsl #3]
    59ba:	2300      	movs	r3, #0
    59bc:	4618      	mov	r0, r3
    59be:	4611      	mov	r1, r2
    59c0:	47d8      	blx	fp

			// Display Argument(s)
			print("(");
    59c2:	4836      	ldr	r0, [pc, #216]	; (5a9c <macroDebugShowResult+0x148>)
    59c4:	f002 fad4 	bl	7f70 <_print>

		// Iterate through the combo
		while ( funcCount < comboLength )
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);
    59c8:	eb06 0a05 	add.w	sl, r6, r5
			void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
				(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
			capability( 0, 0xFF, 0xFF, 0 );

			// Display Argument(s)
			print("(");
    59cc:	2300      	movs	r3, #0
			for ( var_uint_t arg = 0; arg < CapabilitiesList[ guide->index ].argCount; arg++ )
    59ce:	f89a 2000 	ldrb.w	r2, [sl]
    59d2:	4933      	ldr	r1, [pc, #204]	; (5aa0 <macroDebugShowResult+0x14c>)
    59d4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    59d8:	fa5f fb83 	uxtb.w	fp, r3
    59dc:	7912      	ldrb	r2, [r2, #4]
    59de:	455a      	cmp	r2, fp
    59e0:	d916      	bls.n	5a10 <macroDebugShowResult+0xbc>
			{
				// Arguments are only 8 bit values
				printHex( (&guide->args)[ arg ] );
    59e2:	eb0a 020b 	add.w	r2, sl, fp
    59e6:	2101      	movs	r1, #1
    59e8:	7850      	ldrb	r0, [r2, #1]
    59ea:	9301      	str	r3, [sp, #4]
    59ec:	f002 fb63 	bl	80b6 <printHex_op>

				// Only show arg separator if there are args left
				if ( arg + 1 < CapabilitiesList[ guide->index ].argCount )
    59f0:	f89a 2000 	ldrb.w	r2, [sl]
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
    59fa:	f10b 0b01 	add.w	fp, fp, #1
    59fe:	7912      	ldrb	r2, [r2, #4]
    5a00:	4593      	cmp	fp, r2
    5a02:	da03      	bge.n	5a0c <macroDebugShowResult+0xb8>
					print(",");
    5a04:	4827      	ldr	r0, [pc, #156]	; (5aa4 <macroDebugShowResult+0x150>)
    5a06:	f002 fab3 	bl	7f70 <_print>
    5a0a:	9b01      	ldr	r3, [sp, #4]
    5a0c:	3301      	adds	r3, #1
    5a0e:	e7de      	b.n	59ce <macroDebugShowResult+0x7a>
			}
			print(")");
    5a10:	4825      	ldr	r0, [pc, #148]	; (5aa8 <macroDebugShowResult+0x154>)
    5a12:	f002 faad 	bl	7f70 <_print>

			// Increment position
			pos += ResultGuideSize( guide );
    5a16:	f89a 3000 	ldrb.w	r3, [sl]
    5a1a:	4a21      	ldr	r2, [pc, #132]	; (5aa0 <macroDebugShowResult+0x14c>)
    5a1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3

			// Increment function count
			funcCount++;
    5a20:	3701      	adds	r7, #1
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5a22:	791b      	ldrb	r3, [r3, #4]

			// Increment function count
			funcCount++;
    5a24:	b2ff      	uxtb	r7, r7
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5a26:	3301      	adds	r3, #1
    5a28:	441d      	add	r5, r3

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    5a2a:	4547      	cmp	r7, r8
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5a2c:	b2ed      	uxtb	r5, r5

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    5a2e:	d202      	bcs.n	5a36 <macroDebugShowResult+0xe2>
				print("+");
    5a30:	481e      	ldr	r0, [pc, #120]	; (5aac <macroDebugShowResult+0x158>)
    5a32:	f002 fa9d 	bl	7f70 <_print>
	{
		// Function Counter, used to keep track of the combos processed
		var_uint_t funcCount = 0;

		// Iterate through the combo
		while ( funcCount < comboLength )
    5a36:	4547      	cmp	r7, r8
    5a38:	d1ab      	bne.n	5992 <macroDebugShowResult+0x3e>
			if ( funcCount < comboLength )
				print("+");
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos++ ];
    5a3a:	f816 8005 	ldrb.w	r8, [r6, r5]
    5a3e:	1c6f      	adds	r7, r5, #1
    5a40:	b2ff      	uxtb	r7, r7

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    5a42:	f1b8 0f00 	cmp.w	r8, #0
    5a46:	d003      	beq.n	5a50 <macroDebugShowResult+0xfc>
			print(";");
    5a48:	4819      	ldr	r0, [pc, #100]	; (5ab0 <macroDebugShowResult+0x15c>)
    5a4a:	f002 fa91 	bl	7f70 <_print>
    5a4e:	e79b      	b.n	5988 <macroDebugShowResult+0x34>
	}

	// Display current position
	print( NL "Position: " );
    5a50:	4818      	ldr	r0, [pc, #96]	; (5ab4 <macroDebugShowResult+0x160>)
    5a52:	f002 fa8d 	bl	7f70 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    5a56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5a5a:	4b17      	ldr	r3, [pc, #92]	; (5ab8 <macroDebugShowResult+0x164>)
    5a5c:	191d      	adds	r5, r3, r4
    5a5e:	5d18      	ldrb	r0, [r3, r4]
    5a60:	f002 fad3 	bl	800a <printInt16>

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
    5a64:	4815      	ldr	r0, [pc, #84]	; (5abc <macroDebugShowResult+0x168>)
    5a66:	f002 fa83 	bl	7f70 <_print>
	printHex( record->state );
    5a6a:	2101      	movs	r1, #1
    5a6c:	7868      	ldrb	r0, [r5, #1]
    5a6e:	f002 fb22 	bl	80b6 <printHex_op>
	print("/");
    5a72:	4813      	ldr	r0, [pc, #76]	; (5ac0 <macroDebugShowResult+0x16c>)
    5a74:	f002 fa7c 	bl	7f70 <_print>
	printHex( record->stateType );
    5a78:	78a8      	ldrb	r0, [r5, #2]
    5a7a:	2101      	movs	r1, #1
}
    5a7c:	b003      	add	sp, #12
    5a7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
	printHex( record->state );
	print("/");
	printHex( record->stateType );
    5a82:	f002 bb18 	b.w	80b6 <printHex_op>
}
    5a86:	b003      	add	sp, #12
    5a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a8c:	0000c0ef 	.word	0x0000c0ef
    5a90:	0000b2ae 	.word	0x0000b2ae
    5a94:	0000a020 	.word	0x0000a020
    5a98:	0000b266 	.word	0x0000b266
    5a9c:	0000be1f 	.word	0x0000be1f
    5aa0:	0000a2a8 	.word	0x0000a2a8
    5aa4:	0000b2d5 	.word	0x0000b2d5
    5aa8:	0000b8f8 	.word	0x0000b8f8
    5aac:	00009772 	.word	0x00009772
    5ab0:	0000b268 	.word	0x0000b268
    5ab4:	0000b26a 	.word	0x0000b26a
    5ab8:	1fff9f6d 	.word	0x1fff9f6d
    5abc:	0000b2d7 	.word	0x0000b2d7
    5ac0:	000096b0 	.word	0x000096b0

00005ac4 <cliFunc_macroShow>:

void cliFunc_macroShow( char* args )
{
    5ac4:	b513      	push	{r0, r1, r4, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5ac6:	ac02      	add	r4, sp, #8
    5ac8:	f844 0d04 	str.w	r0, [r4, #-4]!

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5acc:	9801      	ldr	r0, [sp, #4]
    5ace:	4622      	mov	r2, r4
    5ad0:	4669      	mov	r1, sp
    5ad2:	f001 ff6d 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5ad6:	9800      	ldr	r0, [sp, #0]
    5ad8:	7803      	ldrb	r3, [r0, #0]
    5ada:	b18b      	cbz	r3, 5b00 <cliFunc_macroShow+0x3c>
			break;

		// Ignore invalid codes
		switch ( arg1Ptr[0] )
    5adc:	2b52      	cmp	r3, #82	; 0x52
    5ade:	d008      	beq.n	5af2 <cliFunc_macroShow+0x2e>
    5ae0:	2b54      	cmp	r3, #84	; 0x54
    5ae2:	d1f3      	bne.n	5acc <cliFunc_macroShow+0x8>
		{
		// Indexed Trigger Macro
		case 'T':
			macroDebugShowTrigger( numToInt( &arg1Ptr[1] ) );
    5ae4:	3001      	adds	r0, #1
    5ae6:	f002 fb55 	bl	8194 <numToInt>
    5aea:	b2c0      	uxtb	r0, r0
    5aec:	f7ff feaa 	bl	5844 <macroDebugShowTrigger>
			break;
    5af0:	e7ec      	b.n	5acc <cliFunc_macroShow+0x8>
		// Indexed Result Macro
		case 'R':
			macroDebugShowResult( numToInt( &arg1Ptr[1] ) );
    5af2:	3001      	adds	r0, #1
    5af4:	f002 fb4e 	bl	8194 <numToInt>
    5af8:	b2c0      	uxtb	r0, r0
    5afa:	f7ff ff2b 	bl	5954 <macroDebugShowResult>
			break;
    5afe:	e7e5      	b.n	5acc <cliFunc_macroShow+0x8>
		}
	}
}
    5b00:	b002      	add	sp, #8
    5b02:	bd10      	pop	{r4, pc}

00005b04 <Macro_evalResultMacro>:

// ----- Functions -----

// Evaluate/Update ResultMacro
ResultMacroEval Macro_evalResultMacro( ResultPendingElem resultElem )
{
    5b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b08:	b085      	sub	sp, #20
    5b0a:	ab04      	add	r3, sp, #16
    5b0c:	e903 0003 	stmdb	r3, {r0, r1}
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultElem.index ];
    5b10:	f8bd 500c 	ldrh.w	r5, [sp, #12]
	ResultMacroRecord *record = &ResultMacroRecordList[ resultElem.index ];

	// Current Macro position
	var_uint_t pos = record->pos;
    5b14:	4b1d      	ldr	r3, [pc, #116]	; (5b8c <Macro_evalResultMacro+0x88>)

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    5b16:	4a1e      	ldr	r2, [pc, #120]	; (5b90 <Macro_evalResultMacro+0x8c>)
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);

		// Do lookup on capability function
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    5b18:	f8df a078 	ldr.w	sl, [pc, #120]	; 5b94 <Macro_evalResultMacro+0x90>

	// Current Macro position
	var_uint_t pos = record->pos;

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    5b1c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultElem.index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ resultElem.index ];

	// Current Macro position
	var_uint_t pos = record->pos;
    5b20:	ea4f 0945 	mov.w	r9, r5, lsl #1
    5b24:	eb09 0705 	add.w	r7, r9, r5
    5b28:	469b      	mov	fp, r3
    5b2a:	5ddc      	ldrb	r4, [r3, r7]
		// Do lookup on capability function
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( resultElem.trigger, record->state, record->stateType, &guide->args );
    5b2c:	18fb      	adds	r3, r7, r3

	// Current Macro position
	var_uint_t pos = record->pos;

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    5b2e:	5d32      	ldrb	r2, [r6, r4]
    5b30:	9201      	str	r2, [sp, #4]

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    5b32:	3401      	adds	r4, #1
    5b34:	b2e4      	uxtb	r4, r4

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
    5b36:	f04f 0800 	mov.w	r8, #0
		// Do lookup on capability function
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( resultElem.trigger, record->state, record->stateType, &guide->args );
    5b3a:	9300      	str	r3, [sp, #0]

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
    5b3c:	9a01      	ldr	r2, [sp, #4]
    5b3e:	fa5f f388 	uxtb.w	r3, r8
    5b42:	429a      	cmp	r2, r3
    5b44:	d915      	bls.n	5b72 <Macro_evalResultMacro+0x6e>
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);

		// Do lookup on capability function
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    5b46:	5d32      	ldrb	r2, [r6, r4]

		// Call capability
		capability( resultElem.trigger, record->state, record->stateType, &guide->args );
    5b48:	9900      	ldr	r1, [sp, #0]
    5b4a:	f85a 2032 	ldr.w	r2, [sl, r2, lsl #3]
    5b4e:	7849      	ldrb	r1, [r1, #1]
    5b50:	9802      	ldr	r0, [sp, #8]
    5b52:	4617      	mov	r7, r2
    5b54:	9a00      	ldr	r2, [sp, #0]

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);
    5b56:	1933      	adds	r3, r6, r4
		// Do lookup on capability function
		void (*capability)(TriggerMacro*, uint8_t, uint8_t, uint8_t*) = \
			(void(*)(TriggerMacro*, uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( resultElem.trigger, record->state, record->stateType, &guide->args );
    5b58:	3301      	adds	r3, #1
    5b5a:	7892      	ldrb	r2, [r2, #2]
    5b5c:	47b8      	blx	r7

		// Increment counters
		funcCount++;
		comboItem += ResultGuideSize( (ResultGuide*)(&macro->guide[ comboItem ]) );
    5b5e:	5d33      	ldrb	r3, [r6, r4]
    5b60:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
    5b64:	f108 0801 	add.w	r8, r8, #1
    5b68:	791b      	ldrb	r3, [r3, #4]
    5b6a:	3301      	adds	r3, #1
    5b6c:	441c      	add	r4, r3
    5b6e:	b2e4      	uxtb	r4, r4
    5b70:	e7e4      	b.n	5b3c <Macro_evalResultMacro+0x38>
	}

	// Move to next item in the sequence
	record->pos = comboItem;
    5b72:	444d      	add	r5, r9
    5b74:	f80b 4005 	strb.w	r4, [fp, r5]

	// If the ResultMacro is finished, remove
	if ( macro->guide[ comboItem ] == 0 )
    5b78:	5d33      	ldrb	r3, [r6, r4]
    5b7a:	b91b      	cbnz	r3, 5b84 <Macro_evalResultMacro+0x80>
	{
		record->pos = 0;
    5b7c:	4a03      	ldr	r2, [pc, #12]	; (5b8c <Macro_evalResultMacro+0x88>)
		return ResultMacroEval_Remove;
    5b7e:	2001      	movs	r0, #1
	record->pos = comboItem;

	// If the ResultMacro is finished, remove
	if ( macro->guide[ comboItem ] == 0 )
	{
		record->pos = 0;
    5b80:	5553      	strb	r3, [r2, r5]
		return ResultMacroEval_Remove;
    5b82:	e000      	b.n	5b86 <Macro_evalResultMacro+0x82>
	}

	// Otherwise leave the macro in the list
	return ResultMacroEval_DoNothing;
    5b84:	2000      	movs	r0, #0
}
    5b86:	b005      	add	sp, #20
    5b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b8c:	1fff9f6d 	.word	0x1fff9f6d
    5b90:	0000a020 	.word	0x0000a020
    5b94:	0000a2a8 	.word	0x0000a2a8

00005b98 <Result_setup>:


void Result_setup()
{
	// Initialize macroResultMacroPendingList
	macroResultMacroPendingList.size = 0;
    5b98:	4a08      	ldr	r2, [pc, #32]	; (5bbc <Result_setup+0x24>)

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
	{
		ResultMacroRecordList[ macro ].pos       = 0;
    5b9a:	4809      	ldr	r0, [pc, #36]	; (5bc0 <Result_setup+0x28>)


void Result_setup()
{
	// Initialize macroResultMacroPendingList
	macroResultMacroPendingList.size = 0;
    5b9c:	2300      	movs	r3, #0
{
}


void Result_setup()
{
    5b9e:	b510      	push	{r4, lr}
	// Initialize macroResultMacroPendingList
	macroResultMacroPendingList.size = 0;
    5ba0:	f8a2 32e8 	strh.w	r3, [r2, #744]	; 0x2e8

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    5ba4:	f240 1417 	movw	r4, #279	; 0x117
	{
		ResultMacroRecordList[ macro ].pos       = 0;
    5ba8:	461a      	mov	r2, r3
    5baa:	1819      	adds	r1, r3, r0
    5bac:	541a      	strb	r2, [r3, r0]
    5bae:	3303      	adds	r3, #3
{
	// Initialize macroResultMacroPendingList
	macroResultMacroPendingList.size = 0;

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    5bb0:	42a3      	cmp	r3, r4
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
    5bb2:	704a      	strb	r2, [r1, #1]
		ResultMacroRecordList[ macro ].stateType = 0;
    5bb4:	708a      	strb	r2, [r1, #2]
{
	// Initialize macroResultMacroPendingList
	macroResultMacroPendingList.size = 0;

	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    5bb6:	d1f8      	bne.n	5baa <Result_setup+0x12>
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
		ResultMacroRecordList[ macro ].stateType = 0;
	}
}
    5bb8:	bd10      	pop	{r4, pc}
    5bba:	bf00      	nop
    5bbc:	1fffa2ac 	.word	0x1fffa2ac
    5bc0:	1fff9f6d 	.word	0x1fff9f6d

00005bc4 <Result_process>:


void Result_process()
{
    5bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	index_uint_t macroResultMacroPendingListTail = 0;

	// Iterate through the pending ResultMacros, processing each of them
	for ( index_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    5bc8:	2600      	movs	r6, #0
    5bca:	4f10      	ldr	r7, [pc, #64]	; (5c0c <Result_process+0x48>)

void Result_process()
{
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	index_uint_t macroResultMacroPendingListTail = 0;
    5bcc:	4635      	mov	r5, r6

	// Iterate through the pending ResultMacros, processing each of them
	for ( index_uint_t macro = 0; macro < macroResultMacroPendingList.size; macro++ )
    5bce:	f8b7 32e8 	ldrh.w	r3, [r7, #744]	; 0x2e8
    5bd2:	b2b4      	uxth	r4, r6
    5bd4:	42a3      	cmp	r3, r4
    5bd6:	d914      	bls.n	5c02 <Result_process+0x3e>
	{
		switch ( Macro_evalResultMacro( macroResultMacroPendingList.data[ macro ] ) )
    5bd8:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    5bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
    5be0:	f7ff ff90 	bl	5b04 <Macro_evalResultMacro>
    5be4:	2801      	cmp	r0, #1
    5be6:	d00a      	beq.n	5bfe <Result_process+0x3a>
		{
		// Re-add macros to pending list
		case ResultMacroEval_DoNothing:
		default:
			memcpy( &macroResultMacroPendingList.data[ macroResultMacroPendingListTail++ ],
    5be8:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
    5bec:	2208      	movs	r2, #8
    5bee:	4621      	mov	r1, r4
    5bf0:	f105 0801 	add.w	r8, r5, #1
    5bf4:	f7fc fcc2 	bl	257c <memcpy>
    5bf8:	fa1f f888 	uxth.w	r8, r8
    5bfc:	4645      	mov	r5, r8
    5bfe:	3601      	adds	r6, #1
    5c00:	e7e5      	b.n	5bce <Result_process+0xa>
			break;
		}
	}

	// Update the macroResultMacroPendingListSize with the tail pointer
	macroResultMacroPendingList.size = macroResultMacroPendingListTail;
    5c02:	4b02      	ldr	r3, [pc, #8]	; (5c0c <Result_process+0x48>)
    5c04:	f8a3 52e8 	strh.w	r5, [r3, #744]	; 0x2e8
    5c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c0c:	1fffa2ac 	.word	0x1fffa2ac

00005c10 <Macro_evalTriggerMacro>:
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5c14:	4c8c      	ldr	r4, [pc, #560]	; (5e48 <Macro_evalTriggerMacro+0x238>)
    5c16:	f8df 9248 	ldr.w	r9, [pc, #584]	; 5e60 <Macro_evalTriggerMacro+0x250>
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5c1a:	b085      	sub	sp, #20
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5c1c:	0043      	lsls	r3, r0, #1
    5c1e:	9302      	str	r3, [sp, #8]
    5c20:	18e3      	adds	r3, r4, r3
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5c22:	4682      	mov	sl, r0
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5c24:	7859      	ldrb	r1, [r3, #1]
    5c26:	2901      	cmp	r1, #1
    5c28:	d10c      	bne.n	5c44 <Macro_evalTriggerMacro+0x34>
	{
		record->state = TriggerMacro_Waiting;
    5c2a:	2102      	movs	r1, #2
    5c2c:	7059      	strb	r1, [r3, #1]
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
    5c2e:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
    5c32:	f859 1030 	ldr.w	r1, [r9, r0, lsl #3]
    5c36:	5cc9      	ldrb	r1, [r1, r3]
    5c38:	3301      	adds	r3, #1
    5c3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5c3e:	440b      	add	r3, r1
    5c40:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    5c44:	f814 301a 	ldrb.w	r3, [r4, sl, lsl #1]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    5c48:	f859 003a 	ldr.w	r0, [r9, sl, lsl #3]
		record->state = TriggerMacro_Waiting;
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    5c4c:	9300      	str	r3, [sp, #0]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    5c4e:	5cc3      	ldrb	r3, [r0, r3]
    5c50:	eb03 0343 	add.w	r3, r3, r3, lsl #1

	// If no combo items are left, remove the TriggerMacro from the pending list
	if ( comboLength == 0 )
    5c54:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    5c58:	9303      	str	r3, [sp, #12]
    5c5a:	d101      	bne.n	5c60 <Macro_evalTriggerMacro+0x50>
	{
		return TriggerMacroEval_Remove;
    5c5c:	2003      	movs	r0, #3
    5c5e:	e0ef      	b.n	5e40 <Macro_evalTriggerMacro+0x230>
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    5c60:	7801      	ldrb	r1, [r0, #0]
    5c62:	2303      	movs	r3, #3
    5c64:	fb03 0301 	mla	r3, r3, r1, r0
	// On scan after position increment, change to TriggerMacro_Waiting state
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
    5c68:	2500      	movs	r5, #0
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    5c6a:	785f      	ldrb	r7, [r3, #1]
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5c6c:	9b00      	ldr	r3, [sp, #0]
    5c6e:	f103 0801 	add.w	r8, r3, #1
    5c72:	fa5f f888 	uxtb.w	r8, r8
    5c76:	9b00      	ldr	r3, [sp, #0]
    5c78:	9a03      	ldr	r2, [sp, #12]
    5c7a:	4413      	add	r3, r2
    5c7c:	4543      	cmp	r3, r8
    5c7e:	db77      	blt.n	5d70 <Macro_evalTriggerMacro+0x160>
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    5c80:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
		// Iterate through the key buffer, comparing to each key in the combo
		for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    5c84:	f04f 0b00 	mov.w	fp, #0
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    5c88:	4443      	add	r3, r8
    5c8a:	9301      	str	r3, [sp, #4]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
    5c8c:	465e      	mov	r6, fp
		// Iterate through the key buffer, comparing to each key in the combo
		for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    5c8e:	4b6f      	ldr	r3, [pc, #444]	; (5e4c <Macro_evalTriggerMacro+0x23c>)
    5c90:	7819      	ldrb	r1, [r3, #0]
    5c92:	fa5f f38b 	uxtb.w	r3, fp
    5c96:	4299      	cmp	r1, r3
    5c98:	f240 80cf 	bls.w	5e3a <Macro_evalTriggerMacro+0x22a>
    5c9c:	9a01      	ldr	r2, [sp, #4]
    5c9e:	7811      	ldrb	r1, [r2, #0]

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
    5ca0:	b36f      	cbz	r7, 5cfe <Macro_evalTriggerMacro+0xee>
// Votes on the given key vs. guide, long macros
// A long macro is defined as a guide with more than 1 combo
inline TriggerMacroVote Macro_evalLongTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    5ca2:	2901      	cmp	r1, #1
    5ca4:	d024      	beq.n	5cf0 <Macro_evalTriggerMacro+0xe0>
    5ca6:	d303      	bcc.n	5cb0 <Macro_evalTriggerMacro+0xa0>
    5ca8:	2902      	cmp	r1, #2
    5caa:	d123      	bne.n	5cf4 <Macro_evalTriggerMacro+0xe4>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    5cac:	4868      	ldr	r0, [pc, #416]	; (5e50 <Macro_evalTriggerMacro+0x240>)
    5cae:	e022      	b.n	5cf6 <Macro_evalTriggerMacro+0xe6>
	{
	// Normal State Type
	case 0x00:
		// Depending on the state of the buffered key, make voting decision
		// Incorrect key
		if ( guide->scanCode != key->scanCode )
    5cb0:	4a68      	ldr	r2, [pc, #416]	; (5e54 <Macro_evalTriggerMacro+0x244>)
    5cb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5cb6:	4413      	add	r3, r2
    5cb8:	9a01      	ldr	r2, [sp, #4]
    5cba:	7899      	ldrb	r1, [r3, #2]
    5cbc:	7890      	ldrb	r0, [r2, #2]
		{
			switch ( key->state )
    5cbe:	785b      	ldrb	r3, [r3, #1]
	{
	// Normal State Type
	case 0x00:
		// Depending on the state of the buffered key, make voting decision
		// Incorrect key
		if ( guide->scanCode != key->scanCode )
    5cc0:	4288      	cmp	r0, r1
    5cc2:	d00c      	beq.n	5cde <Macro_evalTriggerMacro+0xce>
		{
			switch ( key->state )
    5cc4:	2b02      	cmp	r3, #2
    5cc6:	d040      	beq.n	5d4a <Macro_evalTriggerMacro+0x13a>
    5cc8:	2b03      	cmp	r3, #3
    5cca:	d006      	beq.n	5cda <Macro_evalTriggerMacro+0xca>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5ccc:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    5cd0:	f1dc 0300 	rsbs	r3, ip, #0
    5cd4:	eb43 030c 	adc.w	r3, r3, ip
    5cd8:	e037      	b.n	5d4a <Macro_evalTriggerMacro+0x13a>
			case 0x02:
				return TriggerMacroVote_DoNothing;

			// Wrong key released, fail out if pos == 0
			case 0x03:
				return TriggerMacroVote_DoNothing | TriggerMacroVote_DoNothingRelease;
    5cda:	2306      	movs	r3, #6
    5cdc:	e035      	b.n	5d4a <Macro_evalTriggerMacro+0x13a>
		}

		// Correct key
		else
		{
			switch ( key->state )
    5cde:	2b02      	cmp	r3, #2
    5ce0:	d027      	beq.n	5d32 <Macro_evalTriggerMacro+0x122>
    5ce2:	2b03      	cmp	r3, #3
    5ce4:	d027      	beq.n	5d36 <Macro_evalTriggerMacro+0x126>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5ce6:	2b01      	cmp	r3, #1
    5ce8:	bf0c      	ite	eq
    5cea:	2308      	moveq	r3, #8
    5cec:	2300      	movne	r3, #0
    5cee:	e02c      	b.n	5d4a <Macro_evalTriggerMacro+0x13a>

		break;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    5cf0:	4859      	ldr	r0, [pc, #356]	; (5e58 <Macro_evalTriggerMacro+0x248>)
    5cf2:	e000      	b.n	5cf6 <Macro_evalTriggerMacro+0xe6>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    5cf4:	4859      	ldr	r0, [pc, #356]	; (5e5c <Macro_evalTriggerMacro+0x24c>)
    5cf6:	f002 f93b 	bl	7f70 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5cfa:	2300      	movs	r3, #0
    5cfc:	e025      	b.n	5d4a <Macro_evalTriggerMacro+0x13a>

// Votes on the given key vs. guide, short macros
inline TriggerMacroVote Macro_evalShortTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    5cfe:	2901      	cmp	r1, #1
    5d00:	d01b      	beq.n	5d3a <Macro_evalTriggerMacro+0x12a>
    5d02:	d303      	bcc.n	5d0c <Macro_evalTriggerMacro+0xfc>
    5d04:	2902      	cmp	r1, #2
    5d06:	d11a      	bne.n	5d3e <Macro_evalTriggerMacro+0x12e>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    5d08:	4851      	ldr	r0, [pc, #324]	; (5e50 <Macro_evalTriggerMacro+0x240>)
    5d0a:	e019      	b.n	5d40 <Macro_evalTriggerMacro+0x130>
	switch ( guide->type )
	{
	// Normal State Type
	case 0x00:
		// For short TriggerMacros completely ignore incorrect keys
		if ( guide->scanCode == key->scanCode )
    5d0c:	4a51      	ldr	r2, [pc, #324]	; (5e54 <Macro_evalTriggerMacro+0x244>)
    5d0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5d12:	4413      	add	r3, r2
    5d14:	9a01      	ldr	r2, [sp, #4]
    5d16:	7899      	ldrb	r1, [r3, #2]
    5d18:	7890      	ldrb	r0, [r2, #2]
    5d1a:	4288      	cmp	r0, r1
    5d1c:	d114      	bne.n	5d48 <Macro_evalTriggerMacro+0x138>
		{
			switch ( key->state )
    5d1e:	785b      	ldrb	r3, [r3, #1]
    5d20:	2b02      	cmp	r3, #2
    5d22:	d006      	beq.n	5d32 <Macro_evalTriggerMacro+0x122>
    5d24:	2b03      	cmp	r3, #3
    5d26:	d006      	beq.n	5d36 <Macro_evalTriggerMacro+0x126>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    5d28:	2b01      	cmp	r3, #1
    5d2a:	bf0c      	ite	eq
    5d2c:	2308      	moveq	r3, #8
    5d2e:	2302      	movne	r3, #2
    5d30:	e00b      	b.n	5d4a <Macro_evalTriggerMacro+0x13a>
			case 0x01:
				return TriggerMacroVote_Pass;

			// Correct key, held, possible passing or release
			case 0x02:
				return TriggerMacroVote_PassRelease;
    5d32:	2318      	movs	r3, #24
    5d34:	e009      	b.n	5d4a <Macro_evalTriggerMacro+0x13a>

			// Correct key, released, possible release
			case 0x03:
				return TriggerMacroVote_Release;
    5d36:	2310      	movs	r3, #16
    5d38:	e007      	b.n	5d4a <Macro_evalTriggerMacro+0x13a>

		return TriggerMacroVote_DoNothing;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    5d3a:	4847      	ldr	r0, [pc, #284]	; (5e58 <Macro_evalTriggerMacro+0x248>)
    5d3c:	e000      	b.n	5d40 <Macro_evalTriggerMacro+0x130>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    5d3e:	4847      	ldr	r0, [pc, #284]	; (5e5c <Macro_evalTriggerMacro+0x24c>)
    5d40:	f002 f916 	bl	7f70 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5d44:	463b      	mov	r3, r7
    5d46:	e000      	b.n	5d4a <Macro_evalTriggerMacro+0x13a>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    5d48:	2302      	movs	r3, #2
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    5d4a:	4333      	orrs	r3, r6
    5d4c:	b2de      	uxtb	r6, r3
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
			if ( vote >= TriggerMacroVote_Pass )
    5d4e:	2e07      	cmp	r6, #7
    5d50:	f10b 0b01 	add.w	fp, fp, #1
    5d54:	d99b      	bls.n	5c8e <Macro_evalTriggerMacro+0x7e>
			{
				vote &= TriggerMacroVote_Release | TriggerMacroVote_PassRelease | TriggerMacroVote_Pass;
    5d56:	f006 0618 	and.w	r6, r6, #24
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    5d5a:	b91f      	cbnz	r7, 5d64 <Macro_evalTriggerMacro+0x154>
    5d5c:	2e07      	cmp	r6, #7
    5d5e:	d801      	bhi.n	5d64 <Macro_evalTriggerMacro+0x154>
			vote |= TriggerMacroVote_Fail;
    5d60:	f046 0601 	orr.w	r6, r6, #1
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5d64:	f108 0803 	add.w	r8, r8, #3
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
			vote |= TriggerMacroVote_Fail;

		// After voting, append to overall vote
		overallVote |= vote;
    5d68:	4335      	orrs	r5, r6
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5d6a:	fa5f f888 	uxtb.w	r8, r8
    5d6e:	e782      	b.n	5c76 <Macro_evalTriggerMacro+0x66>
		overallVote |= vote;
	}

	// If no pass vote was found after scanning the entire combo
	// And this is the first position in the combo, just remove it (nothing important happened)
	if ( longMacro && overallVote & TriggerMacroVote_DoNothingRelease && pos == 0 )
    5d70:	b12f      	cbz	r7, 5d7e <Macro_evalTriggerMacro+0x16e>
    5d72:	076e      	lsls	r6, r5, #29
    5d74:	d503      	bpl.n	5d7e <Macro_evalTriggerMacro+0x16e>
    5d76:	9a00      	ldr	r2, [sp, #0]
    5d78:	b90a      	cbnz	r2, 5d7e <Macro_evalTriggerMacro+0x16e>
		overallVote |= TriggerMacroVote_Fail;
    5d7a:	f045 0501 	orr.w	r5, r5, #1

	// Decide new state of macro after voting
	// Fail macro, remove from pending list
	if ( overallVote & TriggerMacroVote_Fail )
    5d7e:	07e8      	lsls	r0, r5, #31
    5d80:	f53f af6c 	bmi.w	5c5c <Macro_evalTriggerMacro+0x4c>
	{
		return TriggerMacroEval_Remove;
	}
	// Do nothing, incorrect key is being held or released
	else if ( overallVote & TriggerMacroVote_DoNothing && longMacro )
    5d84:	07a9      	lsls	r1, r5, #30
    5d86:	d501      	bpl.n	5d8c <Macro_evalTriggerMacro+0x17c>
    5d88:	2f00      	cmp	r7, #0
    5d8a:	d154      	bne.n	5e36 <Macro_evalTriggerMacro+0x226>
    5d8c:	f005 0110 	and.w	r1, r5, #16
	{
		// Just doing nothing :)
	}
	// If ready for transition and in Press state, set to Waiting and increment combo position
	// Position is incremented (and possibly remove the macro from the pending list) on the next iteration
	else if ( overallVote & TriggerMacroVote_Release && record->state == TriggerMacro_Press )
    5d90:	f001 00ff 	and.w	r0, r1, #255	; 0xff
    5d94:	b1d9      	cbz	r1, 5dce <Macro_evalTriggerMacro+0x1be>
    5d96:	9a02      	ldr	r2, [sp, #8]
    5d98:	18a1      	adds	r1, r4, r2
    5d9a:	784e      	ldrb	r6, [r1, #1]
    5d9c:	b9be      	cbnz	r6, 5dce <Macro_evalTriggerMacro+0x1be>
	{
		record->state = TriggerMacro_Release;
    5d9e:	2301      	movs	r3, #1
    5da0:	704b      	strb	r3, [r1, #1]

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
    5da2:	4b29      	ldr	r3, [pc, #164]	; (5e48 <Macro_evalTriggerMacro+0x238>)
    5da4:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    5da8:	f813 301a 	ldrb.w	r3, [r3, sl, lsl #1]
    5dac:	5cc8      	ldrb	r0, [r1, r3]
    5dae:	2203      	movs	r2, #3
    5db0:	3301      	adds	r3, #1
    5db2:	fb12 3300 	smlabb	r3, r2, r0, r3
    5db6:	5ccb      	ldrb	r3, [r1, r3]
    5db8:	b13b      	cbz	r3, 5dca <Macro_evalTriggerMacro+0x1ba>
		return TriggerMacroEval_DoResultAndRemove;
	}

	// If this is a short macro, just remove it
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
    5dba:	2f00      	cmp	r7, #0
    5dbc:	f43f af4e 	beq.w	5c5c <Macro_evalTriggerMacro+0x4c>
    5dc0:	e039      	b.n	5e36 <Macro_evalTriggerMacro+0x226>
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    5dc2:	5cc3      	ldrb	r3, [r0, r3]
    5dc4:	b35b      	cbz	r3, 5e1e <Macro_evalTriggerMacro+0x20e>
			{
				// Only ever trigger result once, on press
				if ( overallVote == TriggerMacroVote_Pass )
    5dc6:	2d08      	cmp	r5, #8
    5dc8:	d1f7      	bne.n	5dba <Macro_evalTriggerMacro+0x1aa>
	{
		record->state = TriggerMacro_Release;

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
			return TriggerMacroEval_DoResultAndRemove;
    5dca:	2002      	movs	r0, #2
    5dcc:	e038      	b.n	5e40 <Macro_evalTriggerMacro+0x230>
	}
	// If passing and in Waiting state, set macro state to Press
	else if ( overallVote & TriggerMacroVote_Pass
    5dce:	072a      	lsls	r2, r5, #28
    5dd0:	d52e      	bpl.n	5e30 <Macro_evalTriggerMacro+0x220>
		&& ( record->state == TriggerMacro_Waiting || record->state == TriggerMacro_Press ) )
    5dd2:	9a02      	ldr	r2, [sp, #8]
    5dd4:	4414      	add	r4, r2
    5dd6:	7861      	ldrb	r1, [r4, #1]
    5dd8:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
    5ddc:	d128      	bne.n	5e30 <Macro_evalTriggerMacro+0x220>
	{
		record->state = TriggerMacro_Press;
    5dde:	7061      	strb	r1, [r4, #1]

		// If in press state, and this is the final combo, send request for ResultMacro
		// Check to see if the result macro only has a single element
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
    5de0:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    5de4:	440b      	add	r3, r1
    5de6:	785b      	ldrb	r3, [r3, #1]
    5de8:	2b00      	cmp	r3, #0
    5dea:	d1e6      	bne.n	5dba <Macro_evalTriggerMacro+0x1aa>
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    5dec:	481c      	ldr	r0, [pc, #112]	; (5e60 <Macro_evalTriggerMacro+0x250>)
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
		position += ResultGuideSize( (ResultGuide*)&macro->guide[ position ] );
    5dee:	f8df e078 	ldr.w	lr, [pc, #120]	; 5e68 <Macro_evalTriggerMacro+0x258>
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    5df2:	eb00 02ca 	add.w	r2, r0, sl, lsl #3
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    5df6:	7910      	ldrb	r0, [r2, #4]
    5df8:	4a1a      	ldr	r2, [pc, #104]	; (5e64 <Macro_evalTriggerMacro+0x254>)
    5dfa:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    5dfe:	7806      	ldrb	r6, [r0, #0]
    5e00:	461a      	mov	r2, r3
inline uint8_t Macro_isLongResultMacro( const ResultMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
    5e02:	2301      	movs	r3, #1
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    5e04:	b2d4      	uxtb	r4, r2
    5e06:	42a6      	cmp	r6, r4
    5e08:	d9db      	bls.n	5dc2 <Macro_evalTriggerMacro+0x1b2>
		position += ResultGuideSize( (ResultGuide*)&macro->guide[ position ] );
    5e0a:	5cc4      	ldrb	r4, [r0, r3]
    5e0c:	eb0e 04c4 	add.w	r4, lr, r4, lsl #3
    5e10:	3201      	adds	r2, #1
    5e12:	7924      	ldrb	r4, [r4, #4]
    5e14:	3401      	adds	r4, #1
    5e16:	fa53 f384 	uxtab	r3, r3, r4
    5e1a:	b2db      	uxtb	r3, r3
    5e1c:	e7f2      	b.n	5e04 <Macro_evalTriggerMacro+0x1f4>
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    5e1e:	780a      	ldrb	r2, [r1, #0]
    5e20:	2001      	movs	r0, #1
    5e22:	2303      	movs	r3, #3
    5e24:	fb13 0302 	smlabb	r3, r3, r2, r0
			}
			// Short result macro
			else
			{
				// Only trigger result once, on press, if long trigger (more than 1 combo)
				if ( Macro_isLongTriggerMacro( macro ) )
    5e28:	5ccb      	ldrb	r3, [r1, r3]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d1cd      	bne.n	5dca <Macro_evalTriggerMacro+0x1ba>
    5e2e:	e007      	b.n	5e40 <Macro_evalTriggerMacro+0x230>
			}
		}
	}
	// Otherwise, just remove the macro on key release
	// One more result has to be called to indicate to the ResultMacro that the key transitioned to the release state
	else if ( overallVote & TriggerMacroVote_Release )
    5e30:	2800      	cmp	r0, #0
    5e32:	d1ca      	bne.n	5dca <Macro_evalTriggerMacro+0x1ba>
    5e34:	e7c1      	b.n	5dba <Macro_evalTriggerMacro+0x1aa>
	// If this is a short macro, just remove it
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
    5e36:	2000      	movs	r0, #0
    5e38:	e002      	b.n	5e40 <Macro_evalTriggerMacro+0x230>
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    5e3a:	2f00      	cmp	r7, #0
    5e3c:	d192      	bne.n	5d64 <Macro_evalTriggerMacro+0x154>
    5e3e:	e78f      	b.n	5d60 <Macro_evalTriggerMacro+0x150>
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
}
    5e40:	b005      	add	sp, #20
    5e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e46:	bf00      	nop
    5e48:	1fffa1eb 	.word	0x1fffa1eb
    5e4c:	1fff9108 	.word	0x1fff9108
    5e50:	0000b50b 	.word	0x0000b50b
    5e54:	1fff9e62 	.word	0x1fff9e62
    5e58:	0000b4d0 	.word	0x0000b4d0
    5e5c:	0000b549 	.word	0x0000b549
    5e60:	0000a47c 	.word	0x0000a47c
    5e64:	0000a020 	.word	0x0000a020
    5e68:	0000a2a8 	.word	0x0000a2a8

00005e6c <Trigger_setup>:
	return 0;
}


void Trigger_setup()
{
    5e6c:	2300      	movs	r3, #0
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
    5e6e:	4a05      	ldr	r2, [pc, #20]	; (5e84 <Trigger_setup+0x18>)
	return 0;
}


void Trigger_setup()
{
    5e70:	b510      	push	{r4, lr}
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    5e72:	2002      	movs	r0, #2
void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
    5e74:	461c      	mov	r4, r3
    5e76:	1899      	adds	r1, r3, r2
    5e78:	549c      	strb	r4, [r3, r2]
    5e7a:	3302      	adds	r3, #2


void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5e7c:	2bbe      	cmp	r3, #190	; 0xbe
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    5e7e:	7048      	strb	r0, [r1, #1]


void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5e80:	d1f9      	bne.n	5e76 <Trigger_setup+0xa>
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
	}
}
    5e82:	bd10      	pop	{r4, pc}
    5e84:	1fffa1eb 	.word	0x1fffa1eb

00005e88 <Trigger_process>:


void Trigger_process()
{
    5e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			//  triggerList needs to be added
			var_uint_t pending = 0;
			for ( ; pending < macroTriggerMacroPendingListSize; pending++ )
			{
				// Stop scanning if the trigger macro index is found in the pending list
				if ( macroTriggerMacroPendingList[ pending ] == triggerMacroIndex )
    5e8c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 5f90 <Trigger_process+0x108>
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    5e90:	2500      	movs	r5, #0

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    5e92:	4b3d      	ldr	r3, [pc, #244]	; (5f88 <Trigger_process+0x100>)
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	b2e8      	uxtb	r0, r5
    5e98:	4283      	cmp	r3, r0
    5e9a:	d944      	bls.n	5f26 <Trigger_process+0x9e>
	{
		// TODO LED States
		// TODO Analog Switches
		// Only add TriggerMacro to pending list if key was pressed (not held, released or off)
		if ( macroTriggerListBuffer[ key ].state == 0x00 && macroTriggerListBuffer[ key ].state != 0x01 )
    5e9c:	4b3b      	ldr	r3, [pc, #236]	; (5f8c <Trigger_process+0x104>)
    5e9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5ea2:	4418      	add	r0, r3
    5ea4:	7841      	ldrb	r1, [r0, #1]
    5ea6:	b909      	cbnz	r1, 5eac <Trigger_process+0x24>
    5ea8:	3501      	adds	r5, #1
    5eaa:	e7f2      	b.n	5e92 <Trigger_process+0xa>
		// TODO Analog
		// If this is a release case, indicate to layer lookup for possible latch expiry
		uint8_t latch_expire = macroTriggerListBuffer[ key ].state == 0x03;

		// Lookup Trigger List
		nat_ptr_t *triggerList = Macro_layerLookup( &macroTriggerListBuffer[ key ], latch_expire );
    5eac:	1ecb      	subs	r3, r1, #3
    5eae:	4259      	negs	r1, r3
    5eb0:	4159      	adcs	r1, r3
    5eb2:	f7ff fa67 	bl	5384 <Macro_layerLookup>

		// If there was an error during lookup, skip
		if ( triggerList == 0 )
    5eb6:	2800      	cmp	r0, #0
    5eb8:	d0f6      	beq.n	5ea8 <Trigger_process+0x20>
			continue;

		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];
    5eba:	6801      	ldr	r1, [r0, #0]
    5ebc:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 5f98 <Trigger_process+0x110>
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
    5ec0:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 5f9c <Trigger_process+0x114>
    5ec4:	f8be 3000 	ldrh.w	r3, [lr]
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    5ec8:	2201      	movs	r2, #1
    5eca:	4411      	add	r1, r2
		// If there was an error during lookup, skip
		if ( triggerList == 0 )
			continue;

		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];
    5ecc:	2600      	movs	r6, #0

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    5ece:	9101      	str	r1, [sp, #4]
    5ed0:	9901      	ldr	r1, [sp, #4]
    5ed2:	428a      	cmp	r2, r1
    5ed4:	d222      	bcs.n	5f1c <Trigger_process+0x94>
		{
			// Lookup trigger macro index
			var_uint_t triggerMacroIndex = triggerList[ macro ];
    5ed6:	f810 1022 	ldrb.w	r1, [r0, r2, lsl #2]
    5eda:	2400      	movs	r4, #0
			//  triggerList needs to be added
			var_uint_t pending = 0;
			for ( ; pending < macroTriggerMacroPendingListSize; pending++ )
			{
				// Stop scanning if the trigger macro index is found in the pending list
				if ( macroTriggerMacroPendingList[ pending ] == triggerMacroIndex )
    5edc:	fa1f fa81 	uxth.w	sl, r1
			var_uint_t triggerMacroIndex = triggerList[ macro ];

			// Iterate over macroTriggerMacroPendingList to see if any macro in the scancode's
			//  triggerList needs to be added
			var_uint_t pending = 0;
			for ( ; pending < macroTriggerMacroPendingListSize; pending++ )
    5ee0:	b2e7      	uxtb	r7, r4
    5ee2:	fa1f f987 	uxth.w	r9, r7
    5ee6:	4599      	cmp	r9, r3
    5ee8:	d205      	bcs.n	5ef6 <Trigger_process+0x6e>
			{
				// Stop scanning if the trigger macro index is found in the pending list
				if ( macroTriggerMacroPendingList[ pending ] == triggerMacroIndex )
    5eea:	f838 b017 	ldrh.w	fp, [r8, r7, lsl #1]
    5eee:	45d3      	cmp	fp, sl
    5ef0:	f104 0401 	add.w	r4, r4, #1
    5ef4:	d1f4      	bne.n	5ee0 <Trigger_process+0x58>
					break;
			}

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
    5ef6:	4599      	cmp	r9, r3
    5ef8:	d10d      	bne.n	5f16 <Trigger_process+0x8e>
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
    5efa:	f04f 0400 	mov.w	r4, #0

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    5efe:	f828 1017 	strh.w	r1, [r8, r7, lsl #1]

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
    5f02:	f80c 4011 	strb.w	r4, [ip, r1, lsl #1]
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    5f06:	eb0c 0141 	add.w	r1, ip, r1, lsl #1

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    5f0a:	3301      	adds	r3, #1

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    5f0c:	f04f 0402 	mov.w	r4, #2

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    5f10:	b29b      	uxth	r3, r3

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    5f12:	704c      	strb	r4, [r1, #1]
    5f14:	2601      	movs	r6, #1
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    5f16:	3201      	adds	r2, #1
    5f18:	b2d2      	uxtb	r2, r2
    5f1a:	e7d9      	b.n	5ed0 <Trigger_process+0x48>
    5f1c:	2e00      	cmp	r6, #0
    5f1e:	d0c3      	beq.n	5ea8 <Trigger_process+0x20>
    5f20:	f8ae 3000 	strh.w	r3, [lr]
    5f24:	e7c0      	b.n	5ea8 <Trigger_process+0x20>
	var_uint_t macroTriggerMacroPendingListTail = 0;

	// Iterate through the pending TriggerMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
	{
		switch ( Macro_evalTriggerMacro( macroTriggerMacroPendingList[ macro ] ) )
    5f26:	4f1a      	ldr	r7, [pc, #104]	; (5f90 <Trigger_process+0x108>)
	// Tail pointer for macroTriggerMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroTriggerMacroPendingListTail = 0;

	// Iterate through the pending TriggerMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    5f28:	f8df 906c 	ldr.w	r9, [pc, #108]	; 5f98 <Trigger_process+0x110>

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    5f2c:	2600      	movs	r6, #0
    5f2e:	4635      	mov	r5, r6
    5f30:	46b8      	mov	r8, r7
	// Tail pointer for macroTriggerMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroTriggerMacroPendingListTail = 0;

	// Iterate through the pending TriggerMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    5f32:	f8b9 3000 	ldrh.w	r3, [r9]
    5f36:	b2f4      	uxtb	r4, r6
    5f38:	429c      	cmp	r4, r3
    5f3a:	d220      	bcs.n	5f7e <Trigger_process+0xf6>
	{
		switch ( Macro_evalTriggerMacro( macroTriggerMacroPendingList[ macro ] ) )
    5f3c:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    5f40:	f7ff fe66 	bl	5c10 <Macro_evalTriggerMacro>
    5f44:	2802      	cmp	r0, #2
    5f46:	d011      	beq.n	5f6c <Trigger_process+0xe4>
    5f48:	2803      	cmp	r0, #3
    5f4a:	d016      	beq.n	5f7a <Trigger_process+0xf2>
    5f4c:	2801      	cmp	r0, #1
    5f4e:	d106      	bne.n	5f5e <Trigger_process+0xd6>
		{
		// Trigger Result Macro (purposely falling through)
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    5f50:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
    5f54:	4b0f      	ldr	r3, [pc, #60]	; (5f94 <Trigger_process+0x10c>)
    5f56:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5f5a:	f7ff fb81 	bl	5660 <Macro_appendResultMacroToPendingList>

		default:
			macroTriggerMacroPendingList[ macroTriggerMacroPendingListTail++ ] = macroTriggerMacroPendingList[ macro ];
    5f5e:	1c6b      	adds	r3, r5, #1
    5f60:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
    5f64:	f828 2015 	strh.w	r2, [r8, r5, lsl #1]
    5f68:	b2dd      	uxtb	r5, r3
			break;
    5f6a:	e006      	b.n	5f7a <Trigger_process+0xf2>

		// Trigger Result Macro and Remove (purposely falling through)
		case TriggerMacroEval_DoResultAndRemove:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    5f6c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
    5f70:	4b08      	ldr	r3, [pc, #32]	; (5f94 <Trigger_process+0x10c>)
    5f72:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5f76:	f7ff fb73 	bl	5660 <Macro_appendResultMacroToPendingList>
    5f7a:	3601      	adds	r6, #1
    5f7c:	e7d9      	b.n	5f32 <Trigger_process+0xaa>
			break;
		}
	}

	// Update the macroTriggerMacroPendingListSize with the tail pointer
	macroTriggerMacroPendingListSize = macroTriggerMacroPendingListTail;
    5f7e:	4b06      	ldr	r3, [pc, #24]	; (5f98 <Trigger_process+0x110>)
    5f80:	801d      	strh	r5, [r3, #0]
}
    5f82:	b003      	add	sp, #12
    5f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f88:	1fff9108 	.word	0x1fff9108
    5f8c:	1fff9e62 	.word	0x1fff9e62
    5f90:	1fff911a 	.word	0x1fff911a
    5f94:	0000a47c 	.word	0x0000a47c
    5f98:	1fff9118 	.word	0x1fff9118
    5f9c:	1fffa1eb 	.word	0x1fffa1eb

00005fa0 <cliFunc_sendKeys>:


void cliFunc_sendKeys( char* args )
{
	// Copy USBKeys_KeysCLI to USBKeys_Keys
	for ( uint8_t key = 0; key < USBKeys_SentCLI; ++key )
    5fa0:	4b04      	ldr	r3, [pc, #16]	; (5fb4 <cliFunc_sendKeys+0x14>)
	{
		// TODO
		//USBKeys_Keys[key] = USBKeys_KeysCLI[key];
	}
	USBKeys_Sent = USBKeys_SentCLI;
    5fa2:	781a      	ldrb	r2, [r3, #0]
    5fa4:	4b04      	ldr	r3, [pc, #16]	; (5fb8 <cliFunc_sendKeys+0x18>)
    5fa6:	701a      	strb	r2, [r3, #0]

	// Set modifier byte
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
    5fa8:	4b04      	ldr	r3, [pc, #16]	; (5fbc <cliFunc_sendKeys+0x1c>)
    5faa:	781a      	ldrb	r2, [r3, #0]
    5fac:	4b04      	ldr	r3, [pc, #16]	; (5fc0 <cliFunc_sendKeys+0x20>)
    5fae:	701a      	strb	r2, [r3, #0]
    5fb0:	4770      	bx	lr
    5fb2:	bf00      	nop
    5fb4:	1fffa598 	.word	0x1fffa598
    5fb8:	1fffa5bf 	.word	0x1fffa5bf
    5fbc:	1fff91ee 	.word	0x1fff91ee
    5fc0:	1fff91da 	.word	0x1fff91da

00005fc4 <cliFunc_setKeys>:
}


void cliFunc_setKeys( char* args )
{
    5fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5fc6:	ad02      	add	r5, sp, #8

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5fc8:	4c0b      	ldr	r4, [pc, #44]	; (5ff8 <cliFunc_setKeys+0x34>)

void cliFunc_setKeys( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5fca:	f845 0d04 	str.w	r0, [r5, #-4]!

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5fce:	2300      	movs	r3, #0
    5fd0:	7023      	strb	r3, [r4, #0]
    5fd2:	4626      	mov	r6, r4
    5fd4:	7823      	ldrb	r3, [r4, #0]
    5fd6:	2b05      	cmp	r3, #5
    5fd8:	d80b      	bhi.n	5ff2 <cliFunc_setKeys+0x2e>
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5fda:	462a      	mov	r2, r5
    5fdc:	4669      	mov	r1, sp
    5fde:	9801      	ldr	r0, [sp, #4]
    5fe0:	f001 fce6 	bl	79b0 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5fe4:	9b00      	ldr	r3, [sp, #0]
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	b11b      	cbz	r3, 5ff2 <cliFunc_setKeys+0x2e>
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5fea:	7833      	ldrb	r3, [r6, #0]
    5fec:	3301      	adds	r3, #1
    5fee:	7033      	strb	r3, [r6, #0]
    5ff0:	e7f0      	b.n	5fd4 <cliFunc_setKeys+0x10>

		// Add the USB code to be sent
		// TODO
		//USBKeys_KeysCLI[USBKeys_SentCLI] = numToInt( arg1Ptr );
	}
}
    5ff2:	b002      	add	sp, #8
    5ff4:	bd70      	pop	{r4, r5, r6, pc}
    5ff6:	bf00      	nop
    5ff8:	1fffa598 	.word	0x1fffa598

00005ffc <cliFunc_outputDebug>:
	}
}


void cliFunc_outputDebug( char* args )
{
    5ffc:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5ffe:	4c07      	ldr	r4, [pc, #28]	; (601c <cliFunc_outputDebug+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    6000:	aa01      	add	r2, sp, #4
    6002:	4669      	mov	r1, sp
    6004:	f001 fcd4 	bl	79b0 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    6008:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    600a:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    600c:	7023      	strb	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    600e:	7803      	ldrb	r3, [r0, #0]
    6010:	b113      	cbz	r3, 6018 <cliFunc_outputDebug+0x1c>
	{
		Output_DebugMode = (uint16_t)numToInt( arg1Ptr );
    6012:	f002 f8bf 	bl	8194 <numToInt>
    6016:	7020      	strb	r0, [r4, #0]
	}
}
    6018:	b002      	add	sp, #8
    601a:	bd10      	pop	{r4, pc}
    601c:	1fff91ed 	.word	0x1fff91ed

00006020 <cliFunc_setMod>:
	}
}


void cliFunc_setMod( char* args )
{
    6020:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    6022:	aa01      	add	r2, sp, #4
    6024:	4669      	mov	r1, sp
    6026:	f001 fcc3 	bl	79b0 <CLI_argumentIsolation>

	USBKeys_ModifiersCLI = numToInt( arg1Ptr );
    602a:	9800      	ldr	r0, [sp, #0]
    602c:	f002 f8b2 	bl	8194 <numToInt>
    6030:	4b02      	ldr	r3, [pc, #8]	; (603c <cliFunc_setMod+0x1c>)
    6032:	7018      	strb	r0, [r3, #0]
}
    6034:	b003      	add	sp, #12
    6036:	f85d fb04 	ldr.w	pc, [sp], #4
    603a:	bf00      	nop
    603c:	1fff91ee 	.word	0x1fff91ee

00006040 <cliFunc_readLEDs>:
	}
}


void cliFunc_readLEDs( char* args )
{
    6040:	b508      	push	{r3, lr}
	print( NL );
    6042:	4806      	ldr	r0, [pc, #24]	; (605c <cliFunc_readLEDs+0x1c>)
    6044:	f001 ff94 	bl	7f70 <_print>
	info_msg("LED State: ");
    6048:	4805      	ldr	r0, [pc, #20]	; (6060 <cliFunc_readLEDs+0x20>)
    604a:	f001 ff91 	bl	7f70 <_print>
	printInt8( USBKeys_LEDs );
    604e:	4b05      	ldr	r3, [pc, #20]	; (6064 <cliFunc_readLEDs+0x24>)
    6050:	7818      	ldrb	r0, [r3, #0]
}
    6052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_readLEDs( char* args )
{
	print( NL );
	info_msg("LED State: ");
	printInt8( USBKeys_LEDs );
    6056:	f001 bfba 	b.w	7fce <printInt8>
    605a:	bf00      	nop
    605c:	0000c0ef 	.word	0x0000c0ef
    6060:	0000b79d 	.word	0x0000b79d
    6064:	1fff91e7 	.word	0x1fff91e7

00006068 <cliFunc_usbInitTime>:

	USBKeys_ModifiersCLI = numToInt( arg1Ptr );
}

void cliFunc_usbInitTime( char* args )
{
    6068:	b508      	push	{r3, lr}
	// Calculate overall USB initialization time
	// XXX A protocol analyzer will be more accurate, however, this is built-in and easier to collect data
	print(NL);
    606a:	480d      	ldr	r0, [pc, #52]	; (60a0 <cliFunc_usbInitTime+0x38>)
    606c:	f001 ff80 	bl	7f70 <_print>
	info_msg("USB Init Time: ");
    6070:	480c      	ldr	r0, [pc, #48]	; (60a4 <cliFunc_usbInitTime+0x3c>)
    6072:	f001 ff7d 	bl	7f70 <_print>
	printInt32( USBInit_TimeEnd - USBInit_TimeStart );
    6076:	4b0c      	ldr	r3, [pc, #48]	; (60a8 <cliFunc_usbInitTime+0x40>)
    6078:	6818      	ldr	r0, [r3, #0]
    607a:	4b0c      	ldr	r3, [pc, #48]	; (60ac <cliFunc_usbInitTime+0x44>)
    607c:	681b      	ldr	r3, [r3, #0]
    607e:	1ac0      	subs	r0, r0, r3
    6080:	f001 ffe2 	bl	8048 <printInt32>
	print(" ms - ");
    6084:	480a      	ldr	r0, [pc, #40]	; (60b0 <cliFunc_usbInitTime+0x48>)
    6086:	f001 ff73 	bl	7f70 <_print>
	printInt16( USBInit_Ticks );
    608a:	4b0a      	ldr	r3, [pc, #40]	; (60b4 <cliFunc_usbInitTime+0x4c>)
    608c:	8818      	ldrh	r0, [r3, #0]
    608e:	b280      	uxth	r0, r0
    6090:	f001 ffbb 	bl	800a <printInt16>
	print(" ticks");
    6094:	4808      	ldr	r0, [pc, #32]	; (60b8 <cliFunc_usbInitTime+0x50>)
}
    6096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print(NL);
	info_msg("USB Init Time: ");
	printInt32( USBInit_TimeEnd - USBInit_TimeStart );
	print(" ms - ");
	printInt16( USBInit_Ticks );
	print(" ticks");
    609a:	f001 bf69 	b.w	7f70 <_print>
    609e:	bf00      	nop
    60a0:	0000c0ef 	.word	0x0000c0ef
    60a4:	0000b7bb 	.word	0x0000b7bb
    60a8:	1fffa59c 	.word	0x1fffa59c
    60ac:	1fffa5dc 	.word	0x1fffa5dc
    60b0:	0000b7dd 	.word	0x0000b7dd
    60b4:	1fffa5a2 	.word	0x1fffa5a2
    60b8:	0000b7e4 	.word	0x0000b7e4

000060bc <cliFunc_kbdProtocol>:


// ----- CLI Command Functions -----

void cliFunc_kbdProtocol( char* args )
{
    60bc:	b513      	push	{r0, r1, r4, lr}
    60be:	4604      	mov	r4, r0
	print( NL );
    60c0:	480f      	ldr	r0, [pc, #60]	; (6100 <cliFunc_kbdProtocol+0x44>)
    60c2:	f001 ff55 	bl	7f70 <_print>

	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    60c6:	4620      	mov	r0, r4
    60c8:	aa01      	add	r2, sp, #4
    60ca:	4669      	mov	r1, sp
    60cc:	f001 fc70 	bl	79b0 <CLI_argumentIsolation>

	if ( arg1Ptr[0] != '\0' )
    60d0:	9800      	ldr	r0, [sp, #0]
    60d2:	7803      	ldrb	r3, [r0, #0]
    60d4:	b15b      	cbz	r3, 60ee <cliFunc_kbdProtocol+0x32>
	{
		uint8_t mode = (uint8_t)numToInt( arg1Ptr );
    60d6:	f002 f85d 	bl	8194 <numToInt>
    60da:	b2c0      	uxtb	r0, r0

		// Do nothing if the argument was wrong
		if ( mode == 0 || mode == 1 )
    60dc:	2801      	cmp	r0, #1
    60de:	d80d      	bhi.n	60fc <cliFunc_kbdProtocol+0x40>
		{
			USBKeys_Protocol = mode;
    60e0:	4c08      	ldr	r4, [pc, #32]	; (6104 <cliFunc_kbdProtocol+0x48>)
    60e2:	7020      	strb	r0, [r4, #0]
			info_msg("Setting Keyboard Protocol to: ");
    60e4:	4808      	ldr	r0, [pc, #32]	; (6108 <cliFunc_kbdProtocol+0x4c>)
    60e6:	f001 ff43 	bl	7f70 <_print>
			printInt8( USBKeys_Protocol );
    60ea:	7820      	ldrb	r0, [r4, #0]
    60ec:	e004      	b.n	60f8 <cliFunc_kbdProtocol+0x3c>
		}
	}
	else
	{
		info_msg("Keyboard Protocol: ");
    60ee:	4807      	ldr	r0, [pc, #28]	; (610c <cliFunc_kbdProtocol+0x50>)
    60f0:	f001 ff3e 	bl	7f70 <_print>
		printInt8( USBKeys_Protocol );
    60f4:	4b03      	ldr	r3, [pc, #12]	; (6104 <cliFunc_kbdProtocol+0x48>)
    60f6:	7818      	ldrb	r0, [r3, #0]
    60f8:	f001 ff69 	bl	7fce <printInt8>
	}
}
    60fc:	b002      	add	sp, #8
    60fe:	bd10      	pop	{r4, pc}
    6100:	0000c0ef 	.word	0x0000c0ef
    6104:	1fff8d08 	.word	0x1fff8d08
    6108:	0000b7eb 	.word	0x0000b7eb
    610c:	0000b81c 	.word	0x0000b81c

00006110 <Output_consCtrlSend_capability>:
// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6110:	2aff      	cmp	r2, #255	; 0xff
}


// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    6112:	b430      	push	{r4, r5}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6114:	d105      	bne.n	6122 <Output_consCtrlSend_capability+0x12>
    6116:	29ff      	cmp	r1, #255	; 0xff
    6118:	d103      	bne.n	6122 <Output_consCtrlSend_capability+0x12>
	{
		print("Output_consCtrlSend(consCode)");
    611a:	480b      	ldr	r0, [pc, #44]	; (6148 <Output_consCtrlSend_capability+0x38>)
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
#endif
}
    611c:	bc30      	pop	{r4, r5}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_consCtrlSend(consCode)");
    611e:	f001 bf27 	b.w	7f70 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    6122:	f001 00fd 	and.w	r0, r1, #253	; 0xfd
    6126:	2801      	cmp	r0, #1
    6128:	4c08      	ldr	r4, [pc, #32]	; (614c <Output_consCtrlSend_capability+0x3c>)
    612a:	d109      	bne.n	6140 <Output_consCtrlSend_capability+0x30>
		USBKeys_Changed |= USBKeyChangeState_Consumer;
    612c:	4d08      	ldr	r5, [pc, #32]	; (6150 <Output_consCtrlSend_capability+0x40>)
    612e:	7828      	ldrb	r0, [r5, #0]
    6130:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6134:	7028      	strb	r0, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    6136:	b91a      	cbnz	r2, 6140 <Output_consCtrlSend_capability+0x30>
    6138:	2903      	cmp	r1, #3
    613a:	d101      	bne.n	6140 <Output_consCtrlSend_capability+0x30>
	{
		USBKeys_ConsCtrl = 0;
    613c:	8022      	strh	r2, [r4, #0]
		return;
    613e:	e001      	b.n	6144 <Output_consCtrlSend_capability+0x34>
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
    6140:	881b      	ldrh	r3, [r3, #0]
    6142:	8023      	strh	r3, [r4, #0]
#endif
}
    6144:	bc30      	pop	{r4, r5}
    6146:	4770      	bx	lr
    6148:	0000b842 	.word	0x0000b842
    614c:	1fffa5e0 	.word	0x1fffa5e0
    6150:	1fff91db 	.word	0x1fff91db

00006154 <Output_noneSend_capability>:
// Ignores the given key status update
// Used to prevent fall-through, this is the None keyword in KLL
void Output_noneSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6154:	2aff      	cmp	r2, #255	; 0xff
    6156:	d104      	bne.n	6162 <Output_noneSend_capability+0xe>
    6158:	29ff      	cmp	r1, #255	; 0xff
    615a:	d102      	bne.n	6162 <Output_noneSend_capability+0xe>
	{
		print("Output_noneSend()");
    615c:	4801      	ldr	r0, [pc, #4]	; (6164 <Output_noneSend_capability+0x10>)
    615e:	f001 bf07 	b.w	7f70 <_print>
    6162:	4770      	bx	lr
    6164:	0000b860 	.word	0x0000b860

00006168 <Output_sysCtrlSend_capability>:
// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6168:	2aff      	cmp	r2, #255	; 0xff
}


// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    616a:	b430      	push	{r4, r5}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    616c:	d105      	bne.n	617a <Output_sysCtrlSend_capability+0x12>
    616e:	29ff      	cmp	r1, #255	; 0xff
    6170:	d103      	bne.n	617a <Output_sysCtrlSend_capability+0x12>
	{
		print("Output_sysCtrlSend(sysCode)");
    6172:	480b      	ldr	r0, [pc, #44]	; (61a0 <Output_sysCtrlSend_capability+0x38>)
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
#endif
}
    6174:	bc30      	pop	{r4, r5}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_sysCtrlSend(sysCode)");
    6176:	f001 befb 	b.w	7f70 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    617a:	f001 00fd 	and.w	r0, r1, #253	; 0xfd
    617e:	2801      	cmp	r0, #1
    6180:	4c08      	ldr	r4, [pc, #32]	; (61a4 <Output_sysCtrlSend_capability+0x3c>)
    6182:	d109      	bne.n	6198 <Output_sysCtrlSend_capability+0x30>
		USBKeys_Changed |= USBKeyChangeState_System;
    6184:	4d08      	ldr	r5, [pc, #32]	; (61a8 <Output_sysCtrlSend_capability+0x40>)
    6186:	7828      	ldrb	r0, [r5, #0]
    6188:	f040 0020 	orr.w	r0, r0, #32
    618c:	7028      	strb	r0, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    618e:	b91a      	cbnz	r2, 6198 <Output_sysCtrlSend_capability+0x30>
    6190:	2903      	cmp	r1, #3
    6192:	d101      	bne.n	6198 <Output_sysCtrlSend_capability+0x30>
	{
		USBKeys_SysCtrl = 0;
    6194:	7022      	strb	r2, [r4, #0]
		return;
    6196:	e001      	b.n	619c <Output_sysCtrlSend_capability+0x34>
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
    6198:	781b      	ldrb	r3, [r3, #0]
    619a:	7023      	strb	r3, [r4, #0]
#endif
}
    619c:	bc30      	pop	{r4, r5}
    619e:	4770      	bx	lr
    61a0:	0000b872 	.word	0x0000b872
    61a4:	1fffa5a0 	.word	0x1fffa5a0
    61a8:	1fff91db 	.word	0x1fff91db

000061ac <Output_flashMode_capability>:
}

void Output_flashMode_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    61ac:	2aff      	cmp	r2, #255	; 0xff
    61ae:	d104      	bne.n	61ba <Output_flashMode_capability+0xe>
    61b0:	29ff      	cmp	r1, #255	; 0xff
    61b2:	d102      	bne.n	61ba <Output_flashMode_capability+0xe>
	{
		print("Output_flashMode()");
    61b4:	4802      	ldr	r0, [pc, #8]	; (61c0 <Output_flashMode_capability+0x14>)
    61b6:	f001 bedb 	b.w	7f70 <_print>


// Sets the device into firmware reload mode
inline void Output_firmwareReload()
{
	usb_device_reload();
    61ba:	f000 bb67 	b.w	688c <usb_device_reload>
    61be:	bf00      	nop
    61c0:	0000b88e 	.word	0x0000b88e

000061c4 <Output_usbMouse_capability>:
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    61c4:	2aff      	cmp	r2, #255	; 0xff
//     If you use it, be prepared that your .kll files will break in the future (post KLL 0.5)
// Argument #1: USB Mouse Button (16 bit)
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    61c6:	b470      	push	{r4, r5, r6}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    61c8:	d105      	bne.n	61d6 <Output_usbMouse_capability+0x12>
    61ca:	29ff      	cmp	r1, #255	; 0xff
    61cc:	d103      	bne.n	61d6 <Output_usbMouse_capability+0x12>
	{
		print("Output_usbMouse(mouseButton,relX,relY)");
    61ce:	4819      	ldr	r0, [pc, #100]	; (6234 <Output_usbMouse_capability+0x70>)
	if ( mouse_button )
		USBMouse_Changed |= USBMouseChangeState_Buttons;

	if ( mouse_x || mouse_y )
		USBMouse_Changed |= USBMouseChangeState_Relative;
}
    61d0:	bc70      	pop	{r4, r5, r6}
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_usbMouse(mouseButton,relX,relY)");
    61d2:	f001 becd 	b.w	7f70 <_print>
	// The USB spec defines up to a max of 0xFFFF buttons
	// The usual are:
	// 1 - Button 1 - (Primary)
	// 2 - Button 2 - (Secondary)
	// 3 - Button 3 - (Tertiary)
	uint16_t mouse_button = *(uint16_t*)(&args[0]);
    61d6:	8818      	ldrh	r0, [r3, #0]

	// X/Y Relative Axis
	uint16_t mouse_x = *(uint16_t*)(&args[2]);
    61d8:	885e      	ldrh	r6, [r3, #2]
	uint16_t mouse_y = *(uint16_t*)(&args[4]);
    61da:	889d      	ldrh	r5, [r3, #4]

	// Adjust for bit shift
	uint16_t mouse_button_shift = mouse_button - 1;
    61dc:	1e44      	subs	r4, r0, #1
    61de:	b2a4      	uxth	r4, r4

	// Only send mouse button if in press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    61e0:	b95a      	cbnz	r2, 61fa <Output_usbMouse_capability+0x36>
    61e2:	2903      	cmp	r1, #3
    61e4:	d109      	bne.n	61fa <Output_usbMouse_capability+0x36>
	{
		// Release
		if ( mouse_button )
    61e6:	b1e0      	cbz	r0, 6222 <Output_usbMouse_capability+0x5e>
			USBMouse_Buttons &= ~(1 << mouse_button_shift);
    61e8:	4913      	ldr	r1, [pc, #76]	; (6238 <Output_usbMouse_capability+0x74>)
    61ea:	880a      	ldrh	r2, [r1, #0]
    61ec:	2301      	movs	r3, #1
    61ee:	b292      	uxth	r2, r2
    61f0:	40a3      	lsls	r3, r4
    61f2:	ea22 0303 	bic.w	r3, r2, r3
    61f6:	800b      	strh	r3, [r1, #0]
    61f8:	e00e      	b.n	6218 <Output_usbMouse_capability+0x54>
	}
	else
	{
		// Press or hold
		if ( mouse_button )
    61fa:	b130      	cbz	r0, 620a <Output_usbMouse_capability+0x46>
			USBMouse_Buttons |= (1 << mouse_button_shift);
    61fc:	490e      	ldr	r1, [pc, #56]	; (6238 <Output_usbMouse_capability+0x74>)
    61fe:	2301      	movs	r3, #1
    6200:	880a      	ldrh	r2, [r1, #0]
    6202:	40a3      	lsls	r3, r4
    6204:	4313      	orrs	r3, r2
    6206:	b29b      	uxth	r3, r3
    6208:	800b      	strh	r3, [r1, #0]

		if ( mouse_x )
    620a:	b10e      	cbz	r6, 6210 <Output_usbMouse_capability+0x4c>
			USBMouse_Relative_x = mouse_x;
    620c:	4b0b      	ldr	r3, [pc, #44]	; (623c <Output_usbMouse_capability+0x78>)
    620e:	801e      	strh	r6, [r3, #0]
		if ( mouse_y )
    6210:	b10d      	cbz	r5, 6216 <Output_usbMouse_capability+0x52>
			USBMouse_Relative_y = mouse_y;
    6212:	4b0b      	ldr	r3, [pc, #44]	; (6240 <Output_usbMouse_capability+0x7c>)
    6214:	801d      	strh	r5, [r3, #0]
	}

	// Trigger updates
	if ( mouse_button )
    6216:	b120      	cbz	r0, 6222 <Output_usbMouse_capability+0x5e>
		USBMouse_Changed |= USBMouseChangeState_Buttons;
    6218:	4a0a      	ldr	r2, [pc, #40]	; (6244 <Output_usbMouse_capability+0x80>)
    621a:	7813      	ldrb	r3, [r2, #0]
    621c:	f043 0301 	orr.w	r3, r3, #1
    6220:	7013      	strb	r3, [r2, #0]

	if ( mouse_x || mouse_y )
    6222:	b906      	cbnz	r6, 6226 <Output_usbMouse_capability+0x62>
    6224:	b125      	cbz	r5, 6230 <Output_usbMouse_capability+0x6c>
		USBMouse_Changed |= USBMouseChangeState_Relative;
    6226:	4a07      	ldr	r2, [pc, #28]	; (6244 <Output_usbMouse_capability+0x80>)
    6228:	7813      	ldrb	r3, [r2, #0]
    622a:	f043 0302 	orr.w	r3, r3, #2
    622e:	7013      	strb	r3, [r2, #0]
}
    6230:	bc70      	pop	{r4, r5, r6}
    6232:	4770      	bx	lr
    6234:	0000b8a1 	.word	0x0000b8a1
    6238:	1fff91d8 	.word	0x1fff91d8
    623c:	1fff91e2 	.word	0x1fff91e2
    6240:	1fff91e4 	.word	0x1fff91e4
    6244:	1fff91de 	.word	0x1fff91de

00006248 <Output_flushBuffers>:

// ----- Functions -----

// Flush Key buffers
void Output_flushBuffers()
{
    6248:	2200      	movs	r2, #0
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
		USBKeys_Keys[ c ] = 0;
    624a:	4909      	ldr	r1, [pc, #36]	; (6270 <Output_flushBuffers+0x28>)
    624c:	4610      	mov	r0, r2
    624e:	5450      	strb	r0, [r2, r1]
    6250:	3201      	adds	r2, #1

// Flush Key buffers
void Output_flushBuffers()
{
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
    6252:	2a1b      	cmp	r2, #27
		USBKeys_Keys[ c ] = 0;
    6254:	f04f 0300 	mov.w	r3, #0

// Flush Key buffers
void Output_flushBuffers()
{
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
    6258:	d1f9      	bne.n	624e <Output_flushBuffers+0x6>
		USBKeys_Keys[ c ] = 0;

	// Zero out other key buffers
	USBKeys_ConsCtrl = 0;
    625a:	4a06      	ldr	r2, [pc, #24]	; (6274 <Output_flushBuffers+0x2c>)
    625c:	8013      	strh	r3, [r2, #0]
	USBKeys_Modifiers = 0;
    625e:	4a06      	ldr	r2, [pc, #24]	; (6278 <Output_flushBuffers+0x30>)
    6260:	7013      	strb	r3, [r2, #0]
	USBKeys_SysCtrl = 0;
    6262:	4a06      	ldr	r2, [pc, #24]	; (627c <Output_flushBuffers+0x34>)
    6264:	7013      	strb	r3, [r2, #0]

	// Reset USBKeys_Keys size
	USBKeys_Sent = 0;
    6266:	4a06      	ldr	r2, [pc, #24]	; (6280 <Output_flushBuffers+0x38>)
    6268:	7013      	strb	r3, [r2, #0]
	USBKeys_SentCLI = 0;
    626a:	4a06      	ldr	r2, [pc, #24]	; (6284 <Output_flushBuffers+0x3c>)
    626c:	7013      	strb	r3, [r2, #0]
    626e:	4770      	bx	lr
    6270:	1fffa5a4 	.word	0x1fffa5a4
    6274:	1fffa5e0 	.word	0x1fffa5e0
    6278:	1fff91da 	.word	0x1fff91da
    627c:	1fffa5a0 	.word	0x1fffa5a0
    6280:	1fffa5bf 	.word	0x1fffa5bf
    6284:	1fffa598 	.word	0x1fffa598

00006288 <Output_kbdProtocolBoot_capability>:
// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6288:	2aff      	cmp	r2, #255	; 0xff

// ----- Capabilities -----

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    628a:	b510      	push	{r4, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    628c:	d106      	bne.n	629c <Output_kbdProtocolBoot_capability+0x14>
    628e:	29ff      	cmp	r1, #255	; 0xff
    6290:	d104      	bne.n	629c <Output_kbdProtocolBoot_capability+0x14>
	{
		print("Output_kbdProtocolBoot()");
    6292:	4807      	ldr	r0, [pc, #28]	; (62b0 <Output_kbdProtocolBoot_capability+0x28>)
	Output_flushBuffers();

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
#endif
}
    6294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolBoot()");
    6298:	f001 be6a 	b.w	7f70 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 0 )
    629c:	4c05      	ldr	r4, [pc, #20]	; (62b4 <Output_kbdProtocolBoot_capability+0x2c>)
    629e:	7823      	ldrb	r3, [r4, #0]
    62a0:	b12b      	cbz	r3, 62ae <Output_kbdProtocolBoot_capability+0x26>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    62a2:	2a01      	cmp	r2, #1
    62a4:	d103      	bne.n	62ae <Output_kbdProtocolBoot_capability+0x26>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    62a6:	f7ff ffcf 	bl	6248 <Output_flushBuffers>

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
    62aa:	2300      	movs	r3, #0
    62ac:	7023      	strb	r3, [r4, #0]
    62ae:	bd10      	pop	{r4, pc}
    62b0:	0000b8c8 	.word	0x0000b8c8
    62b4:	1fff8d08 	.word	0x1fff8d08

000062b8 <Output_kbdProtocolNKRO_capability>:
// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    62b8:	2aff      	cmp	r2, #255	; 0xff
}


// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    62ba:	b538      	push	{r3, r4, r5, lr}
    62bc:	4614      	mov	r4, r2
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    62be:	d106      	bne.n	62ce <Output_kbdProtocolNKRO_capability+0x16>
    62c0:	29ff      	cmp	r1, #255	; 0xff
    62c2:	d104      	bne.n	62ce <Output_kbdProtocolNKRO_capability+0x16>
	{
		print("Output_kbdProtocolNKRO()");
    62c4:	4807      	ldr	r0, [pc, #28]	; (62e4 <Output_kbdProtocolNKRO_capability+0x2c>)
	Output_flushBuffers();

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
#endif
}
    62c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolNKRO()");
    62ca:	f001 be51 	b.w	7f70 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 1 )
    62ce:	4d06      	ldr	r5, [pc, #24]	; (62e8 <Output_kbdProtocolNKRO_capability+0x30>)
    62d0:	782b      	ldrb	r3, [r5, #0]
    62d2:	2b01      	cmp	r3, #1
    62d4:	d004      	beq.n	62e0 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    62d6:	2c01      	cmp	r4, #1
    62d8:	d102      	bne.n	62e0 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    62da:	f7ff ffb5 	bl	6248 <Output_flushBuffers>

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
    62de:	702c      	strb	r4, [r5, #0]
    62e0:	bd38      	pop	{r3, r4, r5, pc}
    62e2:	bf00      	nop
    62e4:	0000b8e1 	.word	0x0000b8e1
    62e8:	1fff8d08 	.word	0x1fff8d08

000062ec <Output_toggleKbdProtocol_capability>:
// Toggle Keyboard Protocol
void Output_toggleKbdProtocol_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    62ec:	2aff      	cmp	r2, #255	; 0xff
}


// Toggle Keyboard Protocol
void Output_toggleKbdProtocol_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    62ee:	b508      	push	{r3, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    62f0:	d106      	bne.n	6300 <Output_toggleKbdProtocol_capability+0x14>
    62f2:	29ff      	cmp	r1, #255	; 0xff
    62f4:	d10f      	bne.n	6316 <Output_toggleKbdProtocol_capability+0x2a>
	{
		print("Output_toggleKbdProtocol()");
    62f6:	4808      	ldr	r0, [pc, #32]	; (6318 <Output_toggleKbdProtocol_capability+0x2c>)

		// Toggle the keyboard protocol Mode
		USBKeys_Protocol = !USBKeys_Protocol;
	}
#endif
}
    62f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_toggleKbdProtocol()");
    62fc:	f001 be38 	b.w	7f70 <_print>
		return;
	}

	// Only toggle protocol if release state
	if ( stateType == 0x00 && state == 0x03 )
    6300:	b94a      	cbnz	r2, 6316 <Output_toggleKbdProtocol_capability+0x2a>
    6302:	2903      	cmp	r1, #3
    6304:	d107      	bne.n	6316 <Output_toggleKbdProtocol_capability+0x2a>
	{
		// Flush the key buffers
		Output_flushBuffers();
    6306:	f7ff ff9f 	bl	6248 <Output_flushBuffers>

		// Toggle the keyboard protocol Mode
		USBKeys_Protocol = !USBKeys_Protocol;
    630a:	4a04      	ldr	r2, [pc, #16]	; (631c <Output_toggleKbdProtocol_capability+0x30>)
    630c:	7813      	ldrb	r3, [r2, #0]
    630e:	fab3 f383 	clz	r3, r3
    6312:	095b      	lsrs	r3, r3, #5
    6314:	7013      	strb	r3, [r2, #0]
    6316:	bd08      	pop	{r3, pc}
    6318:	0000b8fa 	.word	0x0000b8fa
    631c:	1fff8d08 	.word	0x1fff8d08

00006320 <Output_usbCodeSend_capability>:
// Argument #1: USB Code
void Output_usbCodeSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6320:	2aff      	cmp	r2, #255	; 0xff


// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args )
{
    6322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6324:	d103      	bne.n	632e <Output_usbCodeSend_capability+0xe>
    6326:	29ff      	cmp	r1, #255	; 0xff
    6328:	d109      	bne.n	633e <Output_usbCodeSend_capability+0x1e>
	{
		print("Output_usbCodeSend(usbCode)");
    632a:	486b      	ldr	r0, [pc, #428]	; (64d8 <Output_usbCodeSend_capability+0x1b8>)
    632c:	e0bd      	b.n	64aa <Output_usbCodeSend_capability+0x18a>

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release

	// Only send press and release events
	if ( stateType == 0x00 && state == 0x02 ) // Hold state
    632e:	b932      	cbnz	r2, 633e <Output_usbCodeSend_capability+0x1e>
    6330:	2902      	cmp	r1, #2
    6332:	f000 80cf 	beq.w	64d4 <Output_usbCodeSend_capability+0x1b4>
		print("Output_usbCodeSend(usbCode)");
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release
    6336:	1e4a      	subs	r2, r1, #1
    6338:	4256      	negs	r6, r2
    633a:	4156      	adcs	r6, r2
    633c:	e000      	b.n	6340 <Output_usbCodeSend_capability+0x20>
    633e:	2600      	movs	r6, #0
	// If press, send bit (NKRO) or byte (6KRO)
	if ( stateType == 0x00 && state == 0x01 ) // Press state
		keyPress = 1;

	// Get the keycode from arguments
	uint8_t key = args[0];
    6340:	781c      	ldrb	r4, [r3, #0]
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;

	switch ( USBKeys_Protocol )
    6342:	4b66      	ldr	r3, [pc, #408]	; (64dc <Output_usbCodeSend_capability+0x1bc>)
    6344:	781b      	ldrb	r3, [r3, #0]
    6346:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    634a:	b113      	cbz	r3, 6352 <Output_usbCodeSend_capability+0x32>
    634c:	2d01      	cmp	r5, #1
    634e:	d045      	beq.n	63dc <Output_usbCodeSend_capability+0xbc>
    6350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
	case 0: // Boot Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    6352:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    6356:	2be0      	cmp	r3, #224	; 0xe0
    6358:	d10c      	bne.n	6374 <Output_usbCodeSend_capability+0x54>
    635a:	4a61      	ldr	r2, [pc, #388]	; (64e0 <Output_usbCodeSend_capability+0x1c0>)
    635c:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
    6360:	2301      	movs	r3, #1
		{
			if ( keyPress )
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    6362:	40a3      	lsls	r3, r4
    6364:	7814      	ldrb	r4, [r2, #0]
	{
	case 0: // Boot Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
		{
			if ( keyPress )
    6366:	b10e      	cbz	r6, 636c <Output_usbCodeSend_capability+0x4c>
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    6368:	4323      	orrs	r3, r4
    636a:	e001      	b.n	6370 <Output_usbCodeSend_capability+0x50>
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    636c:	ea24 0303 	bic.w	r3, r4, r3
    6370:	7013      	strb	r3, [r2, #0]
    6372:	e043      	b.n	63fc <Output_usbCodeSend_capability+0xdc>
		// Normal USB Code
		else
		{
			// Determine if key was set
			uint8_t keyFound = 0;
			uint8_t old_sent = USBKeys_Sent;
    6374:	4a5b      	ldr	r2, [pc, #364]	; (64e4 <Output_usbCodeSend_capability+0x1c4>)

			for ( uint8_t curkey = 0, newkey = 0; curkey < old_sent; curkey++, newkey++ )
    6376:	4629      	mov	r1, r5
		// Normal USB Code
		else
		{
			// Determine if key was set
			uint8_t keyFound = 0;
			uint8_t old_sent = USBKeys_Sent;
    6378:	7810      	ldrb	r0, [r2, #0]
    637a:	4d5b      	ldr	r5, [pc, #364]	; (64e8 <Output_usbCodeSend_capability+0x1c8>)
    637c:	b2cb      	uxtb	r3, r1

			for ( uint8_t curkey = 0, newkey = 0; curkey < old_sent; curkey++, newkey++ )
    637e:	4283      	cmp	r3, r0
    6380:	d215      	bcs.n	63ae <Output_usbCodeSend_capability+0x8e>
			{
				// On press, key already present, don't re-add
				if ( keyPress && USBKeys_Keys[newkey] == key )
    6382:	b11e      	cbz	r6, 638c <Output_usbCodeSend_capability+0x6c>
    6384:	5c6b      	ldrb	r3, [r5, r1]
    6386:	42a3      	cmp	r3, r4
    6388:	d10f      	bne.n	63aa <Output_usbCodeSend_capability+0x8a>
    638a:	e012      	b.n	63b2 <Output_usbCodeSend_capability+0x92>
					keyFound = 1;
					break;
				}

				// On release, remove if found
				if ( !keyPress && USBKeys_Keys[newkey] == key )
    638c:	f815 e001 	ldrb.w	lr, [r5, r1]
    6390:	4f55      	ldr	r7, [pc, #340]	; (64e8 <Output_usbCodeSend_capability+0x1c8>)
    6392:	45a6      	cmp	lr, r4
    6394:	d109      	bne.n	63aa <Output_usbCodeSend_capability+0x8a>
				{
					// Shift next key onto this one
					// (Doesn't matter if it overflows, buffer is large enough, and size is used)
					USBKeys_Keys[newkey--] = USBKeys_Keys[++curkey];
    6396:	3301      	adds	r3, #1
    6398:	b2db      	uxtb	r3, r3
					USBKeys_Sent--;
    639a:	3801      	subs	r0, #1
				// On release, remove if found
				if ( !keyPress && USBKeys_Keys[newkey] == key )
				{
					// Shift next key onto this one
					// (Doesn't matter if it overflows, buffer is large enough, and size is used)
					USBKeys_Keys[newkey--] = USBKeys_Keys[++curkey];
    639c:	5cfb      	ldrb	r3, [r7, r3]
    639e:	547b      	strb	r3, [r7, r1]
					USBKeys_Sent--;
					keyFound = 1;
					USBKeys_Changed = USBKeyChangeState_MainKeys;
    63a0:	4b52      	ldr	r3, [pc, #328]	; (64ec <Output_usbCodeSend_capability+0x1cc>)
				if ( !keyPress && USBKeys_Keys[newkey] == key )
				{
					// Shift next key onto this one
					// (Doesn't matter if it overflows, buffer is large enough, and size is used)
					USBKeys_Keys[newkey--] = USBKeys_Keys[++curkey];
					USBKeys_Sent--;
    63a2:	7010      	strb	r0, [r2, #0]
					keyFound = 1;
					USBKeys_Changed = USBKeyChangeState_MainKeys;
    63a4:	2102      	movs	r1, #2
    63a6:	7019      	strb	r1, [r3, #0]
    63a8:	e003      	b.n	63b2 <Output_usbCodeSend_capability+0x92>
    63aa:	3101      	adds	r1, #1
    63ac:	e7e6      	b.n	637c <Output_usbCodeSend_capability+0x5c>
		}
		// Normal USB Code
		else
		{
			// Determine if key was set
			uint8_t keyFound = 0;
    63ae:	2100      	movs	r1, #0
    63b0:	e000      	b.n	63b4 <Output_usbCodeSend_capability+0x94>
			for ( uint8_t curkey = 0, newkey = 0; curkey < old_sent; curkey++, newkey++ )
			{
				// On press, key already present, don't re-add
				if ( keyPress && USBKeys_Keys[newkey] == key )
				{
					keyFound = 1;
    63b2:	2101      	movs	r1, #1
					break;
				}
			}

			// USB Key limit reached
			if ( USBKeys_Sent >= USB_BOOT_MAX_KEYS )
    63b4:	7813      	ldrb	r3, [r2, #0]
    63b6:	2b05      	cmp	r3, #5
    63b8:	d901      	bls.n	63be <Output_usbCodeSend_capability+0x9e>
			{
				warn_print("USB Key limit reached");
    63ba:	484d      	ldr	r0, [pc, #308]	; (64f0 <Output_usbCodeSend_capability+0x1d0>)
    63bc:	e075      	b.n	64aa <Output_usbCodeSend_capability+0x18a>
				break;
			}

			// Add key if not already found in the buffer
			if ( keyPress && !keyFound )
    63be:	2e00      	cmp	r6, #0
    63c0:	f000 8088 	beq.w	64d4 <Output_usbCodeSend_capability+0x1b4>
    63c4:	2900      	cmp	r1, #0
    63c6:	f040 8085 	bne.w	64d4 <Output_usbCodeSend_capability+0x1b4>
			{
				USBKeys_Keys[USBKeys_Sent++] = key;
    63ca:	4a46      	ldr	r2, [pc, #280]	; (64e4 <Output_usbCodeSend_capability+0x1c4>)
    63cc:	1c59      	adds	r1, r3, #1
    63ce:	7011      	strb	r1, [r2, #0]
    63d0:	4a45      	ldr	r2, [pc, #276]	; (64e8 <Output_usbCodeSend_capability+0x1c8>)
    63d2:	54d4      	strb	r4, [r2, r3]
				USBKeys_Changed = USBKeyChangeState_MainKeys;
    63d4:	4b45      	ldr	r3, [pc, #276]	; (64ec <Output_usbCodeSend_capability+0x1cc>)
    63d6:	2202      	movs	r2, #2
    63d8:	701a      	strb	r2, [r3, #0]
    63da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		break;

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    63dc:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    63e0:	2be0      	cmp	r3, #224	; 0xe0
    63e2:	d111      	bne.n	6408 <Output_usbCodeSend_capability+0xe8>
    63e4:	4b3e      	ldr	r3, [pc, #248]	; (64e0 <Output_usbCodeSend_capability+0x1c0>)
    63e6:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
		{
			if ( keyPress )
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    63ea:	fa05 f404 	lsl.w	r4, r5, r4
    63ee:	7819      	ldrb	r1, [r3, #0]

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
		{
			if ( keyPress )
    63f0:	b10e      	cbz	r6, 63f6 <Output_usbCodeSend_capability+0xd6>
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    63f2:	430c      	orrs	r4, r1
    63f4:	e001      	b.n	63fa <Output_usbCodeSend_capability+0xda>
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    63f6:	ea21 0404 	bic.w	r4, r1, r4
    63fa:	701c      	strb	r4, [r3, #0]
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    63fc:	4a3b      	ldr	r2, [pc, #236]	; (64ec <Output_usbCodeSend_capability+0x1cc>)
    63fe:	7813      	ldrb	r3, [r2, #0]
    6400:	f043 0301 	orr.w	r3, r3, #1
    6404:	7013      	strb	r3, [r2, #0]
			break;
    6406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    6408:	1f23      	subs	r3, r4, #4
    640a:	2b2d      	cmp	r3, #45	; 0x2d
    640c:	d810      	bhi.n	6430 <Output_usbCodeSend_capability+0x110>
    640e:	3c05      	subs	r4, #5
    6410:	b2e4      	uxtb	r4, r4
    6412:	2c2e      	cmp	r4, #46	; 0x2e
    6414:	bf98      	it	ls
    6416:	4a37      	ldrls	r2, [pc, #220]	; (64f4 <Output_usbCodeSend_capability+0x1d4>)
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    6418:	4934      	ldr	r1, [pc, #208]	; (64ec <Output_usbCodeSend_capability+0x1cc>)
    641a:	bf9c      	itt	ls
    641c:	4b36      	ldrls	r3, [pc, #216]	; (64f8 <Output_usbCodeSend_capability+0x1d8>)
    641e:	5d10      	ldrbls	r0, [r2, r4]
    6420:	780a      	ldrb	r2, [r1, #0]
    6422:	bf92      	itee	ls
    6424:	5d1b      	ldrbls	r3, [r3, r4]

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
			break;
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    6426:	2000      	movhi	r0, #0
    6428:	4603      	movhi	r3, r0
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    642a:	f042 0202 	orr.w	r2, r2, #2
    642e:	e00c      	b.n	644a <Output_usbCodeSend_capability+0x12a>
		}
		// Next 14 bytes
		else if ( key >= 51 && key <= 155 )
    6430:	f1a4 0233 	sub.w	r2, r4, #51	; 0x33
    6434:	b2d2      	uxtb	r2, r2
    6436:	2a68      	cmp	r2, #104	; 0x68
    6438:	d809      	bhi.n	644e <Output_usbCodeSend_capability+0x12e>
    643a:	4930      	ldr	r1, [pc, #192]	; (64fc <Output_usbCodeSend_capability+0x1dc>)
    643c:	4b30      	ldr	r3, [pc, #192]	; (6500 <Output_usbCodeSend_capability+0x1e0>)
    643e:	5c88      	ldrb	r0, [r1, r2]
				byteLookup( 17 );
				byteLookup( 18 );
				byteLookup( 19 );
			}

			USBKeys_Changed |= USBKeyChangeState_SecondaryKeys;
    6440:	492a      	ldr	r1, [pc, #168]	; (64ec <Output_usbCodeSend_capability+0x1cc>)
    6442:	5c9b      	ldrb	r3, [r3, r2]
    6444:	780a      	ldrb	r2, [r1, #0]
    6446:	f042 0204 	orr.w	r2, r2, #4
    644a:	700a      	strb	r2, [r1, #0]
    644c:	e031      	b.n	64b2 <Output_usbCodeSend_capability+0x192>
		}
		// Next byte
		else if ( key >= 157 && key <= 164 )
    644e:	f104 0363 	add.w	r3, r4, #99	; 0x63
    6452:	b2db      	uxtb	r3, r3
    6454:	2b07      	cmp	r3, #7
    6456:	d808      	bhi.n	646a <Output_usbCodeSend_capability+0x14a>
    6458:	4a2a      	ldr	r2, [pc, #168]	; (6504 <Output_usbCodeSend_capability+0x1e4>)
    645a:	5cd0      	ldrb	r0, [r2, r3]
			switch ( keyPos )
			{
				byteLookup( 20 );
			}

			USBKeys_Changed |= USBKeyChangeState_TertiaryKeys;
    645c:	4a23      	ldr	r2, [pc, #140]	; (64ec <Output_usbCodeSend_capability+0x1cc>)
    645e:	7813      	ldrb	r3, [r2, #0]
    6460:	f043 0308 	orr.w	r3, r3, #8
    6464:	7013      	strb	r3, [r2, #0]
    6466:	2314      	movs	r3, #20
    6468:	e023      	b.n	64b2 <Output_usbCodeSend_capability+0x192>
		}
		// Last 6 bytes
		else if ( key >= 176 && key <= 221 )
    646a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    646e:	b2d2      	uxtb	r2, r2
    6470:	2a2d      	cmp	r2, #45	; 0x2d
    6472:	d808      	bhi.n	6486 <Output_usbCodeSend_capability+0x166>
    6474:	4924      	ldr	r1, [pc, #144]	; (6508 <Output_usbCodeSend_capability+0x1e8>)
    6476:	4b25      	ldr	r3, [pc, #148]	; (650c <Output_usbCodeSend_capability+0x1ec>)
    6478:	5c88      	ldrb	r0, [r1, r2]
				byteLookup( 24 );
				byteLookup( 25 );
				byteLookup( 26 );
			}

			USBKeys_Changed |= USBKeyChangeState_QuartiaryKeys;
    647a:	491c      	ldr	r1, [pc, #112]	; (64ec <Output_usbCodeSend_capability+0x1cc>)
    647c:	5c9b      	ldrb	r3, [r3, r2]
    647e:	780a      	ldrb	r2, [r1, #0]
    6480:	f042 0210 	orr.w	r2, r2, #16
    6484:	e7e1      	b.n	644a <Output_usbCodeSend_capability+0x12a>
		}
		// Received 0x00
		// This is a special USB Code that internally indicates a "break"
		// It is used to send "nothing" in order to break up sequences of USB Codes
		else if ( key == 0x00 )
    6486:	b944      	cbnz	r4, 649a <Output_usbCodeSend_capability+0x17a>
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    6488:	4a18      	ldr	r2, [pc, #96]	; (64ec <Output_usbCodeSend_capability+0x1cc>)
    648a:	7813      	ldrb	r3, [r2, #0]
    648c:	f043 0302 	orr.w	r3, r3, #2
    6490:	7013      	strb	r3, [r2, #0]
		}

		break;
	}
#endif
}
    6492:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		else if ( key == 0x00 )
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;

			// Also flush out buffers just in case
			Output_flushBuffers();
    6496:	f7ff bed7 	b.w	6248 <Output_flushBuffers>
			break;
		}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
    649a:	481d      	ldr	r0, [pc, #116]	; (6510 <Output_usbCodeSend_capability+0x1f0>)
    649c:	f001 fd68 	bl	7f70 <_print>
			printHex( key );
    64a0:	4620      	mov	r0, r4
    64a2:	4629      	mov	r1, r5
    64a4:	f001 fe07 	bl	80b6 <printHex_op>
			print( NL );
    64a8:	481a      	ldr	r0, [pc, #104]	; (6514 <Output_usbCodeSend_capability+0x1f4>)
		}

		break;
	}
#endif
}
    64aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
			printHex( key );
			print( NL );
    64ae:	f001 bd5f 	b.w	7f70 <_print>
    64b2:	4c0d      	ldr	r4, [pc, #52]	; (64e8 <Output_usbCodeSend_capability+0x1c8>)
    64b4:	490b      	ldr	r1, [pc, #44]	; (64e4 <Output_usbCodeSend_capability+0x1c4>)
    64b6:	2201      	movs	r2, #1
		}

		// Set/Unset
		if ( keyPress )
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    64b8:	4082      	lsls	r2, r0
    64ba:	5ce0      	ldrb	r0, [r4, r3]
			print( NL );
			break;
		}

		// Set/Unset
		if ( keyPress )
    64bc:	b126      	cbz	r6, 64c8 <Output_usbCodeSend_capability+0x1a8>
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    64be:	4302      	orrs	r2, r0
    64c0:	54e2      	strb	r2, [r4, r3]
			USBKeys_Sent--;
    64c2:	780b      	ldrb	r3, [r1, #0]
    64c4:	3b01      	subs	r3, #1
    64c6:	e004      	b.n	64d2 <Output_usbCodeSend_capability+0x1b2>
		}
		else // Release
		{
			USBKeys_Keys[bytePosition] &= ~(1 << byteShift);
    64c8:	ea20 0202 	bic.w	r2, r0, r2
    64cc:	54e2      	strb	r2, [r4, r3]
			USBKeys_Sent++;
    64ce:	780b      	ldrb	r3, [r1, #0]
    64d0:	3301      	adds	r3, #1
    64d2:	700b      	strb	r3, [r1, #0]
    64d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64d6:	bf00      	nop
    64d8:	0000b915 	.word	0x0000b915
    64dc:	1fff8d08 	.word	0x1fff8d08
    64e0:	1fff91da 	.word	0x1fff91da
    64e4:	1fffa5bf 	.word	0x1fffa5bf
    64e8:	1fffa5a4 	.word	0x1fffa5a4
    64ec:	1fff91db 	.word	0x1fff91db
    64f0:	0000b931 	.word	0x0000b931
    64f4:	0000bb85 	.word	0x0000bb85
    64f8:	0000b690 	.word	0x0000b690
    64fc:	0000b620 	.word	0x0000b620
    6500:	0000bad5 	.word	0x0000bad5
    6504:	0000bacd 	.word	0x0000bacd
    6508:	0000bbe4 	.word	0x0000bbe4
    650c:	0000bbb4 	.word	0x0000bbb4
    6510:	0000b95e 	.word	0x0000b95e
    6514:	0000c0ef 	.word	0x0000c0ef

00006518 <Output_setup>:
}


// USB Module Setup
inline void Output_setup()
{
    6518:	b508      	push	{r3, lr}
	// Initialize the USB
	// If a USB connection does not exist, just ignore it
	// All usb related functions will non-fatally fail if called
	// If the USB initialization is delayed, then functionality will just be delayed
	usb_init();
    651a:	f000 fde9 	bl	70f0 <usb_init>

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );
    651e:	4904      	ldr	r1, [pc, #16]	; (6530 <Output_setup+0x18>)
    6520:	4804      	ldr	r0, [pc, #16]	; (6534 <Output_setup+0x1c>)
    6522:	f001 fabd 	bl	7aa0 <CLI_registerDictionary>

	// Flush key buffers
	Output_flushBuffers();
}
    6526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );

	// Flush key buffers
	Output_flushBuffers();
    652a:	f7ff be8d 	b.w	6248 <Output_flushBuffers>
    652e:	bf00      	nop
    6530:	0000b60c 	.word	0x0000b60c
    6534:	0000b6dc 	.word	0x0000b6dc

00006538 <Output_send>:
}


// USB Data Send
inline void Output_send()
{
    6538:	b538      	push	{r3, r4, r5, lr}
	// USB status checks
	// Non-standard USB state manipulation, usually does nothing
	usb_device_check();
    653a:	f000 f8b1 	bl	66a0 <usb_device_check>
	}
	*/

#if enableMouse_define == 1
	// Process mouse actions
	while ( USBMouse_Changed )
    653e:	4c17      	ldr	r4, [pc, #92]	; (659c <Output_send+0x64>)
    6540:	7823      	ldrb	r3, [r4, #0]
    6542:	b113      	cbz	r3, 654a <Output_send+0x12>
		usb_mouse_send();
    6544:	f001 f812 	bl	756c <usb_mouse_send>
    6548:	e7fa      	b.n	6540 <Output_send+0x8>
#endif

#if enableKeyboard_define == 1
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
    654a:	4b15      	ldr	r3, [pc, #84]	; (65a0 <Output_send+0x68>)
    654c:	7819      	ldrb	r1, [r3, #0]
    654e:	461c      	mov	r4, r3
    6550:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    6554:	b109      	cbz	r1, 655a <Output_send+0x22>
			USBKeys_Keys[c] = 0;
		}
	}

	// Send keypresses while there are pending changes
	while ( USBKeys_Changed )
    6556:	4d13      	ldr	r5, [pc, #76]	; (65a4 <Output_send+0x6c>)
    6558:	e008      	b.n	656c <Output_send+0x34>

#if enableKeyboard_define == 1
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
	{
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    655a:	4b13      	ldr	r3, [pc, #76]	; (65a8 <Output_send+0x70>)
		{
			USBKeys_Keys[c] = 0;
    655c:	4913      	ldr	r1, [pc, #76]	; (65ac <Output_send+0x74>)

#if enableKeyboard_define == 1
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
	{
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	2b05      	cmp	r3, #5
    6562:	d8f8      	bhi.n	6556 <Output_send+0x1e>
		{
			USBKeys_Keys[c] = 0;
    6564:	54ca      	strb	r2, [r1, r3]

#if enableKeyboard_define == 1
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
	{
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    6566:	3301      	adds	r3, #1
    6568:	b2db      	uxtb	r3, r3
    656a:	e7f9      	b.n	6560 <Output_send+0x28>
			USBKeys_Keys[c] = 0;
		}
	}

	// Send keypresses while there are pending changes
	while ( USBKeys_Changed )
    656c:	782b      	ldrb	r3, [r5, #0]
    656e:	b113      	cbz	r3, 6576 <Output_send+0x3e>
		usb_keyboard_send();
    6570:	f000 fe4e 	bl	7210 <usb_keyboard_send>
    6574:	e7fa      	b.n	656c <Output_send+0x34>

	// Signal Scan Module we are finished
	switch ( USBKeys_Protocol )
    6576:	7823      	ldrb	r3, [r4, #0]
    6578:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    657c:	b113      	cbz	r3, 6584 <Output_send+0x4c>
    657e:	2a01      	cmp	r2, #1
    6580:	d006      	beq.n	6590 <Output_send+0x58>
    6582:	bd38      	pop	{r3, r4, r5, pc}
	{
	case 0: // Boot Mode
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
    6584:	4b08      	ldr	r3, [pc, #32]	; (65a8 <Output_send+0x70>)
    6586:	7818      	ldrb	r0, [r3, #0]
    6588:	2806      	cmp	r0, #6
    658a:	bf28      	it	cs
    658c:	2006      	movcs	r0, #6
    658e:	e001      	b.n	6594 <Output_send+0x5c>
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    6590:	4b05      	ldr	r3, [pc, #20]	; (65a8 <Output_send+0x70>)
    6592:	7818      	ldrb	r0, [r3, #0]
		break;
	}
#endif
}
    6594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	{
	case 0: // Boot Mode
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    6598:	f7fe bba4 	b.w	4ce4 <Scan_finishedWithOutput>
    659c:	1fff91de 	.word	0x1fff91de
    65a0:	1fff8d08 	.word	0x1fff8d08
    65a4:	1fff91db 	.word	0x1fff91db
    65a8:	1fffa5bf 	.word	0x1fffa5bf
    65ac:	1fffa5a4 	.word	0x1fffa5a4

000065b0 <Output_availablechar>:

// USB Input buffer available
inline unsigned int Output_availablechar()
{
#if enableVirtualSerialPort_define == 1
	return usb_serial_available();
    65b0:	f001 b856 	b.w	7660 <usb_serial_available>

000065b4 <Output_getchar>:
// USB Get Character from input buffer
inline int Output_getchar()
{
#if enableVirtualSerialPort_define == 1
	// XXX Make sure to check output_availablechar() first! Information is lost with the cast (error codes) (AVR)
	return (int)usb_serial_getchar();
    65b4:	f001 b82e 	b.w	7614 <usb_serial_getchar>

000065b8 <Output_putstr>:
	uint16_t count = 0;
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	uint32_t count = 0;
#endif
	// Count characters until NULL character, then send the amount counted
	while ( str[count] != '\0' )
    65b8:	4603      	mov	r3, r0
    65ba:	1a19      	subs	r1, r3, r0
    65bc:	f813 2b01 	ldrb.w	r2, [r3], #1
    65c0:	2a00      	cmp	r2, #0
    65c2:	d1fa      	bne.n	65ba <Output_putstr+0x2>
		count++;

	return usb_serial_write( str, count );
    65c4:	f001 b85a 	b.w	767c <usb_serial_write>

000065c8 <Output_softReset>:


// Soft Chip Reset
inline void Output_softReset()
{
	usb_device_software_reset();
    65c8:	4b01      	ldr	r3, [pc, #4]	; (65d0 <Output_softReset+0x8>)
    65ca:	4a02      	ldr	r2, [pc, #8]	; (65d4 <Output_softReset+0xc>)
    65cc:	601a      	str	r2, [r3, #0]
    65ce:	4770      	bx	lr
    65d0:	e000ed0c 	.word	0xe000ed0c
    65d4:	05fa0004 	.word	0x05fa0004

000065d8 <Output_current_available>:

	// Check for USB current source
	total_current += Output_USBCurrent_Available;

	// Check for external current source
	total_current += Output_ExtCurrent_Available;
    65d8:	4a03      	ldr	r2, [pc, #12]	; (65e8 <Output_current_available+0x10>)
unsigned int Output_current_available()
{
	unsigned int total_current = 0;

	// Check for USB current source
	total_current += Output_USBCurrent_Available;
    65da:	4b04      	ldr	r3, [pc, #16]	; (65ec <Output_current_available+0x14>)

	// Check for external current source
	total_current += Output_ExtCurrent_Available;
    65dc:	8810      	ldrh	r0, [r2, #0]
    65de:	881b      	ldrh	r3, [r3, #0]

	// XXX If the total available current is still 0
	// Set to 100 mA, which is generally a safe assumption at startup
	// before we've been able to determine actual available current
	if ( total_current == 0 )
    65e0:	1818      	adds	r0, r3, r0
	{
		total_current = 100;
	}

	return total_current;
}
    65e2:	bf08      	it	eq
    65e4:	2064      	moveq	r0, #100	; 0x64
    65e6:	4770      	bx	lr
    65e8:	1fff91e0 	.word	0x1fff91e0
    65ec:	1fff91dc 	.word	0x1fff91dc

000065f0 <Output_update_usb_current>:


// Update USB current (mA)
// Triggers power change event
void Output_update_usb_current( unsigned int current )
{
    65f0:	b508      	push	{r3, lr}
	// Only signal if changed
	if ( current == Output_USBCurrent_Available )
    65f2:	4b06      	ldr	r3, [pc, #24]	; (660c <Output_update_usb_current+0x1c>)
    65f4:	881a      	ldrh	r2, [r3, #0]
    65f6:	4282      	cmp	r2, r0
    65f8:	d006      	beq.n	6608 <Output_update_usb_current+0x18>
		return;

	// Update USB current
	Output_USBCurrent_Available = current;
    65fa:	8018      	strh	r0, [r3, #0]
	printInt32( total_current );
	print(" mA" NL);
	*/

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    65fc:	f7ff ffec 	bl	65d8 <Output_current_available>
}
    6600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printInt32( total_current );
	print(" mA" NL);
	*/

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    6604:	f7fe bb74 	b.w	4cf0 <Scan_currentChange>
    6608:	bd08      	pop	{r3, pc}
    660a:	bf00      	nop
    660c:	1fff91dc 	.word	0x1fff91dc

00006610 <Output_update_external_current>:
// Update external current (mA)
// Triggers power change event
void Output_update_external_current( unsigned int current )
{
	// Only signal if changed
	if ( current == Output_ExtCurrent_Available )
    6610:	4b0c      	ldr	r3, [pc, #48]	; (6644 <Output_update_external_current+0x34>)
    6612:	881a      	ldrh	r2, [r3, #0]
    6614:	4282      	cmp	r2, r0


// Update external current (mA)
// Triggers power change event
void Output_update_external_current( unsigned int current )
{
    6616:	b510      	push	{r4, lr}
	// Only signal if changed
	if ( current == Output_ExtCurrent_Available )
    6618:	d012      	beq.n	6640 <Output_update_external_current+0x30>
		return;

	// Update external current
	Output_ExtCurrent_Available = current;
    661a:	8018      	strh	r0, [r3, #0]

	unsigned int total_current = Output_current_available();
    661c:	f7ff ffdc 	bl	65d8 <Output_current_available>
    6620:	4604      	mov	r4, r0
	info_msg("External Available Current Changed. Total Available: ");
    6622:	4809      	ldr	r0, [pc, #36]	; (6648 <Output_update_external_current+0x38>)
    6624:	f001 fca4 	bl	7f70 <_print>
	printInt32( total_current );
    6628:	4620      	mov	r0, r4
    662a:	f001 fd0d 	bl	8048 <printInt32>
	print(" mA" NL);
    662e:	4807      	ldr	r0, [pc, #28]	; (664c <Output_update_external_current+0x3c>)
    6630:	f001 fc9e 	bl	7f70 <_print>

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    6634:	f7ff ffd0 	bl	65d8 <Output_current_available>
}
    6638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	info_msg("External Available Current Changed. Total Available: ");
	printInt32( total_current );
	print(" mA" NL);

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    663c:	f7fe bb58 	b.w	4cf0 <Scan_currentChange>
    6640:	bd10      	pop	{r4, pc}
    6642:	bf00      	nop
    6644:	1fff91e0 	.word	0x1fff91e0
    6648:	0000b9f8 	.word	0x0000b9f8
    664c:	0000ba40 	.word	0x0000ba40

00006650 <usb_set_config_descriptor_size>:
};

// Simplifies defines for USB descriptors
void usb_set_config_descriptor_size()
{
	config_descriptor[2] = LSB( sizeof( config_descriptor ) );
    6650:	4b02      	ldr	r3, [pc, #8]	; (665c <usb_set_config_descriptor_size+0xc>)
    6652:	22af      	movs	r2, #175	; 0xaf
    6654:	709a      	strb	r2, [r3, #2]
	config_descriptor[3] = MSB( sizeof( config_descriptor ) );
    6656:	2200      	movs	r2, #0
    6658:	70da      	strb	r2, [r3, #3]
    665a:	4770      	bx	lr
    665c:	1fff8e02 	.word	0x1fff8e02

00006660 <endpoint0_transmit>:
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
    6660:	b5f0      	push	{r4, r5, r6, r7, lr}
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6662:	4c0c      	ldr	r4, [pc, #48]	; (6694 <endpoint0_transmit+0x34>)
    6664:	4e0c      	ldr	r6, [pc, #48]	; (6698 <endpoint0_transmit+0x38>)
    6666:	7823      	ldrb	r3, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6668:	4d0c      	ldr	r5, [pc, #48]	; (669c <endpoint0_transmit+0x3c>)
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    666a:	f043 0702 	orr.w	r7, r3, #2
    666e:	eb06 02c7 	add.w	r2, r6, r7, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6672:	f083 0301 	eor.w	r3, r3, #1
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6676:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6678:	782a      	ldrb	r2, [r5, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    667a:	7023      	strb	r3, [r4, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    667c:	2a00      	cmp	r2, #0
    667e:	bf14      	ite	ne
    6680:	20c8      	movne	r0, #200	; 0xc8
    6682:	2088      	moveq	r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    6684:	f082 0201 	eor.w	r2, r2, #1
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6688:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    668c:	702a      	strb	r2, [r5, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    668e:	f846 1037 	str.w	r1, [r6, r7, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6694:	1fff9298 	.word	0x1fff9298
    6698:	1fff8000 	.word	0x1fff8000
    669c:	1fff9343 	.word	0x1fff9343

000066a0 <usb_device_check>:
// Called once per scan loop, should take minimal processing time or it may affect other modules
void usb_device_check()
{
	// Check to see if we're still waiting for the next USB request after Get Configuration Descriptor
	// If still waiting, restart the USB initialization with a lower power requirement
	if ( power_neg_delay )
    66a0:	4a07      	ldr	r2, [pc, #28]	; (66c0 <usb_device_check+0x20>)
    66a2:	7813      	ldrb	r3, [r2, #0]
    66a4:	b15b      	cbz	r3, 66be <usb_device_check+0x1e>
	{
		// Check if 100 ms has elapsed
		if ( systick_millis_count - power_neg_time > 100 )
    66a6:	4b07      	ldr	r3, [pc, #28]	; (66c4 <usb_device_check+0x24>)
    66a8:	4907      	ldr	r1, [pc, #28]	; (66c8 <usb_device_check+0x28>)
    66aa:	681b      	ldr	r3, [r3, #0]
    66ac:	6809      	ldr	r1, [r1, #0]
    66ae:	1a5b      	subs	r3, r3, r1
    66b0:	2b64      	cmp	r3, #100	; 0x64
    66b2:	d904      	bls.n	66be <usb_device_check+0x1e>
		{
			power_neg_delay = 0;
    66b4:	2300      	movs	r3, #0
			*usb_bMaxPower = 50;

			// Re-initialize USB
			usb_reinit();
#else
			warn_msg("USB Low Power Negotation Disabled, condition detected.");
    66b6:	4805      	ldr	r0, [pc, #20]	; (66cc <usb_device_check+0x2c>)
	if ( power_neg_delay )
	{
		// Check if 100 ms has elapsed
		if ( systick_millis_count - power_neg_time > 100 )
		{
			power_neg_delay = 0;
    66b8:	7013      	strb	r3, [r2, #0]
			*usb_bMaxPower = 50;

			// Re-initialize USB
			usb_reinit();
#else
			warn_msg("USB Low Power Negotation Disabled, condition detected.");
    66ba:	f001 bc59 	b.w	7f70 <_print>
    66be:	4770      	bx	lr
    66c0:	1fff922a 	.word	0x1fff922a
    66c4:	1fff90c4 	.word	0x1fff90c4
    66c8:	1fff9334 	.word	0x1fff9334
    66cc:	0000bd6c 	.word	0x0000bd6c

000066d0 <usb_rx>:

usb_packet_t *usb_rx( uint32_t endpoint )
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
    66d0:	1e43      	subs	r3, r0, #1

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
    66d2:	2b09      	cmp	r3, #9
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
}

usb_packet_t *usb_rx( uint32_t endpoint )
{
    66d4:	b510      	push	{r4, lr}
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
    66d6:	d810      	bhi.n	66fa <usb_rx+0x2a>
	{
		return NULL;
	}

	__disable_irq();
    66d8:	b672      	cpsid	i

	// Receive packet, check pointer
	ret = rx_first[endpoint];
    66da:	4a09      	ldr	r2, [pc, #36]	; (6700 <usb_rx+0x30>)
    66dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if ( ret )
    66e0:	b148      	cbz	r0, 66f6 <usb_rx+0x26>
	{
		rx_first[ endpoint ] = ret->next;
    66e2:	6841      	ldr	r1, [r0, #4]
    66e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		usb_rx_byte_count_data[ endpoint ] -= ret->len;
    66e8:	4906      	ldr	r1, [pc, #24]	; (6704 <usb_rx+0x34>)
    66ea:	8804      	ldrh	r4, [r0, #0]
    66ec:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    66f0:	1b12      	subs	r2, r2, r4
    66f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	__enable_irq();
    66f6:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    66f8:	bd10      	pop	{r4, pc}
	endpoint--;

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
	{
		return NULL;
    66fa:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    66fc:	bd10      	pop	{r4, pc}
    66fe:	bf00      	nop
    6700:	1fff9270 	.word	0x1fff9270
    6704:	1fffa5e2 	.word	0x1fffa5e2

00006708 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    6708:	3801      	subs	r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    670a:	2809      	cmp	r0, #9
    670c:	d80a      	bhi.n	6724 <usb_tx_packet_count+0x1c>
		return 0;
	__disable_irq();
    670e:	b672      	cpsid	i
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    6710:	4b05      	ldr	r3, [pc, #20]	; (6728 <usb_tx_packet_count+0x20>)
    6712:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;
    6716:	2000      	movs	r0, #0

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    6718:	b113      	cbz	r3, 6720 <usb_tx_packet_count+0x18>
		count++;
    671a:	3001      	adds	r0, #1

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    671c:	685b      	ldr	r3, [r3, #4]
    671e:	e7fb      	b.n	6718 <usb_tx_packet_count+0x10>
		count++;
	__enable_irq();
    6720:	b662      	cpsie	i
	return count;
    6722:	4770      	bx	lr
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
    6724:	2000      	movs	r0, #0
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
		count++;
	__enable_irq();
	return count;
}
    6726:	4770      	bx	lr
    6728:	1fff92dc 	.word	0x1fff92dc

0000672c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory( usb_packet_t *packet )
{
    672c:	b470      	push	{r4, r5, r6}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    672e:	b672      	cpsid	i
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
	{
		if ( *cfg++ & USB_ENDPT_EPRXEN )
    6730:	4c17      	ldr	r4, [pc, #92]	; (6790 <usb_rx_memory+0x64>)
		{
			if ( table[ index( i, RX, EVEN ) ].desc == 0 )
    6732:	4918      	ldr	r1, [pc, #96]	; (6794 <usb_rx_memory+0x68>)
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6734:	2301      	movs	r3, #1
	{
		if ( *cfg++ & USB_ENDPT_EPRXEN )
    6736:	191a      	adds	r2, r3, r4
    6738:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    673c:	0712      	lsls	r2, r2, #28
    673e:	d51d      	bpl.n	677c <usb_rx_memory+0x50>
		{
			if ( table[ index( i, RX, EVEN ) ].desc == 0 )
    6740:	009a      	lsls	r2, r3, #2
    6742:	4e14      	ldr	r6, [pc, #80]	; (6794 <usb_rx_memory+0x68>)
    6744:	f851 5032 	ldr.w	r5, [r1, r2, lsl #3]
    6748:	b92d      	cbnz	r5, 6756 <usb_rx_memory+0x2a>
			{
				table[ index( i, RX, EVEN ) ].addr = packet->buf;
    674a:	eb06 1343 	add.w	r3, r6, r3, lsl #5
    674e:	3008      	adds	r0, #8
    6750:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    6752:	4b11      	ldr	r3, [pc, #68]	; (6798 <usb_rx_memory+0x6c>)
    6754:	e009      	b.n	676a <usb_rx_memory+0x3e>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if ( table[ index( i, RX, ODD ) ].desc == 0 )
    6756:	f042 0201 	orr.w	r2, r2, #1
    675a:	f851 5032 	ldr.w	r5, [r1, r2, lsl #3]
    675e:	b96d      	cbnz	r5, 677c <usb_rx_memory+0x50>
			{
				table[ index( i, RX, ODD ) ].addr = packet->buf;
    6760:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
    6764:	3008      	adds	r0, #8
    6766:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    6768:	4b0c      	ldr	r3, [pc, #48]	; (679c <usb_rx_memory+0x70>)
    676a:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
				usb_rx_memory_needed--;
    676e:	4a0c      	ldr	r2, [pc, #48]	; (67a0 <usb_rx_memory+0x74>)
    6770:	7813      	ldrb	r3, [r2, #0]
    6772:	3b01      	subs	r3, #1
    6774:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    6776:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free( packet );
	return;
}
    6778:	bc70      	pop	{r4, r5, r6}
    677a:	4770      	bx	lr
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    677c:	3301      	adds	r3, #1
    677e:	2b0b      	cmp	r3, #11
    6780:	d1d9      	bne.n	6736 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    6782:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    6784:	4b06      	ldr	r3, [pc, #24]	; (67a0 <usb_rx_memory+0x74>)
    6786:	2200      	movs	r2, #0
    6788:	701a      	strb	r2, [r3, #0]
	usb_free( packet );
	return;
}
    678a:	bc70      	pop	{r4, r5, r6}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free( packet );
    678c:	f000 becc 	b.w	7528 <usb_free>
    6790:	0000bc4b 	.word	0x0000bc4b
    6794:	1fff8000 	.word	0x1fff8000
    6798:	00400088 	.word	0x00400088
    679c:	004000c8 	.word	0x004000c8
    67a0:	1fff9339 	.word	0x1fff9339

000067a4 <usb_resume>:
	return;
}

// Call whenever there's an action that may wake the host device
uint8_t usb_resume()
{
    67a4:	b538      	push	{r3, r4, r5, lr}
	// If we have been sleeping, try to wake up host
	if ( usb_dev_sleep && usb_configured() )
    67a6:	4d0d      	ldr	r5, [pc, #52]	; (67dc <usb_resume+0x38>)
    67a8:	7828      	ldrb	r0, [r5, #0]
    67aa:	b1b0      	cbz	r0, 67da <usb_resume+0x36>

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured()
{
	return usb_configuration;
    67ac:	4b0c      	ldr	r3, [pc, #48]	; (67e0 <usb_resume+0x3c>)
    67ae:	781b      	ldrb	r3, [r3, #0]

// Call whenever there's an action that may wake the host device
uint8_t usb_resume()
{
	// If we have been sleeping, try to wake up host
	if ( usb_dev_sleep && usb_configured() )
    67b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    67b4:	b18b      	cbz	r3, 67da <usb_resume+0x36>
		#if enableVirtualSerialPort_define != 1
		info_print("Attempting to resume the host");
		#endif
		// Force wake-up for 10 ms
		// According to the USB Spec a device must hold resume for at least 1 ms but no more than 15 ms
		USB0_CTL |= USB_CTL_RESUME;
    67b6:	4c0b      	ldr	r4, [pc, #44]	; (67e4 <usb_resume+0x40>)
    67b8:	7823      	ldrb	r3, [r4, #0]
    67ba:	f043 0304 	orr.w	r3, r3, #4
    67be:	7023      	strb	r3, [r4, #0]
		delay(10);
    67c0:	200a      	movs	r0, #10
    67c2:	f7fb ff0b 	bl	25dc <delay>
		USB0_CTL &= ~(USB_CTL_RESUME);
    67c6:	7823      	ldrb	r3, [r4, #0]
    67c8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    67cc:	7023      	strb	r3, [r4, #0]
		delay(50); // Wait for at least 50 ms to make sure the bus is clear
    67ce:	2032      	movs	r0, #50	; 0x32
    67d0:	f7fb ff04 	bl	25dc <delay>
		usb_dev_sleep = 0; // Make sure we don't call this again, may crash system
    67d4:	2300      	movs	r3, #0
    67d6:	702b      	strb	r3, [r5, #0]
		#else
		warn_print("Host Resume Disabled");
		#endif

		return 1;
    67d8:	2001      	movs	r0, #1
	}

	return 0;
}
    67da:	bd38      	pop	{r3, r4, r5, pc}
    67dc:	1fff9338 	.word	0x1fff9338
    67e0:	1fff9342 	.word	0x1fff9342
    67e4:	40072094 	.word	0x40072094

000067e8 <usb_tx>:

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    67e8:	b538      	push	{r3, r4, r5, lr}
	// Update expiry counter
	USBKeys_Idle_Expiry = systick_millis_count;
    67ea:	4b21      	ldr	r3, [pc, #132]	; (6870 <usb_tx+0x88>)
    67ec:	681a      	ldr	r2, [r3, #0]
    67ee:	4b21      	ldr	r3, [pc, #132]	; (6874 <usb_tx+0x8c>)
    67f0:	601a      	str	r2, [r3, #0]

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    67f2:	4b21      	ldr	r3, [pc, #132]	; (6878 <usb_tx+0x90>)
    67f4:	681b      	ldr	r3, [r3, #0]

	return 0;
}

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    67f6:	4604      	mov	r4, r0
	USBKeys_Idle_Expiry = systick_millis_count;

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    67f8:	7818      	ldrb	r0, [r3, #0]
    67fa:	0040      	lsls	r0, r0, #1

	return 0;
}

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    67fc:	460d      	mov	r5, r1
	USBKeys_Idle_Expiry = systick_millis_count;

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    67fe:	f7ff fef7 	bl	65f0 <Output_update_usb_current>

	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
	uint8_t next;

	endpoint--;
    6802:	1e63      	subs	r3, r4, #1
	if ( endpoint >= NUM_ENDPOINTS )
    6804:	2b09      	cmp	r3, #9
    6806:	d832      	bhi.n	686e <usb_tx+0x86>
	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );

	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
    6808:	0164      	lsls	r4, r4, #5
    680a:	481c      	ldr	r0, [pc, #112]	; (687c <usb_tx+0x94>)
    680c:	f044 0410 	orr.w	r4, r4, #16
    6810:	4420      	add	r0, r4
	uint8_t next;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return;
	__disable_irq();
    6812:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
    6814:	4a1a      	ldr	r2, [pc, #104]	; (6880 <usb_tx+0x98>)
    6816:	5cd1      	ldrb	r1, [r2, r3]
    6818:	2903      	cmp	r1, #3
    681a:	d80b      	bhi.n	6834 <usb_tx+0x4c>
    681c:	e8df f001 	tbb	[pc, r1]
    6820:	07020418 	.word	0x07020418
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    6824:	2105      	movs	r1, #5
    6826:	e014      	b.n	6852 <usb_tx+0x6a>
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    6828:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    682a:	2102      	movs	r1, #2
		break;
    682c:	e011      	b.n	6852 <usb_tx+0x6a>
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	case TX_STATE_ODD_FREE:
		b++;
    682e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    6830:	2104      	movs	r1, #4
		break;
    6832:	e00e      	b.n	6852 <usb_tx+0x6a>
	default:
		if (tx_first[ endpoint ] == NULL)
    6834:	4913      	ldr	r1, [pc, #76]	; (6884 <usb_tx+0x9c>)
    6836:	4a14      	ldr	r2, [pc, #80]	; (6888 <usb_tx+0xa0>)
    6838:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    683c:	b910      	cbnz	r0, 6844 <usb_tx+0x5c>
		{
			tx_first[ endpoint ] = packet;
    683e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    6842:	e002      	b.n	684a <usb_tx+0x62>
		}
		else
		{
			tx_last[ endpoint ]->next = packet;
    6844:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6848:	604d      	str	r5, [r1, #4]
		}
		tx_last[ endpoint ] = packet;
    684a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    684e:	e00d      	b.n	686c <usb_tx+0x84>
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    6850:	2103      	movs	r1, #3
		tx_last[ endpoint ] = packet;
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
    6852:	54d1      	strb	r1, [r2, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6854:	f010 0f08 	tst.w	r0, #8
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    6858:	f105 0308 	add.w	r3, r5, #8
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    685c:	882a      	ldrh	r2, [r5, #0]
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    685e:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6860:	bf14      	ite	ne
    6862:	23c8      	movne	r3, #200	; 0xc8
    6864:	2388      	moveq	r3, #136	; 0x88
    6866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    686a:	6003      	str	r3, [r0, #0]
	__enable_irq();
    686c:	b662      	cpsie	i
    686e:	bd38      	pop	{r3, r4, r5, pc}
    6870:	1fff90c4 	.word	0x1fff90c4
    6874:	1fff91e8 	.word	0x1fff91e8
    6878:	1fff8fa0 	.word	0x1fff8fa0
    687c:	1fff8000 	.word	0x1fff8000
    6880:	1fff9220 	.word	0x1fff9220
    6884:	1fff92dc 	.word	0x1fff92dc
    6888:	1fff9304 	.word	0x1fff9304

0000688c <usb_device_reload>:
}


void usb_device_reload()
{
    688c:	4b07      	ldr	r3, [pc, #28]	; (68ac <usb_device_reload+0x20>)
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
    688e:	4808      	ldr	r0, [pc, #32]	; (68b0 <usb_device_reload+0x24>)
{
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
    6890:	4908      	ldr	r1, [pc, #32]	; (68b4 <usb_device_reload+0x28>)
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
    6892:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    6896:	f5a2 3278 	sub.w	r2, r2, #253952	; 0x3e000
    689a:	5c12      	ldrb	r2, [r2, r0]
    689c:	f803 2b01 	strb.w	r2, [r3], #1
{
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
    68a0:	428b      	cmp	r3, r1
    68a2:	d1f6      	bne.n	6892 <usb_device_reload+0x6>
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
	SOFTWARE_RESET();
    68a4:	4b04      	ldr	r3, [pc, #16]	; (68b8 <usb_device_reload+0x2c>)
    68a6:	4a05      	ldr	r2, [pc, #20]	; (68bc <usb_device_reload+0x30>)
    68a8:	601a      	str	r2, [r3, #0]
    68aa:	4770      	bx	lr
    68ac:	4003e000 	.word	0x4003e000
    68b0:	0000829b 	.word	0x0000829b
    68b4:	4003e016 	.word	0x4003e016
    68b8:	e000ed0c 	.word	0xe000ed0c
    68bc:	05fa0004 	.word	0x05fa0004

000068c0 <usb_isr>:
#endif
}


void usb_isr()
{
    68c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t status, stat, t;

restart:
	status = USB0_ISTAT;
    68c4:	4b9e      	ldr	r3, [pc, #632]	; (6b40 <usb_isr+0x280>)
    68c6:	781c      	ldrb	r4, [r3, #0]
    68c8:	b2e4      	uxtb	r4, r4
	print(" ISR(");
	printHex( status );
	print(") ");
	*/

	if ( (status & USB_INTEN_SOFTOKEN /* 04 */ ) )
    68ca:	f014 0f04 	tst.w	r4, #4
    68ce:	461d      	mov	r5, r3
    68d0:	d026      	beq.n	6920 <usb_isr+0x60>
	{
		if ( usb_configuration )
    68d2:	4b9c      	ldr	r3, [pc, #624]	; (6b44 <usb_isr+0x284>)
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	b1ab      	cbz	r3, 6904 <usb_isr+0x44>
		{
			t = usb_reboot_timer;
    68d8:	4a9b      	ldr	r2, [pc, #620]	; (6b48 <usb_isr+0x288>)
    68da:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    68dc:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    68e0:	b129      	cbz	r1, 68ee <usb_isr+0x2e>
			{
				usb_reboot_timer = --t;
    68e2:	3b01      	subs	r3, #1
    68e4:	b2db      	uxtb	r3, r3
    68e6:	7013      	strb	r3, [r2, #0]
				if ( !t )
    68e8:	b90b      	cbnz	r3, 68ee <usb_isr+0x2e>
					usb_device_reload();
    68ea:	f7ff ffcf 	bl	688c <usb_device_reload>
			}

			// CDC Interface
			#if enableVirtualSerialPort_define == 1
			t = usb_cdc_transmit_flush_timer;
    68ee:	4a97      	ldr	r2, [pc, #604]	; (6b4c <usb_isr+0x28c>)
    68f0:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    68f2:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    68f6:	b129      	cbz	r1, 6904 <usb_isr+0x44>
			{
				usb_cdc_transmit_flush_timer = --t;
    68f8:	3b01      	subs	r3, #1
    68fa:	b2db      	uxtb	r3, r3
    68fc:	7013      	strb	r3, [r2, #0]
				if ( t == 0 )
    68fe:	b90b      	cbnz	r3, 6904 <usb_isr+0x44>
					usb_serial_flush_callback();
    6900:	f000 ff2a 	bl	7758 <usb_serial_flush_callback>
			#endif

		}

		// SOF tokens are used for keepalive, consider the system awake when we're receiving them
		if ( usb_dev_sleep )
    6904:	4e92      	ldr	r6, [pc, #584]	; (6b50 <usb_isr+0x290>)
    6906:	7833      	ldrb	r3, [r6, #0]
    6908:	b13b      	cbz	r3, 691a <usb_isr+0x5a>
		{
			Output_update_usb_current( *usb_bMaxPower * 2 );
    690a:	4b92      	ldr	r3, [pc, #584]	; (6b54 <usb_isr+0x294>)
    690c:	681b      	ldr	r3, [r3, #0]
    690e:	7818      	ldrb	r0, [r3, #0]
    6910:	0040      	lsls	r0, r0, #1
    6912:	f7ff fe6d 	bl	65f0 <Output_update_usb_current>
			usb_dev_sleep = 0;
    6916:	2300      	movs	r3, #0
    6918:	7033      	strb	r3, [r6, #0]
		}

		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    691a:	4a89      	ldr	r2, [pc, #548]	; (6b40 <usb_isr+0x280>)
    691c:	2304      	movs	r3, #4
    691e:	7013      	strb	r3, [r2, #0]
	}

	if ( (status & USB_ISTAT_TOKDNE /* 08 */ ) )
    6920:	f004 0308 	and.w	r3, r4, #8
    6924:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    6928:	2b00      	cmp	r3, #0
    692a:	f000 8362 	beq.w	6ff2 <usb_isr+0x732>
	{
		uint8_t endpoint;
		stat = USB0_STAT;
    692e:	4b8a      	ldr	r3, [pc, #552]	; (6b58 <usb_isr+0x298>)
    6930:	4c8a      	ldr	r4, [pc, #552]	; (6b5c <usb_isr+0x29c>)
    6932:	781b      	ldrb	r3, [r3, #0]
    6934:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if ( endpoint == 0 )
    6936:	091d      	lsrs	r5, r3, #4
    6938:	ea4f 0693 	mov.w	r6, r3, lsr #2
    693c:	f040 82dc 	bne.w	6ef8 <usb_isr+0x638>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
    6940:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
	pid = BDT_PID( b->desc );
	buf = b->addr;
    6944:	685d      	ldr	r5, [r3, #4]
	print(", count:");
	printHex32(b->desc);
	print(" - ");
	#endif

	switch ( pid )
    6946:	f854 3036 	ldr.w	r3, [r4, r6, lsl #3]
    694a:	f3c3 0383 	ubfx	r3, r3, #2, #4
    694e:	3b01      	subs	r3, #1
    6950:	2b0c      	cmp	r3, #12
    6952:	f200 82cd 	bhi.w	6ef0 <usb_isr+0x630>
    6956:	e8df f013 	tbh	[pc, r3, lsl #1]
    695a:	0245      	.short	0x0245
    695c:	02cb0245 	.word	0x02cb0245
    6960:	02cb02cb 	.word	0x02cb02cb
    6964:	02cb02cb 	.word	0x02cb02cb
    6968:	02a902cb 	.word	0x02a902cb
    696c:	02cb02cb 	.word	0x02cb02cb
    6970:	000d02cb 	.word	0x000d02cb
	{
	case 0x0D: // Setup received from host
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    6974:	4f7a      	ldr	r7, [pc, #488]	; (6b60 <usb_isr+0x2a0>)
    6976:	682b      	ldr	r3, [r5, #0]
    6978:	603b      	str	r3, [r7, #0]
		setup.word2 = *(uint32_t *)(buf + 4);
    697a:	686b      	ldr	r3, [r5, #4]
    697c:	607b      	str	r3, [r7, #4]

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    697e:	4b79      	ldr	r3, [pc, #484]	; (6b64 <usb_isr+0x2a4>)
    6980:	f844 3036 	str.w	r3, [r4, r6, lsl #3]
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6984:	4b78      	ldr	r3, [pc, #480]	; (6b68 <usb_isr+0x2a8>)
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    6986:	f8df 8214 	ldr.w	r8, [pc, #532]	; 6b9c <usb_isr+0x2dc>
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    698a:	2201      	movs	r2, #1
    698c:	701a      	strb	r2, [r3, #0]
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	// Reset USB Init timer
	USBInit_TimeEnd = systick_millis_count;
    698e:	4a77      	ldr	r2, [pc, #476]	; (6b6c <usb_isr+0x2ac>)
    6990:	4b77      	ldr	r3, [pc, #476]	; (6b70 <usb_isr+0x2b0>)
    6992:	6810      	ldr	r0, [r2, #0]
    6994:	6018      	str	r0, [r3, #0]
	USBInit_Ticks++;
    6996:	4877      	ldr	r0, [pc, #476]	; (6b74 <usb_isr+0x2b4>)
    6998:	8803      	ldrh	r3, [r0, #0]
    699a:	3301      	adds	r3, #1
    699c:	b29b      	uxth	r3, r3
    699e:	8003      	strh	r3, [r0, #0]

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    69a0:	4875      	ldr	r0, [pc, #468]	; (6b78 <usb_isr+0x2b8>)
    69a2:	7803      	ldrb	r3, [r0, #0]
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    69a4:	2100      	movs	r1, #0
    69a6:	f8c8 1000 	str.w	r1, [r8]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    69aa:	6121      	str	r1, [r4, #16]
		table[index(0, TX, ODD)].desc = 0;
    69ac:	61a1      	str	r1, [r4, #24]
	USBInit_TimeEnd = systick_millis_count;
	USBInit_Ticks++;

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    69ae:	b103      	cbz	r3, 69b2 <usb_isr+0xf2>
	{
		power_neg_delay = 0;
    69b0:	7001      	strb	r1, [r0, #0]
	}

	switch ( setup.wRequestAndType )
    69b2:	883b      	ldrh	r3, [r7, #0]
    69b4:	4d6a      	ldr	r5, [pc, #424]	; (6b60 <usb_isr+0x2a0>)
    69b6:	f240 31a1 	movw	r1, #929	; 0x3a1
    69ba:	428b      	cmp	r3, r1
    69bc:	f000 81e3 	beq.w	6d86 <usb_isr+0x4c6>
    69c0:	d835      	bhi.n	6a2e <usb_isr+0x16e>
    69c2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    69c6:	f000 8164 	beq.w	6c92 <usb_isr+0x3d2>
    69ca:	d815      	bhi.n	69f8 <usb_isr+0x138>
    69cc:	2b82      	cmp	r3, #130	; 0x82
    69ce:	f000 813c 	beq.w	6c4a <usb_isr+0x38a>
    69d2:	d807      	bhi.n	69e4 <usb_isr+0x124>
    69d4:	2b80      	cmp	r3, #128	; 0x80
    69d6:	f040 8156 	bne.w	6c86 <usb_isr+0x3c6>
		datalen = 1;
		data = reply_buffer;
		goto send;

	case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    69da:	4d68      	ldr	r5, [pc, #416]	; (6b7c <usb_isr+0x2bc>)
    69dc:	2300      	movs	r3, #0
    69de:	702b      	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    69e0:	706b      	strb	r3, [r5, #1]
    69e2:	e140      	b.n	6c66 <usb_isr+0x3a6>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    69e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    69e8:	f000 813f 	beq.w	6c6a <usb_isr+0x3aa>
    69ec:	f240 1201 	movw	r2, #257	; 0x101
    69f0:	4293      	cmp	r3, r2
    69f2:	f000 814c 	beq.w	6c8e <usb_isr+0x3ce>
    69f6:	e146      	b.n	6c86 <usb_isr+0x3c6>
    69f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    69fc:	f000 8135 	beq.w	6c6a <usb_isr+0x3aa>
    6a00:	d80a      	bhi.n	6a18 <usb_isr+0x158>
    6a02:	f240 12a1 	movw	r2, #417	; 0x1a1
    6a06:	4293      	cmp	r3, r2
    6a08:	f000 819d 	beq.w	6d46 <usb_isr+0x486>
    6a0c:	f240 22a1 	movw	r2, #673	; 0x2a1
    6a10:	4293      	cmp	r3, r2
    6a12:	f000 81b0 	beq.w	6d76 <usb_isr+0x4b6>
    6a16:	e136      	b.n	6c86 <usb_isr+0x3c6>
    6a18:	f240 3201 	movw	r2, #769	; 0x301
    6a1c:	4293      	cmp	r3, r2
    6a1e:	f000 8148 	beq.w	6cb2 <usb_isr+0x3f2>
    6a22:	f240 3202 	movw	r2, #770	; 0x302
    6a26:	4293      	cmp	r3, r2
    6a28:	f000 8150 	beq.w	6ccc <usb_isr+0x40c>
    6a2c:	e12b      	b.n	6c86 <usb_isr+0x3c6>
    6a2e:	f640 1121 	movw	r1, #2337	; 0x921
    6a32:	428b      	cmp	r3, r1
    6a34:	f000 817b 	beq.w	6d2e <usb_isr+0x46e>
    6a38:	d823      	bhi.n	6a82 <usb_isr+0x1c2>
    6a3a:	f240 6181 	movw	r1, #1665	; 0x681
    6a3e:	428b      	cmp	r3, r1
    6a40:	d808      	bhi.n	6a54 <usb_isr+0x194>
    6a42:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    6a46:	f080 8150 	bcs.w	6cea <usb_isr+0x42a>
    6a4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    6a4e:	f000 81a0 	beq.w	6d92 <usb_isr+0x4d2>
    6a52:	e118      	b.n	6c86 <usb_isr+0x3c6>
    6a54:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    6a58:	f000 80f5 	beq.w	6c46 <usb_isr+0x386>
    6a5c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6a60:	f040 8111 	bne.w	6c86 <usb_isr+0x3c6>

	case 0x0900: // SET_CONFIGURATION
		#ifdef UART_DEBUG
		print("CONFIGURE - ");
		#endif
		usb_configuration = setup.wValue;
    6a64:	4b37      	ldr	r3, [pc, #220]	; (6b44 <usb_isr+0x284>)
    6a66:	78aa      	ldrb	r2, [r5, #2]
    6a68:	701a      	strb	r2, [r3, #0]
		Output_Available = usb_configuration;
    6a6a:	781b      	ldrb	r3, [r3, #0]
    6a6c:	4a44      	ldr	r2, [pc, #272]	; (6b80 <usb_isr+0x2c0>)
    6a6e:	b2db      	uxtb	r3, r3
    6a70:	7013      	strb	r3, [r2, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );
    6a72:	4b38      	ldr	r3, [pc, #224]	; (6b54 <usb_isr+0x294>)
    6a74:	681b      	ldr	r3, [r3, #0]
    6a76:	7818      	ldrb	r0, [r3, #0]
    6a78:	0040      	lsls	r0, r0, #1
    6a7a:	f7ff fdb9 	bl	65f0 <Output_update_usb_current>
    6a7e:	2500      	movs	r5, #0
    6a80:	e01d      	b.n	6abe <usb_isr+0x1fe>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    6a82:	f242 0221 	movw	r2, #8225	; 0x2021
    6a86:	4293      	cmp	r3, r2
    6a88:	f000 8183 	beq.w	6d92 <usb_isr+0x4d2>
    6a8c:	d80a      	bhi.n	6aa4 <usb_isr+0x1e4>
    6a8e:	f640 2221 	movw	r2, #2593	; 0xa21
    6a92:	4293      	cmp	r3, r2
    6a94:	f000 8167 	beq.w	6d66 <usb_isr+0x4a6>
    6a98:	f640 3221 	movw	r2, #2849	; 0xb21
    6a9c:	4293      	cmp	r3, r2
    6a9e:	f000 816e 	beq.w	6d7e <usb_isr+0x4be>
    6aa2:	e0f0      	b.n	6c86 <usb_isr+0x3c6>
    6aa4:	f242 12a1 	movw	r2, #8609	; 0x21a1
    6aa8:	4293      	cmp	r3, r2
    6aaa:	d005      	beq.n	6ab8 <usb_isr+0x1f8>
    6aac:	f242 2221 	movw	r2, #8737	; 0x2221
    6ab0:	4293      	cmp	r3, r2
    6ab2:	f000 8139 	beq.w	6d28 <usb_isr+0x468>
    6ab6:	e0e6      	b.n	6c86 <usb_isr+0x3c6>
		//info_print("set control line state");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)&usb_cdc_line_coding;
		datalen = sizeof( usb_cdc_line_coding );
    6ab8:	2308      	movs	r3, #8
		usb_cdc_line_rtsdtr = setup.wValue;
		//info_print("set control line state");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)&usb_cdc_line_coding;
    6aba:	4d32      	ldr	r5, [pc, #200]	; (6b84 <usb_isr+0x2c4>)
    6abc:	e16b      	b.n	6d96 <usb_isr+0x4d6>
    6abe:	1963      	adds	r3, r4, r5
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
		{
			if ( table[i].desc & BDT_OWN )
    6ac0:	6a1a      	ldr	r2, [r3, #32]
    6ac2:	0611      	lsls	r1, r2, #24
    6ac4:	d503      	bpl.n	6ace <usb_isr+0x20e>
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
    6ac6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6ac8:	3808      	subs	r0, #8
    6aca:	f000 fd2d 	bl	7528 <usb_free>
    6ace:	3508      	adds	r5, #8

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
    6ad0:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
    6ad4:	d1f3      	bne.n	6abe <usb_isr+0x1fe>
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
		{
			usb_packet_t *p, *n;
			p = rx_first[i];
    6ad6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 6ba0 <usb_isr+0x2e0>
    6ada:	4e2b      	ldr	r6, [pc, #172]	; (6b88 <usb_isr+0x2c8>)

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
    6adc:	2500      	movs	r5, #0
    6ade:	46ca      	mov	sl, r9
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
		{
			usb_packet_t *p, *n;
			p = rx_first[i];
    6ae0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
    6ae4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
			while ( p )
    6ae8:	b130      	cbz	r0, 6af8 <usb_isr+0x238>
			{
				n = p->next;
    6aea:	6842      	ldr	r2, [r0, #4]
    6aec:	9200      	str	r2, [sp, #0]
				usb_free(p);
    6aee:	f000 fd1b 	bl	7528 <usb_free>
				p = n;
    6af2:	9a00      	ldr	r2, [sp, #0]
    6af4:	4610      	mov	r0, r2
    6af6:	e7f7      	b.n	6ae8 <usb_isr+0x228>
			}
			rx_first[ i ] = NULL;
			rx_last[ i ] = NULL;
    6af8:	4b24      	ldr	r3, [pc, #144]	; (6b8c <usb_isr+0x2cc>)
			p = tx_first[i];
    6afa:	4a25      	ldr	r2, [pc, #148]	; (6b90 <usb_isr+0x2d0>)
			{
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[ i ] = NULL;
    6afc:	f84a 000b 	str.w	r0, [sl, fp]
			rx_last[ i ] = NULL;
    6b00:	f84b 0003 	str.w	r0, [fp, r3]
			p = tx_first[i];
    6b04:	f85b 0002 	ldr.w	r0, [fp, r2]
			while (p)
    6b08:	b140      	cbz	r0, 6b1c <usb_isr+0x25c>
			{
				n = p->next;
    6b0a:	6841      	ldr	r1, [r0, #4]
    6b0c:	9201      	str	r2, [sp, #4]
    6b0e:	9100      	str	r1, [sp, #0]
				usb_free(p);
    6b10:	f000 fd0a 	bl	7528 <usb_free>
				p = n;
    6b14:	9900      	ldr	r1, [sp, #0]
    6b16:	9a01      	ldr	r2, [sp, #4]
    6b18:	4608      	mov	r0, r1
    6b1a:	e7f5      	b.n	6b08 <usb_isr+0x248>
			}
			tx_first[ i ] = NULL;
			tx_last[ i ] = NULL;
			usb_rx_byte_count_data[i] = 0;
    6b1c:	4b1d      	ldr	r3, [pc, #116]	; (6b94 <usb_isr+0x2d4>)
			{
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[ i ] = NULL;
    6b1e:	f842 000b 	str.w	r0, [r2, fp]
			tx_last[ i ] = NULL;
			usb_rx_byte_count_data[i] = 0;
    6b22:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]

			switch ( tx_state[ i ] )
    6b26:	7833      	ldrb	r3, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[ i ] = NULL;
			tx_last[ i ] = NULL;
    6b28:	4a1b      	ldr	r2, [pc, #108]	; (6b98 <usb_isr+0x2d8>)
			usb_rx_byte_count_data[i] = 0;

			switch ( tx_state[ i ] )
    6b2a:	3b02      	subs	r3, #2
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[ i ] = NULL;
			tx_last[ i ] = NULL;
    6b2c:	f84b 0002 	str.w	r0, [fp, r2]
			usb_rx_byte_count_data[i] = 0;

			switch ( tx_state[ i ] )
    6b30:	2b03      	cmp	r3, #3
    6b32:	d839      	bhi.n	6ba8 <usb_isr+0x2e8>
    6b34:	e8df f003 	tbb	[pc, r3]
    6b38:	36023602 	.word	0x36023602
			{
			case TX_STATE_EVEN_FREE:
			case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    6b3c:	2300      	movs	r3, #0
    6b3e:	e032      	b.n	6ba6 <usb_isr+0x2e6>
    6b40:	40072080 	.word	0x40072080
    6b44:	1fff9342 	.word	0x1fff9342
    6b48:	1fff9299 	.word	0x1fff9299
    6b4c:	1fff9346 	.word	0x1fff9346
    6b50:	1fff9338 	.word	0x1fff9338
    6b54:	1fff8fa0 	.word	0x1fff8fa0
    6b58:	40072090 	.word	0x40072090
    6b5c:	1fff8000 	.word	0x1fff8000
    6b60:	1fff932c 	.word	0x1fff932c
    6b64:	004000c8 	.word	0x004000c8
    6b68:	1fff9343 	.word	0x1fff9343
    6b6c:	1fff90c4 	.word	0x1fff90c4
    6b70:	1fffa59c 	.word	0x1fffa59c
    6b74:	1fffa5a2 	.word	0x1fffa5a2
    6b78:	1fff922a 	.word	0x1fff922a
    6b7c:	1fff933a 	.word	0x1fff933a
    6b80:	1fff91ec 	.word	0x1fff91ec
    6b84:	1fff90bc 	.word	0x1fff90bc
    6b88:	1fff9220 	.word	0x1fff9220
    6b8c:	1fff91f8 	.word	0x1fff91f8
    6b90:	1fff92dc 	.word	0x1fff92dc
    6b94:	1fffa5e2 	.word	0x1fffa5e2
    6b98:	1fff9304 	.word	0x1fff9304
    6b9c:	1fff91f4 	.word	0x1fff91f4
    6ba0:	1fff9270 	.word	0x1fff9270
				break;
			case TX_STATE_ODD_FREE:
			case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6ba4:	2301      	movs	r3, #1
    6ba6:	7033      	strb	r3, [r6, #0]
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
			}
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
    6ba8:	3501      	adds	r5, #1
    6baa:	2d0a      	cmp	r5, #10
    6bac:	f106 0601 	add.w	r6, r6, #1
    6bb0:	d196      	bne.n	6ae0 <usb_isr+0x220>
				break;
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    6bb2:	4ba4      	ldr	r3, [pc, #656]	; (6e44 <usb_isr+0x584>)
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
		{
			epconf = *cfg++;
    6bb4:	4da4      	ldr	r5, [pc, #656]	; (6e48 <usb_isr+0x588>)
				}
				p = usb_malloc();
				if ( p )
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
					table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    6bb6:	4ea5      	ldr	r6, [pc, #660]	; (6e4c <usb_isr+0x58c>)
				break;
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    6bb8:	2200      	movs	r2, #0
    6bba:	701a      	strb	r2, [r3, #0]
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6bbc:	f04f 0b01 	mov.w	fp, #1
    6bc0:	4699      	mov	r9, r3
    6bc2:	4aa3      	ldr	r2, [pc, #652]	; (6e50 <usb_isr+0x590>)
		{
			epconf = *cfg++;
    6bc4:	eb0b 0105 	add.w	r1, fp, r5
    6bc8:	445a      	add	r2, fp
    6bca:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    6bce:	0092      	lsls	r2, r2, #2
			*reg = epconf;
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    6bd0:	f011 0f08 	tst.w	r1, #8
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
		{
			epconf = *cfg++;
			*reg = epconf;
    6bd4:	7011      	strb	r1, [r2, #0]
    6bd6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    6bda:	d024      	beq.n	6c26 <usb_isr+0x366>
			{
				usb_packet_t *p;
				p = usb_malloc();
    6bdc:	f000 fc86 	bl	74ec <usb_malloc>
				if ( p )
    6be0:	b138      	cbz	r0, 6bf2 <usb_isr+0x332>
				{
					table[ index( i, RX, EVEN ) ].addr = p->buf;
    6be2:	eb04 124b 	add.w	r2, r4, fp, lsl #5
    6be6:	3008      	adds	r0, #8
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    6be8:	4b9a      	ldr	r3, [pc, #616]	; (6e54 <usb_isr+0x594>)
			{
				usb_packet_t *p;
				p = usb_malloc();
				if ( p )
				{
					table[ index( i, RX, EVEN ) ].addr = p->buf;
    6bea:	6050      	str	r0, [r2, #4]
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    6bec:	f844 303a 	str.w	r3, [r4, sl, lsl #3]
    6bf0:	e006      	b.n	6c00 <usb_isr+0x340>
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
    6bf2:	f899 2000 	ldrb.w	r2, [r9]
					table[ index( i, RX, EVEN ) ].addr = p->buf;
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
    6bf6:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
					usb_rx_memory_needed++;
    6bfa:	3201      	adds	r2, #1
    6bfc:	f889 2000 	strb.w	r2, [r9]
				}
				p = usb_malloc();
    6c00:	f000 fc74 	bl	74ec <usb_malloc>
				if ( p )
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    6c04:	f04a 0201 	orr.w	r2, sl, #1
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if ( p )
    6c08:	b130      	cbz	r0, 6c18 <usb_isr+0x358>
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    6c0a:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
    6c0e:	3008      	adds	r0, #8
    6c10:	6048      	str	r0, [r1, #4]
					table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    6c12:	f844 6032 	str.w	r6, [r4, r2, lsl #3]
    6c16:	e006      	b.n	6c26 <usb_isr+0x366>
				}
				else
				{
					table[ index( i, RX, ODD ) ].desc = 0;
    6c18:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
					usb_rx_memory_needed++;
    6c1c:	f899 2000 	ldrb.w	r2, [r9]
    6c20:	3201      	adds	r2, #1
    6c22:	f889 2000 	strb.w	r2, [r9]
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    6c26:	f04a 0102 	orr.w	r1, sl, #2
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6c2a:	f10b 0b01 	add.w	fp, fp, #1
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    6c2e:	f04a 0a03 	orr.w	sl, sl, #3
				{
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    6c32:	2200      	movs	r2, #0
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6c34:	f1bb 0f0b 	cmp.w	fp, #11
				{
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    6c38:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
			table[ index( i, TX, ODD ) ].desc = 0;
    6c3c:	f844 203a 	str.w	r2, [r4, sl, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6c40:	d1bf      	bne.n	6bc2 <usb_isr+0x302>
}

static void usb_setup()
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    6c42:	4613      	mov	r3, r2
    6c44:	e0a6      	b.n	6d94 <usb_isr+0x4d4>
			table[ index( i, TX, ODD ) ].desc = 0;
		}
		goto send;

	case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    6c46:	4b84      	ldr	r3, [pc, #528]	; (6e58 <usb_isr+0x598>)
    6c48:	e09e      	b.n	6d88 <usb_isr+0x4c8>
		datalen = 2;
		data = reply_buffer;
		goto send;

	case 0x0082: // GET_STATUS (endpoint)
		if ( setup.wIndex > NUM_ENDPOINTS )
    6c4a:	88ab      	ldrh	r3, [r5, #4]
    6c4c:	2b0a      	cmp	r3, #10
    6c4e:	d81a      	bhi.n	6c86 <usb_isr+0x3c6>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    6c50:	4d82      	ldr	r5, [pc, #520]	; (6e5c <usb_isr+0x59c>)
    6c52:	2200      	movs	r2, #0
    6c54:	702a      	strb	r2, [r5, #0]
		reply_buffer[1] = 0;
    6c56:	706a      	strb	r2, [r5, #1]
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    6c58:	009b      	lsls	r3, r3, #2
    6c5a:	4a81      	ldr	r2, [pc, #516]	; (6e60 <usb_isr+0x5a0>)
    6c5c:	5cd3      	ldrb	r3, [r2, r3]
    6c5e:	079a      	lsls	r2, r3, #30
			reply_buffer[0] = 1;
    6c60:	bf44      	itt	mi
    6c62:	2301      	movmi	r3, #1
    6c64:	702b      	strbmi	r3, [r5, #0]
		data = reply_buffer;
		datalen = 2;
    6c66:	2302      	movs	r3, #2
    6c68:	e095      	b.n	6d96 <usb_isr+0x4d6>
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		goto send;

	case 0x0300: // SET_FEATURE (device)
		switch ( setup.wValue )
    6c6a:	886b      	ldrh	r3, [r5, #2]
    6c6c:	2b01      	cmp	r3, #1
    6c6e:	f000 8090 	beq.w	6d92 <usb_isr+0x4d2>
		// See SET_FEATURE(DEVICE_REMOTE_WAKEUP) for details
		case 0x1:
			goto send;
		}

		warn_msg("SET_FEATURE - Device wValue(");
    6c72:	487c      	ldr	r0, [pc, #496]	; (6e64 <usb_isr+0x5a4>)
    6c74:	f001 f97c 	bl	7f70 <_print>
		printHex( setup.wValue );
    6c78:	8868      	ldrh	r0, [r5, #2]
    6c7a:	2101      	movs	r1, #1
    6c7c:	f001 fa1b 	bl	80b6 <printHex_op>
		print( ")" NL );
    6c80:	4879      	ldr	r0, [pc, #484]	; (6e68 <usb_isr+0x5a8>)
    6c82:	f001 f975 	bl	7f70 <_print>
	print("STALL : ");
	printInt32( systick_millis_count - USBInit_TimeStart );
	print(" ms");
	print(NL);
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6c86:	4b76      	ldr	r3, [pc, #472]	; (6e60 <usb_isr+0x5a0>)
    6c88:	220f      	movs	r2, #15
    6c8a:	701a      	strb	r2, [r3, #0]
    6c8c:	e0a7      	b.n	6dde <usb_isr+0x51e>
		endpoint0_stall();
		return;

	case 0x0101: // CLEAR_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_msg("CLEAR_FEATURE - Interface wValue(");
    6c8e:	4877      	ldr	r0, [pc, #476]	; (6e6c <usb_isr+0x5ac>)
    6c90:	e010      	b.n	6cb4 <usb_isr+0x3f4>
		print( ")" NL );
		endpoint0_stall();
		return;

	case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    6c92:	88aa      	ldrh	r2, [r5, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    6c94:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    6c98:	2b0a      	cmp	r3, #10
    6c9a:	d8f4      	bhi.n	6c86 <usb_isr+0x3c6>
    6c9c:	886b      	ldrh	r3, [r5, #2]
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d1f1      	bne.n	6c86 <usb_isr+0x3c6>
		{
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    6ca2:	0091      	lsls	r1, r2, #2
    6ca4:	4a6e      	ldr	r2, [pc, #440]	; (6e60 <usb_isr+0x5a0>)
    6ca6:	440a      	add	r2, r1
    6ca8:	7811      	ldrb	r1, [r2, #0]
    6caa:	f021 0102 	bic.w	r1, r1, #2
    6cae:	7011      	strb	r1, [r2, #0]
    6cb0:	e070      	b.n	6d94 <usb_isr+0x4d4>
		endpoint0_stall();
		return;

	case 0x0301: // SET_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_msg("SET_FEATURE - Interface wValue(");
    6cb2:	486f      	ldr	r0, [pc, #444]	; (6e70 <usb_isr+0x5b0>)
    6cb4:	f001 f95c 	bl	7f70 <_print>
		printHex( setup.wValue );
    6cb8:	2101      	movs	r1, #1
    6cba:	8868      	ldrh	r0, [r5, #2]
    6cbc:	f001 f9fb 	bl	80b6 <printHex_op>
		print(") wIndex(");
    6cc0:	486c      	ldr	r0, [pc, #432]	; (6e74 <usb_isr+0x5b4>)
    6cc2:	f001 f955 	bl	7f70 <_print>
		printHex( setup.wIndex );
    6cc6:	2101      	movs	r1, #1
    6cc8:	88a8      	ldrh	r0, [r5, #4]
    6cca:	e7d7      	b.n	6c7c <usb_isr+0x3bc>
		print( ")" NL );
		endpoint0_stall();
		return;

	case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    6ccc:	88ab      	ldrh	r3, [r5, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    6cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    6cd2:	2a0a      	cmp	r2, #10
    6cd4:	d8d7      	bhi.n	6c86 <usb_isr+0x3c6>
    6cd6:	886a      	ldrh	r2, [r5, #2]
    6cd8:	2a00      	cmp	r2, #0
    6cda:	d1d4      	bne.n	6c86 <usb_isr+0x3c6>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    6cdc:	009a      	lsls	r2, r3, #2
    6cde:	4b60      	ldr	r3, [pc, #384]	; (6e60 <usb_isr+0x5a0>)
    6ce0:	4413      	add	r3, r2
    6ce2:	781a      	ldrb	r2, [r3, #0]
    6ce4:	f042 0202 	orr.w	r2, r2, #2
    6ce8:	e04b      	b.n	6d82 <usb_isr+0x4c2>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    6cea:	8869      	ldrh	r1, [r5, #2]
    6cec:	88ac      	ldrh	r4, [r5, #4]
    6cee:	4b62      	ldr	r3, [pc, #392]	; (6e78 <usb_isr+0x5b8>)
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    6cf0:	685d      	ldr	r5, [r3, #4]
    6cf2:	2d00      	cmp	r5, #0
    6cf4:	d0c7      	beq.n	6c86 <usb_isr+0x3c6>
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    6cf6:	881e      	ldrh	r6, [r3, #0]
    6cf8:	428e      	cmp	r6, r1
    6cfa:	d113      	bne.n	6d24 <usb_isr+0x464>
    6cfc:	885e      	ldrh	r6, [r3, #2]
    6cfe:	42b4      	cmp	r4, r6
    6d00:	d110      	bne.n	6d24 <usb_isr+0x464>
			{
				data = list->addr;
				if ( (setup.wValue >> 8) == 3 )
    6d02:	0a0e      	lsrs	r6, r1, #8
    6d04:	2e03      	cmp	r6, #3
    6d06:	d101      	bne.n	6d0c <usb_isr+0x44c>
				{
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    6d08:	782b      	ldrb	r3, [r5, #0]
    6d0a:	e044      	b.n	6d96 <usb_isr+0x4d6>
				// According to notes online, it says that some Apple devices can only do 20 mA
				// However, in my testing this hasn't been the case
				// (you can also draw as much current as you want if you just lie in the descriptor :P)
				// If this becomes an issue we can use this hack a second time to negotiate down to 20 mA
				// (which should be fine for just the mcu)
				if ( setup.wValue == 0x0200 && setup.wIndex == 0x0 )
    6d0c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
					// length.
					datalen = *(list->addr);
				}
				else
				{
					datalen = list->length;
    6d10:	891b      	ldrh	r3, [r3, #8]
				// According to notes online, it says that some Apple devices can only do 20 mA
				// However, in my testing this hasn't been the case
				// (you can also draw as much current as you want if you just lie in the descriptor :P)
				// If this becomes an issue we can use this hack a second time to negotiate down to 20 mA
				// (which should be fine for just the mcu)
				if ( setup.wValue == 0x0200 && setup.wIndex == 0x0 )
    6d12:	d140      	bne.n	6d96 <usb_isr+0x4d6>
    6d14:	2c00      	cmp	r4, #0
    6d16:	d13e      	bne.n	6d96 <usb_isr+0x4d6>
				{
					power_neg_delay = 1;
    6d18:	2101      	movs	r1, #1
    6d1a:	7001      	strb	r1, [r0, #0]
					power_neg_time = systick_millis_count;
    6d1c:	6811      	ldr	r1, [r2, #0]
    6d1e:	4a57      	ldr	r2, [pc, #348]	; (6e7c <usb_isr+0x5bc>)
    6d20:	6011      	str	r1, [r2, #0]
    6d22:	e038      	b.n	6d96 <usb_isr+0x4d6>
		#ifdef UART_DEBUG
		print("desc:");
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
    6d24:	330c      	adds	r3, #12
    6d26:	e7e3      	b.n	6cf0 <usb_isr+0x430>
		endpoint0_stall();
		return;

#if enableVirtualSerialPort_define == 1
	case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    6d28:	78aa      	ldrb	r2, [r5, #2]
    6d2a:	4b55      	ldr	r3, [pc, #340]	; (6e80 <usb_isr+0x5c0>)
    6d2c:	e029      	b.n	6d82 <usb_isr+0x4c2>
		print(")");
		print( NL );
		#endif

		// Interface
		switch ( setup.wIndex & 0xFF )
    6d2e:	792b      	ldrb	r3, [r5, #4]
    6d30:	2b01      	cmp	r3, #1
    6d32:	d92e      	bls.n	6d92 <usb_isr+0x4d2>
			break;
		// NKRO Keyboard Interface
		case NKRO_KEYBOARD_INTERFACE:
			break;
		default:
			warn_msg("Unknown interface - ");
    6d34:	4853      	ldr	r0, [pc, #332]	; (6e84 <usb_isr+0x5c4>)
    6d36:	f001 f91b 	bl	7f70 <_print>
			printHex( setup.wIndex );
    6d3a:	88a8      	ldrh	r0, [r5, #4]
    6d3c:	2101      	movs	r1, #1
    6d3e:	f001 f9ba 	bl	80b6 <printHex_op>
			print( NL );
    6d42:	4851      	ldr	r0, [pc, #324]	; (6e88 <usb_isr+0x5c8>)
    6d44:	e79d      	b.n	6c82 <usb_isr+0x3c2>
		{
			if ( list->addr == NULL )
				break;
			if ( list->wValue != 0x2200 )
				continue;
			if ( setup.wIndex == list->wIndex )
    6d46:	88aa      	ldrh	r2, [r5, #4]
    6d48:	4b4b      	ldr	r3, [pc, #300]	; (6e78 <usb_isr+0x5b8>)
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    6d4a:	685d      	ldr	r5, [r3, #4]
    6d4c:	2d00      	cmp	r5, #0
    6d4e:	d09a      	beq.n	6c86 <usb_isr+0x3c6>
				break;
			if ( list->wValue != 0x2200 )
    6d50:	8819      	ldrh	r1, [r3, #0]
    6d52:	f5b1 5f08 	cmp.w	r1, #8704	; 0x2200
    6d56:	d104      	bne.n	6d62 <usb_isr+0x4a2>
				continue;
			if ( setup.wIndex == list->wIndex )
    6d58:	8859      	ldrh	r1, [r3, #2]
    6d5a:	4291      	cmp	r1, r2
    6d5c:	d101      	bne.n	6d62 <usb_isr+0x4a2>
			{
				data = list->addr;
				datalen = list->length;
    6d5e:	891b      	ldrh	r3, [r3, #8]
    6d60:	e019      	b.n	6d96 <usb_isr+0x4d6>
		print("GET_REPORT - ");
		printHex( setup.wIndex );
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
    6d62:	330c      	adds	r3, #12
    6d64:	e7f1      	b.n	6d4a <usb_isr+0x48a>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue >> 8 );
		print(NL);
		#endif
		USBKeys_Idle_Config = (setup.wValue >> 8);
    6d66:	886b      	ldrh	r3, [r5, #2]
    6d68:	4a48      	ldr	r2, [pc, #288]	; (6e8c <usb_isr+0x5cc>)
    6d6a:	0a1b      	lsrs	r3, r3, #8
    6d6c:	7013      	strb	r3, [r2, #0]
		USBKeys_Idle_Expiry = 0;
    6d6e:	4a48      	ldr	r2, [pc, #288]	; (6e90 <usb_isr+0x5d0>)
    6d70:	2300      	movs	r3, #0
    6d72:	6013      	str	r3, [r2, #0]
    6d74:	e00e      	b.n	6d94 <usb_isr+0x4d4>
		printHex( setup.wValue );
		print(" - ");
		printHex( USBKeys_Idle_Config );
		print(NL);
		#endif
		reply_buffer[0] = USBKeys_Idle_Config;
    6d76:	4b45      	ldr	r3, [pc, #276]	; (6e8c <usb_isr+0x5cc>)
    6d78:	4d38      	ldr	r5, [pc, #224]	; (6e5c <usb_isr+0x59c>)
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	e006      	b.n	6d8c <usb_isr+0x4cc>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue & 0xFF );
		print(NL);
		#endif
		USBKeys_Protocol = setup.wValue & 0xFF; // 0 - Boot Mode, 1 - NKRO Mode
    6d7e:	78aa      	ldrb	r2, [r5, #2]
    6d80:	4b44      	ldr	r3, [pc, #272]	; (6e94 <usb_isr+0x5d4>)
    6d82:	701a      	strb	r2, [r3, #0]
    6d84:	e005      	b.n	6d92 <usb_isr+0x4d2>
		printHex( setup.wValue );
		print(" - ");
		printHex( USBKeys_Protocol );
		print(NL);
		#endif
		reply_buffer[0] = USBKeys_Protocol;
    6d86:	4b43      	ldr	r3, [pc, #268]	; (6e94 <usb_isr+0x5d4>)
    6d88:	781b      	ldrb	r3, [r3, #0]
    6d8a:	4d34      	ldr	r5, [pc, #208]	; (6e5c <usb_isr+0x59c>)
    6d8c:	702b      	strb	r3, [r5, #0]
		data = reply_buffer;
		datalen = 1;
    6d8e:	2301      	movs	r3, #1
    6d90:	e001      	b.n	6d96 <usb_isr+0x4d6>
}

static void usb_setup()
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    6d92:	2300      	movs	r3, #0
	}
}

static void usb_setup()
{
	const uint8_t *data = NULL;
    6d94:	461d      	mov	r5, r3
	print(",");
	printHex( datalen );
	print( NL );
	#endif

	if ( datalen > setup.wLength )
    6d96:	88fc      	ldrh	r4, [r7, #6]
    6d98:	429c      	cmp	r4, r3
    6d9a:	bf28      	it	cs
    6d9c:	461c      	movcs	r4, r3
    6d9e:	2c40      	cmp	r4, #64	; 0x40
    6da0:	4626      	mov	r6, r4
    6da2:	bf28      	it	cs
    6da4:	2640      	movcs	r6, #64	; 0x40

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit( data, size );
    6da6:	4628      	mov	r0, r5
    6da8:	4631      	mov	r1, r6
    6daa:	f7ff fc59 	bl	6660 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6dae:	1ba4      	subs	r4, r4, r6
	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit( data, size );
	data += size;
    6db0:	4435      	add	r5, r6
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6db2:	d103      	bne.n	6dbc <usb_isr+0x4fc>
    6db4:	2e40      	cmp	r6, #64	; 0x40
    6db6:	d112      	bne.n	6dde <usb_isr+0x51e>
    6db8:	4626      	mov	r6, r4
    6dba:	e003      	b.n	6dc4 <usb_isr+0x504>
    6dbc:	2c40      	cmp	r4, #64	; 0x40
    6dbe:	4626      	mov	r6, r4
    6dc0:	bf28      	it	cs
    6dc2:	2640      	movcs	r6, #64	; 0x40
		return;

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit( data, size );
    6dc4:	4628      	mov	r0, r5
    6dc6:	4631      	mov	r1, r6
    6dc8:	f7ff fc4a 	bl	6660 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6dcc:	1ba4      	subs	r4, r4, r6

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit( data, size );
	data += size;
    6dce:	4435      	add	r5, r6
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6dd0:	d101      	bne.n	6dd6 <usb_isr+0x516>
    6dd2:	2e40      	cmp	r6, #64	; 0x40
    6dd4:	d103      	bne.n	6dde <usb_isr+0x51e>
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    6dd6:	4b30      	ldr	r3, [pc, #192]	; (6e98 <usb_isr+0x5d8>)
	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
    6dd8:	f8c8 5000 	str.w	r5, [r8]
	ep0_tx_len = datalen;
    6ddc:	801c      	strh	r4, [r3, #0]
		#endif

		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6dde:	2201      	movs	r2, #1
    6de0:	4b2e      	ldr	r3, [pc, #184]	; (6e9c <usb_isr+0x5dc>)
    6de2:	e084      	b.n	6eee <usb_isr+0x62e>

		// CDC Interface
		#if enableVirtualSerialPort_define == 1
		// CDC_SET_LINE_CODING - PID=OUT
		// XXX - Getting lots of NAKs in Linux
		if ( setup.wRequestAndType == 0x2021 )
    6de4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 6ea4 <usb_isr+0x5e4>
    6de8:	f8b8 2000 	ldrh.w	r2, [r8]
    6dec:	f242 0321 	movw	r3, #8225	; 0x2021
    6df0:	429a      	cmp	r2, r3
    6df2:	d104      	bne.n	6dfe <usb_isr+0x53e>
		{
			// Copy over new line coding
			memcpy( (void*)&usb_cdc_line_coding, buf, 7 );
    6df4:	2207      	movs	r2, #7
    6df6:	4629      	mov	r1, r5
    6df8:	4829      	ldr	r0, [pc, #164]	; (6ea0 <usb_isr+0x5e0>)
    6dfa:	f7fb fbbf 	bl	257c <memcpy>
		#endif

		// Keyboard HID SET_REPORT - PID=OUT
		#if enableKeyboard_define == 1
		// XXX - Getting lots of NAKs in Linux
		if ( setup.wRequestAndType == 0x0921 && setup.wValue & 0x200 )
    6dfe:	f8b8 2000 	ldrh.w	r2, [r8]
    6e02:	4f28      	ldr	r7, [pc, #160]	; (6ea4 <usb_isr+0x5e4>)
    6e04:	f640 1321 	movw	r3, #2337	; 0x921
    6e08:	429a      	cmp	r2, r3
    6e0a:	d116      	bne.n	6e3a <usb_isr+0x57a>
    6e0c:	887b      	ldrh	r3, [r7, #2]
    6e0e:	059b      	lsls	r3, r3, #22
    6e10:	d513      	bpl.n	6e3a <usb_isr+0x57a>
			print("]");
			print( NL );
			#endif

			// Interface
			switch ( setup.wIndex & 0xFF )
    6e12:	793b      	ldrb	r3, [r7, #4]
    6e14:	b11b      	cbz	r3, 6e1e <usb_isr+0x55e>
    6e16:	2b01      	cmp	r3, #1
    6e18:	d105      	bne.n	6e26 <usb_isr+0x566>
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Already set with the control sequence
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    6e1a:	786a      	ldrb	r2, [r5, #1]
    6e1c:	e000      	b.n	6e20 <usb_isr+0x560>
			// Interface
			switch ( setup.wIndex & 0xFF )
			{
			// Keyboard Interface
			case KEYBOARD_INTERFACE:
				USBKeys_LEDs = buf[0];
    6e1e:	782a      	ldrb	r2, [r5, #0]
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Already set with the control sequence
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    6e20:	4b21      	ldr	r3, [pc, #132]	; (6ea8 <usb_isr+0x5e8>)
    6e22:	701a      	strb	r2, [r3, #0]
    6e24:	e009      	b.n	6e3a <usb_isr+0x57a>
				break;
			default:
				warn_msg("Unknown interface - ");
    6e26:	4817      	ldr	r0, [pc, #92]	; (6e84 <usb_isr+0x5c4>)
    6e28:	f001 f8a2 	bl	7f70 <_print>
				printHex( setup.wIndex );
    6e2c:	88b8      	ldrh	r0, [r7, #4]
    6e2e:	2101      	movs	r1, #1
    6e30:	f001 f941 	bl	80b6 <printHex_op>
				print( NL );
    6e34:	4814      	ldr	r0, [pc, #80]	; (6e88 <usb_isr+0x5c8>)
    6e36:	f001 f89b 	bl	7f70 <_print>
			//endpoint0_transmit( NULL, 0 );
		}
		#endif

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    6e3a:	4b04      	ldr	r3, [pc, #16]	; (6e4c <usb_isr+0x58c>)
    6e3c:	f844 3036 	str.w	r3, [r4, r6, lsl #3]
    6e40:	e056      	b.n	6ef0 <usb_isr+0x630>
    6e42:	bf00      	nop
    6e44:	1fff9339 	.word	0x1fff9339
    6e48:	0000bc4b 	.word	0x0000bc4b
    6e4c:	004000c8 	.word	0x004000c8
    6e50:	1001c830 	.word	0x1001c830
    6e54:	00400088 	.word	0x00400088
    6e58:	1fff9342 	.word	0x1fff9342
    6e5c:	1fff933a 	.word	0x1fff933a
    6e60:	400720c0 	.word	0x400720c0
    6e64:	0000bdb8 	.word	0x0000bdb8
    6e68:	0000c281 	.word	0x0000c281
    6e6c:	0000bdea 	.word	0x0000bdea
    6e70:	0000be2b 	.word	0x0000be2b
    6e74:	0000be21 	.word	0x0000be21
    6e78:	0000bc58 	.word	0x0000bc58
    6e7c:	1fff9334 	.word	0x1fff9334
    6e80:	1fff9354 	.word	0x1fff9354
    6e84:	0000be60 	.word	0x0000be60
    6e88:	0000c0ef 	.word	0x0000c0ef
    6e8c:	1fff91e6 	.word	0x1fff91e6
    6e90:	1fff91e8 	.word	0x1fff91e8
    6e94:	1fff8d08 	.word	0x1fff8d08
    6e98:	1fff922c 	.word	0x1fff922c
    6e9c:	40072094 	.word	0x40072094
    6ea0:	1fff90bc 	.word	0x1fff90bc
    6ea4:	1fff932c 	.word	0x1fff932c
    6ea8:	1fff91e7 	.word	0x1fff91e7
		break;

	case 0x09: // IN transaction completed to host
		data = ep0_tx_ptr;
    6eac:	4f78      	ldr	r7, [pc, #480]	; (7090 <usb_isr+0x7d0>)
    6eae:	683e      	ldr	r6, [r7, #0]
		if ( data ) print(" DATA ");
		print(NL);
		#endif

		// send remaining data, if any...
		if ( data )
    6eb0:	b1a6      	cbz	r6, 6edc <usb_isr+0x61c>
		{
			size = ep0_tx_len;
    6eb2:	f8df 8234 	ldr.w	r8, [pc, #564]	; 70e8 <usb_isr+0x828>
    6eb6:	f8b8 4000 	ldrh.w	r4, [r8]
    6eba:	2c40      	cmp	r4, #64	; 0x40
    6ebc:	4625      	mov	r5, r4
    6ebe:	bf28      	it	cs
    6ec0:	2540      	movcs	r5, #64	; 0x40
			if (size > EP0_SIZE)
			{
				size = EP0_SIZE;
			}
			endpoint0_transmit( data, size );
    6ec2:	4630      	mov	r0, r6
    6ec4:	4629      	mov	r1, r5
    6ec6:	f7ff fbcb 	bl	6660 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    6eca:	1b60      	subs	r0, r4, r5
    6ecc:	b280      	uxth	r0, r0
    6ece:	f8a8 0000 	strh.w	r0, [r8]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    6ed2:	b908      	cbnz	r0, 6ed8 <usb_isr+0x618>
    6ed4:	2d40      	cmp	r5, #64	; 0x40
    6ed6:	d100      	bne.n	6eda <usb_isr+0x61a>
			if (size > EP0_SIZE)
			{
				size = EP0_SIZE;
			}
			endpoint0_transmit( data, size );
			data += size;
    6ed8:	1970      	adds	r0, r6, r5
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    6eda:	6038      	str	r0, [r7, #0]
		}

		if ( setup.bRequest == 5 && setup.bmRequestType == 0 )
    6edc:	4b6d      	ldr	r3, [pc, #436]	; (7094 <usb_isr+0x7d4>)
    6ede:	881a      	ldrh	r2, [r3, #0]
    6ee0:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    6ee4:	d104      	bne.n	6ef0 <usb_isr+0x630>
		{
			setup.bRequest = 0;
    6ee6:	2200      	movs	r2, #0
    6ee8:	705a      	strb	r2, [r3, #1]
			#ifdef UART_DEBUG
			print("set address: ");
			printHex(setup.wValue);
			print(NL);
			#endif
			USB0_ADDR = setup.wValue;
    6eea:	789a      	ldrb	r2, [r3, #2]
    6eec:	4b6a      	ldr	r3, [pc, #424]	; (7098 <usb_isr+0x7d8>)
    6eee:	701a      	strb	r2, [r3, #0]
		print(" ms");
		print(NL);
		#endif
		break;
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6ef0:	4b6a      	ldr	r3, [pc, #424]	; (709c <usb_isr+0x7dc>)
    6ef2:	2201      	movs	r2, #1
    6ef4:	701a      	strb	r2, [r3, #0]
    6ef6:	e078      	b.n	6fea <usb_isr+0x72a>
		{
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
    6ef8:	4637      	mov	r7, r6
    6efa:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    6efe:	3d01      	subs	r5, #1
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6f00:	6872      	ldr	r2, [r6, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays

			if ( stat & 0x08 )
    6f02:	f003 0308 	and.w	r3, r3, #8
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6f06:	f1a2 0008 	sub.w	r0, r2, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    6f0a:	b2ed      	uxtb	r5, r5

			if ( stat & 0x08 )
    6f0c:	f003 0eff 	and.w	lr, r3, #255	; 0xff
    6f10:	2b00      	cmp	r3, #0
    6f12:	d036      	beq.n	6f82 <usb_isr+0x6c2>
			{ // transmit
				usb_free( packet );
    6f14:	f000 fb08 	bl	7528 <usb_free>
				packet = tx_first[ endpoint ];
    6f18:	4861      	ldr	r0, [pc, #388]	; (70a0 <usb_isr+0x7e0>)
    6f1a:	4b62      	ldr	r3, [pc, #392]	; (70a4 <usb_isr+0x7e4>)
    6f1c:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
				if ( packet )
    6f20:	b1e9      	cbz	r1, 6f5e <usb_isr+0x69e>
				{
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    6f22:	684a      	ldr	r2, [r1, #4]
    6f24:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
					b->addr = packet->buf;
    6f28:	f101 0208 	add.w	r2, r1, #8
    6f2c:	6072      	str	r2, [r6, #4]
					switch ( tx_state[ endpoint ] )
    6f2e:	5d5a      	ldrb	r2, [r3, r5]
    6f30:	2a03      	cmp	r2, #3
    6f32:	d80b      	bhi.n	6f4c <usb_isr+0x68c>
    6f34:	e8df f002 	tbb	[pc, r2]
    6f38:	08060402 	.word	0x08060402
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[ endpoint ] = TX_STATE_ODD_FREE;
    6f3c:	2203      	movs	r2, #3
    6f3e:	e004      	b.n	6f4a <usb_isr+0x68a>
						break;
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[ endpoint ] = TX_STATE_EVEN_FREE;
    6f40:	2202      	movs	r2, #2
    6f42:	e002      	b.n	6f4a <usb_isr+0x68a>
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_ODD_FIRST;
    6f44:	2205      	movs	r2, #5
    6f46:	e000      	b.n	6f4a <usb_isr+0x68a>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_EVEN_FIRST;
    6f48:	2204      	movs	r2, #4
    6f4a:	555a      	strb	r2, [r3, r5]
						break;
					default:
						break;
					}
					b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6f4c:	f016 0f08 	tst.w	r6, #8
    6f50:	880a      	ldrh	r2, [r1, #0]
    6f52:	bf14      	ite	ne
    6f54:	23c8      	movne	r3, #200	; 0xc8
    6f56:	2388      	moveq	r3, #136	; 0x88
    6f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6f5c:	e043      	b.n	6fe6 <usb_isr+0x726>
				} else {
					//serial_print("tx no packet\n");
					switch ( tx_state[ endpoint ] )
    6f5e:	5d5a      	ldrb	r2, [r3, r5]
    6f60:	2a03      	cmp	r2, #3
    6f62:	d807      	bhi.n	6f74 <usb_isr+0x6b4>
    6f64:	e8df f002 	tbb	[pc, r2]
    6f68:	04024141 	.word	0x04024141
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    6f6c:	2200      	movs	r2, #0
    6f6e:	e006      	b.n	6f7e <usb_isr+0x6be>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6f70:	2201      	movs	r2, #1
    6f72:	e004      	b.n	6f7e <usb_isr+0x6be>
						break;
					default:
						tx_state[ endpoint ] = ((uint32_t)b & 8)
    6f74:	f016 0f08 	tst.w	r6, #8
    6f78:	bf14      	ite	ne
    6f7a:	2203      	movne	r2, #3
    6f7c:	2202      	moveq	r2, #2
    6f7e:	555a      	strb	r2, [r3, r5]
							? TX_STATE_ODD_FREE
							: TX_STATE_EVEN_FREE;
						break;
    6f80:	e033      	b.n	6fea <usb_isr+0x72a>
					}
				}
			}
			else
			{ // receive
				packet->len = b->desc >> 16;
    6f82:	f854 3037 	ldr.w	r3, [r4, r7, lsl #3]
    6f86:	0c1b      	lsrs	r3, r3, #16
    6f88:	b299      	uxth	r1, r3
    6f8a:	f822 1c08 	strh.w	r1, [r2, #-8]
				if ( packet->len > 0 )
    6f8e:	b323      	cbz	r3, 6fda <usb_isr+0x71a>
				{
					packet->index = 0;
					packet->next = NULL;
					if ( rx_first[ endpoint ] == NULL )
    6f90:	4b45      	ldr	r3, [pc, #276]	; (70a8 <usb_isr+0x7e8>)
			else
			{ // receive
				packet->len = b->desc >> 16;
				if ( packet->len > 0 )
				{
					packet->index = 0;
    6f92:	f822 ec06 	strh.w	lr, [r2, #-6]
					packet->next = NULL;
    6f96:	f842 ec04 	str.w	lr, [r2, #-4]
					if ( rx_first[ endpoint ] == NULL )
    6f9a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    6f9e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 70ec <usb_isr+0x82c>
    6fa2:	b912      	cbnz	r2, 6faa <usb_isr+0x6ea>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[ endpoint ] = packet;
    6fa4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    6fa8:	e002      	b.n	6fb0 <usb_isr+0x6f0>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
    6faa:	f85e 3025 	ldr.w	r3, [lr, r5, lsl #2]
    6fae:	6058      	str	r0, [r3, #4]
					}
					rx_last[ endpoint ] = packet;
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    6fb0:	4a3e      	ldr	r2, [pc, #248]	; (70ac <usb_isr+0x7ec>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
					}
					rx_last[ endpoint ] = packet;
    6fb2:	f84e 0025 	str.w	r0, [lr, r5, lsl #2]
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    6fb6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    6fba:	440b      	add	r3, r1
    6fbc:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    6fc0:	f000 fa94 	bl	74ec <usb_malloc>
					if ( packet )
    6fc4:	b110      	cbz	r0, 6fcc <usb_isr+0x70c>
					{
						b->addr = packet->buf;
    6fc6:	3008      	adds	r0, #8
    6fc8:	6070      	str	r0, [r6, #4]
    6fca:	e006      	b.n	6fda <usb_isr+0x71a>
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    6fcc:	4a38      	ldr	r2, [pc, #224]	; (70b0 <usb_isr+0x7f0>)
					else
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    6fce:	f844 0037 	str.w	r0, [r4, r7, lsl #3]
						usb_rx_memory_needed++;
    6fd2:	7813      	ldrb	r3, [r2, #0]
    6fd4:	3301      	adds	r3, #1
    6fd6:	7013      	strb	r3, [r2, #0]
    6fd8:	e007      	b.n	6fea <usb_isr+0x72a>
					}
				}
				else
				{
					b->desc = BDT_DESC( 64, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6fda:	4a36      	ldr	r2, [pc, #216]	; (70b4 <usb_isr+0x7f4>)
    6fdc:	4b36      	ldr	r3, [pc, #216]	; (70b8 <usb_isr+0x7f8>)
    6fde:	f016 0f08 	tst.w	r6, #8
    6fe2:	bf08      	it	eq
    6fe4:	4613      	moveq	r3, r2
    6fe6:	f844 3037 	str.w	r3, [r4, r7, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    6fea:	4a34      	ldr	r2, [pc, #208]	; (70bc <usb_isr+0x7fc>)
    6fec:	2308      	movs	r3, #8
    6fee:	7013      	strb	r3, [r2, #0]
		goto restart;
    6ff0:	e468      	b.n	68c4 <usb_isr+0x4>
	}


	if ( status & USB_ISTAT_USBRST /* 01 */ )
    6ff2:	07e6      	lsls	r6, r4, #31
    6ff4:	d51e      	bpl.n	7034 <usb_isr+0x774>
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6ff6:	4929      	ldr	r1, [pc, #164]	; (709c <usb_isr+0x7dc>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6ff8:	482e      	ldr	r0, [pc, #184]	; (70b4 <usb_isr+0x7f4>)
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    6ffa:	4c31      	ldr	r4, [pc, #196]	; (70c0 <usb_isr+0x800>)
	if ( status & USB_ISTAT_USBRST /* 01 */ )
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6ffc:	2302      	movs	r3, #2
    6ffe:	700b      	strb	r3, [r1, #0]
		ep0_tx_bdt_bank = 0;
    7000:	4b30      	ldr	r3, [pc, #192]	; (70c4 <usb_isr+0x804>)
    7002:	701a      	strb	r2, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    7004:	4b30      	ldr	r3, [pc, #192]	; (70c8 <usb_isr+0x808>)
    7006:	6018      	str	r0, [r3, #0]
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
		table[index( 0, RX, ODD ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    7008:	6098      	str	r0, [r3, #8]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
    700a:	4830      	ldr	r0, [pc, #192]	; (70cc <usb_isr+0x80c>)
    700c:	60d8      	str	r0, [r3, #12]
		table[index( 0, TX, EVEN ) ].desc = 0;
    700e:	611a      	str	r2, [r3, #16]
		table[index( 0, TX, ODD ) ].desc = 0;
    7010:	619a      	str	r2, [r3, #24]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    7012:	605c      	str	r4, [r3, #4]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
		table[index( 0, TX, EVEN ) ].desc = 0;
		table[index( 0, TX, ODD ) ].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    7014:	4b2e      	ldr	r3, [pc, #184]	; (70d0 <usb_isr+0x810>)
    7016:	200d      	movs	r0, #13
    7018:	7018      	strb	r0, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    701a:	482e      	ldr	r0, [pc, #184]	; (70d4 <usb_isr+0x814>)
    701c:	23ff      	movs	r3, #255	; 0xff
    701e:	7003      	strb	r3, [r0, #0]
		USB0_ISTAT = 0xFF;
    7020:	702b      	strb	r3, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    7022:	7402      	strb	r2, [r0, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    7024:	4a2c      	ldr	r2, [pc, #176]	; (70d8 <usb_isr+0x818>)
    7026:	7013      	strb	r3, [r2, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    7028:	4b2c      	ldr	r3, [pc, #176]	; (70dc <usb_isr+0x81c>)
    702a:	22bf      	movs	r2, #191	; 0xbf
    702c:	701a      	strb	r2, [r3, #0]
			USB_INTEN_USBRSTEN |
			USB_INTEN_RESUMEEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    702e:	2301      	movs	r3, #1
    7030:	700b      	strb	r3, [r1, #0]
		return;
    7032:	e029      	b.n	7088 <usb_isr+0x7c8>
	}


	if ( (status & USB_ISTAT_STALL /* 80 */ ) )
    7034:	0620      	lsls	r0, r4, #24
    7036:	d504      	bpl.n	7042 <usb_isr+0x782>
	{
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    7038:	4b25      	ldr	r3, [pc, #148]	; (70d0 <usb_isr+0x810>)
    703a:	220d      	movs	r2, #13
    703c:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    703e:	2380      	movs	r3, #128	; 0x80
    7040:	702b      	strb	r3, [r5, #0]
	}
	if ( (status & USB_ISTAT_ERROR /* 02 */ ) )
    7042:	07a1      	lsls	r1, r4, #30
    7044:	d505      	bpl.n	7052 <usb_isr+0x792>
	{
		uint8_t err = USB0_ERRSTAT;
    7046:	4a23      	ldr	r2, [pc, #140]	; (70d4 <usb_isr+0x814>)
    7048:	7813      	ldrb	r3, [r2, #0]
    704a:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    704c:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    704e:	2302      	movs	r3, #2
    7050:	702b      	strb	r3, [r5, #0]
	}

	// USB Host signalling device to enter 'sleep' state
	// The USB Module triggers this interrupt when it detects the bus has been idle for 3 ms
	if ( (status & USB_ISTAT_SLEEP /* 10 */ ) )
    7052:	06e2      	lsls	r2, r4, #27
    7054:	d509      	bpl.n	706a <usb_isr+0x7aa>
#if enableUSBSuspend_define == 1
		// Can cause issues with the virtual serial port
		#if enableVirtualSerialPort_define != 1
		info_print("Host has requested USB sleep/suspend state");
		#endif
		Output_update_usb_current( 100 ); // Set to 100 mA
    7056:	2064      	movs	r0, #100	; 0x64
    7058:	f7ff faca 	bl	65f0 <Output_update_usb_current>
		usb_dev_sleep = 1;
    705c:	4b20      	ldr	r3, [pc, #128]	; (70e0 <usb_isr+0x820>)
    705e:	2201      	movs	r2, #1
    7060:	701a      	strb	r2, [r3, #0]
#else
		info_print("USB Suspend Detected - Firmware USB Suspend Disabled");
#endif
		USB0_ISTAT |= USB_ISTAT_SLEEP;
    7062:	782b      	ldrb	r3, [r5, #0]
    7064:	f043 0310 	orr.w	r3, r3, #16
    7068:	702b      	strb	r3, [r5, #0]
	}

	// On USB Resume, unset the usb_dev_sleep so we don't keep sending resume signals
	if ( (status & USB_ISTAT_RESUME /* 20 */ ) )
    706a:	06a3      	lsls	r3, r4, #26
    706c:	d50c      	bpl.n	7088 <usb_isr+0x7c8>
	{
		// Can cause issues with the virtual serial port
		#if enableVirtualSerialPort_define != 1
		info_print("Host has woken-up/resumed from sleep/suspend state");
		#endif
		Output_update_usb_current( *usb_bMaxPower * 2 );
    706e:	4b1d      	ldr	r3, [pc, #116]	; (70e4 <usb_isr+0x824>)
    7070:	681b      	ldr	r3, [r3, #0]
    7072:	7818      	ldrb	r0, [r3, #0]
    7074:	0040      	lsls	r0, r0, #1
    7076:	f7ff fabb 	bl	65f0 <Output_update_usb_current>
		usb_dev_sleep = 0;
    707a:	4b19      	ldr	r3, [pc, #100]	; (70e0 <usb_isr+0x820>)
    707c:	2200      	movs	r2, #0
    707e:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT |= USB_ISTAT_RESUME;
    7080:	782b      	ldrb	r3, [r5, #0]
    7082:	f043 0320 	orr.w	r3, r3, #32
    7086:	702b      	strb	r3, [r5, #0]
	}
}
    7088:	b003      	add	sp, #12
    708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    708e:	bf00      	nop
    7090:	1fff91f4 	.word	0x1fff91f4
    7094:	1fff932c 	.word	0x1fff932c
    7098:	40072098 	.word	0x40072098
    709c:	40072094 	.word	0x40072094
    70a0:	1fff92dc 	.word	0x1fff92dc
    70a4:	1fff9220 	.word	0x1fff9220
    70a8:	1fff9270 	.word	0x1fff9270
    70ac:	1fffa5e2 	.word	0x1fffa5e2
    70b0:	1fff9339 	.word	0x1fff9339
    70b4:	00400088 	.word	0x00400088
    70b8:	004000c8 	.word	0x004000c8
    70bc:	40072080 	.word	0x40072080
    70c0:	1fff9230 	.word	0x1fff9230
    70c4:	1fff9298 	.word	0x1fff9298
    70c8:	1fff8000 	.word	0x1fff8000
    70cc:	1fff929c 	.word	0x1fff929c
    70d0:	400720c0 	.word	0x400720c0
    70d4:	40072088 	.word	0x40072088
    70d8:	4007208c 	.word	0x4007208c
    70dc:	40072084 	.word	0x40072084
    70e0:	1fff9338 	.word	0x1fff9338
    70e4:	1fff8fa0 	.word	0x1fff8fa0
    70e8:	1fff922c 	.word	0x1fff922c
    70ec:	1fff91f8 	.word	0x1fff91f8

000070f0 <usb_init>:
{
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	USBInit_TimeStart = systick_millis_count;
    70f0:	4b33      	ldr	r3, [pc, #204]	; (71c0 <usb_init+0xd0>)
    70f2:	681a      	ldr	r2, [r3, #0]
    70f4:	4b33      	ldr	r3, [pc, #204]	; (71c4 <usb_init+0xd4>)
}



uint8_t usb_init()
{
    70f6:	b510      	push	{r4, lr}
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	USBInit_TimeStart = systick_millis_count;
    70f8:	601a      	str	r2, [r3, #0]
	USBInit_Ticks = 0;
    70fa:	4b33      	ldr	r3, [pc, #204]	; (71c8 <usb_init+0xd8>)
    70fc:	2400      	movs	r4, #0
    70fe:	801c      	strh	r4, [r3, #0]

	// XXX Set wTotalLength here instead of using defines
	//     Simplifies defines considerably
	usb_set_config_descriptor_size();
    7100:	f7ff faa6 	bl	6650 <usb_set_config_descriptor_size>
	// It's split up into 4 32 bit registers
	// 1) Read out register
	// 2) Convert to UTF-16-LE
	// 3) Write to USB Descriptor Memory (space is pre-allocated)
	extern struct usb_string_descriptor_struct usb_string_serial_number_default;
	hex32ToStr16( SIM_UIDH,  &(usb_string_serial_number_default.wString[0]), 8 );
    7104:	4b31      	ldr	r3, [pc, #196]	; (71cc <usb_init+0xdc>)
    7106:	4932      	ldr	r1, [pc, #200]	; (71d0 <usb_init+0xe0>)
    7108:	6818      	ldr	r0, [r3, #0]
    710a:	2208      	movs	r2, #8
    710c:	f001 f81a 	bl	8144 <hex32ToStr16>
	hex32ToStr16( SIM_UIDMH, &(usb_string_serial_number_default.wString[8]), 8 );
    7110:	4b30      	ldr	r3, [pc, #192]	; (71d4 <usb_init+0xe4>)
    7112:	4931      	ldr	r1, [pc, #196]	; (71d8 <usb_init+0xe8>)
    7114:	6818      	ldr	r0, [r3, #0]
    7116:	2208      	movs	r2, #8
    7118:	f001 f814 	bl	8144 <hex32ToStr16>
	hex32ToStr16( SIM_UIDML, &(usb_string_serial_number_default.wString[16]), 8 );
    711c:	4b2f      	ldr	r3, [pc, #188]	; (71dc <usb_init+0xec>)
    711e:	4930      	ldr	r1, [pc, #192]	; (71e0 <usb_init+0xf0>)
    7120:	6818      	ldr	r0, [r3, #0]
    7122:	2208      	movs	r2, #8
    7124:	f001 f80e 	bl	8144 <hex32ToStr16>
	hex32ToStr16( SIM_UIDL,  &(usb_string_serial_number_default.wString[24]), 8 );
    7128:	4b2e      	ldr	r3, [pc, #184]	; (71e4 <usb_init+0xf4>)
    712a:	492f      	ldr	r1, [pc, #188]	; (71e8 <usb_init+0xf8>)
    712c:	6818      	ldr	r0, [r3, #0]
    712e:	2208      	movs	r2, #8
    7130:	f001 f808 	bl	8144 <hex32ToStr16>
#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
	{
		table[i].desc = 0;
    7134:	482d      	ldr	r0, [pc, #180]	; (71ec <usb_init+0xfc>)
	// 3) Write to USB Descriptor Memory (space is pre-allocated)
	extern struct usb_string_descriptor_struct usb_string_serial_number_default;
	hex32ToStr16( SIM_UIDH,  &(usb_string_serial_number_default.wString[0]), 8 );
	hex32ToStr16( SIM_UIDMH, &(usb_string_serial_number_default.wString[8]), 8 );
	hex32ToStr16( SIM_UIDML, &(usb_string_serial_number_default.wString[16]), 8 );
	hex32ToStr16( SIM_UIDL,  &(usb_string_serial_number_default.wString[24]), 8 );
    7136:	4623      	mov	r3, r4
#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
	{
		table[i].desc = 0;
    7138:	4621      	mov	r1, r4
		table[i].addr = 0;
    713a:	18c2      	adds	r2, r0, r3
#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
	{
		table[i].desc = 0;
    713c:	5019      	str	r1, [r3, r0]
    713e:	3308      	adds	r3, #8
	hex32ToStr16( SIM_UIDML, &(usb_string_serial_number_default.wString[16]), 8 );
	hex32ToStr16( SIM_UIDL,  &(usb_string_serial_number_default.wString[24]), 8 );
#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    7140:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
	{
		table[i].desc = 0;
		table[i].addr = 0;
    7144:	6051      	str	r1, [r2, #4]
    7146:	4a29      	ldr	r2, [pc, #164]	; (71ec <usb_init+0xfc>)
	hex32ToStr16( SIM_UIDML, &(usb_string_serial_number_default.wString[16]), 8 );
	hex32ToStr16( SIM_UIDL,  &(usb_string_serial_number_default.wString[24]), 8 );
#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    7148:	d1f7      	bne.n	713a <usb_init+0x4a>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    714a:	4929      	ldr	r1, [pc, #164]	; (71f0 <usb_init+0x100>)
    714c:	680b      	ldr	r3, [r1, #0]
    714e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    7152:	600b      	str	r3, [r1, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    7154:	4b27      	ldr	r3, [pc, #156]	; (71f4 <usb_init+0x104>)
    7156:	2180      	movs	r1, #128	; 0x80
    7158:	7019      	strb	r1, [r3, #0]
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end
    715a:	7818      	ldrb	r0, [r3, #0]
    715c:	4925      	ldr	r1, [pc, #148]	; (71f4 <usb_init+0x104>)
    715e:	0600      	lsls	r0, r0, #24
    7160:	d4fb      	bmi.n	715a <usb_init+0x6a>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    7162:	4b25      	ldr	r3, [pc, #148]	; (71f8 <usb_init+0x108>)
    7164:	f3c2 2007 	ubfx	r0, r2, #8, #8
    7168:	7018      	strb	r0, [r3, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    716a:	f3c2 4007 	ubfx	r0, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    716e:	0e12      	lsrs	r2, r2, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    7170:	7518      	strb	r0, [r3, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    7172:	761a      	strb	r2, [r3, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    7174:	4a21      	ldr	r2, [pc, #132]	; (71fc <usb_init+0x10c>)
    7176:	23ff      	movs	r3, #255	; 0xff
    7178:	7013      	strb	r3, [r2, #0]
	USB0_ERRSTAT = 0xFF;
    717a:	7213      	strb	r3, [r2, #8]
	USB0_OTGISTAT = 0xFF;
    717c:	f802 3c70 	strb.w	r3, [r2, #-112]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    7180:	780b      	ldrb	r3, [r1, #0]
    7182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7186:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    7188:	4b1d      	ldr	r3, [pc, #116]	; (7200 <usb_init+0x110>)
    718a:	2001      	movs	r0, #1
    718c:	7018      	strb	r0, [r3, #0]
	USB0_USBCTRL = 0;
    718e:	2300      	movs	r3, #0
    7190:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    7194:	7110      	strb	r0, [r2, #4]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    7196:	4a1b      	ldr	r2, [pc, #108]	; (7204 <usb_init+0x114>)
    7198:	2170      	movs	r1, #112	; 0x70
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    719a:	f46f 7450 	mvn.w	r4, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    719e:	7011      	strb	r1, [r2, #0]
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    71a0:	4422      	add	r2, r4
    71a2:	f44f 7100 	mov.w	r1, #512	; 0x200
    71a6:	6011      	str	r1, [r2, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    71a8:	f102 42c0 	add.w	r2, r2, #1610612736	; 0x60000000
    71ac:	f502 22c8 	add.w	r2, r2, #409600	; 0x64000
    71b0:	2110      	movs	r1, #16
    71b2:	7011      	strb	r1, [r2, #0]

	// Do not check for power negotiation delay until Get Configuration Descriptor
	power_neg_delay = 0;
    71b4:	4a14      	ldr	r2, [pc, #80]	; (7208 <usb_init+0x118>)
    71b6:	7013      	strb	r3, [r2, #0]

	// During initialization host isn't sleeping
	usb_dev_sleep = 0;
    71b8:	4a14      	ldr	r2, [pc, #80]	; (720c <usb_init+0x11c>)
    71ba:	7013      	strb	r3, [r2, #0]

	return 1;
}
    71bc:	bd10      	pop	{r4, pc}
    71be:	bf00      	nop
    71c0:	1fff90c4 	.word	0x1fff90c4
    71c4:	1fffa5dc 	.word	0x1fffa5dc
    71c8:	1fffa5a2 	.word	0x1fffa5a2
    71cc:	40048054 	.word	0x40048054
    71d0:	1fff9054 	.word	0x1fff9054
    71d4:	40048058 	.word	0x40048058
    71d8:	1fff9064 	.word	0x1fff9064
    71dc:	4004805c 	.word	0x4004805c
    71e0:	1fff9074 	.word	0x1fff9074
    71e4:	40048060 	.word	0x40048060
    71e8:	1fff9084 	.word	0x1fff9084
    71ec:	1fff8000 	.word	0x1fff8000
    71f0:	40048034 	.word	0x40048034
    71f4:	4007210c 	.word	0x4007210c
    71f8:	4007209c 	.word	0x4007209c
    71fc:	40072080 	.word	0x40072080
    7200:	40072094 	.word	0x40072094
    7204:	e000e449 	.word	0xe000e449
    7208:	1fff922a 	.word	0x1fff922a
    720c:	1fff9338 	.word	0x1fff9338

00007210 <usb_keyboard_send>:

// ----- Functions -----

// send the contents of keyboard_keys and keyboard_modifier_keys
void usb_keyboard_send()
{
    7210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    7214:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 74e8 <usb_keyboard_send+0x2d8>
			// Drop packet
			USBKeys_Changed = USBKeyChangeState_None;
			return;
		}

		if ( USBKeys_Protocol == 0 ) // Boot Mode
    7218:	4f9f      	ldr	r7, [pc, #636]	; (7498 <usb_keyboard_send+0x288>)

// ----- Functions -----

// send the contents of keyboard_keys and keyboard_modifier_keys
void usb_keyboard_send()
{
    721a:	f246 4601 	movw	r6, #25601	; 0x6401
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    721e:	f898 3000 	ldrb.w	r3, [r8]
    7222:	b90b      	cbnz	r3, 7228 <usb_keyboard_send+0x18>
		{
			erro_print("USB not configured...");
    7224:	489d      	ldr	r0, [pc, #628]	; (749c <usb_keyboard_send+0x28c>)
    7226:	e02c      	b.n	7282 <usb_keyboard_send+0x72>
			return;
		}

		// Try to wake up the host if it's asleep
		if ( usb_resume() )
    7228:	f7ff fabc 	bl	67a4 <usb_resume>
    722c:	b120      	cbz	r0, 7238 <usb_keyboard_send+0x28>
		{
			// Drop packet
			USBKeys_Changed = USBKeyChangeState_None;
    722e:	4b9c      	ldr	r3, [pc, #624]	; (74a0 <usb_keyboard_send+0x290>)
    7230:	2200      	movs	r2, #0
    7232:	701a      	strb	r2, [r3, #0]
			return;
    7234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		if ( USBKeys_Protocol == 0 ) // Boot Mode
    7238:	783b      	ldrb	r3, [r7, #0]
    723a:	4d9a      	ldr	r5, [pc, #616]	; (74a4 <usb_keyboard_send+0x294>)
    723c:	b93b      	cbnz	r3, 724e <usb_keyboard_send+0x3e>
		{
			if ( usb_tx_packet_count( KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    723e:	2001      	movs	r0, #1
    7240:	f7ff fa62 	bl	6708 <usb_tx_packet_count>
    7244:	2803      	cmp	r0, #3
    7246:	d90e      	bls.n	7266 <usb_keyboard_send+0x56>
					break;
			}
		}

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    7248:	3e01      	subs	r6, #1
    724a:	d112      	bne.n	7272 <usb_keyboard_send+0x62>
    724c:	e013      	b.n	7276 <usb_keyboard_send+0x66>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Protocol == 1 ) // NKRO Mode
    724e:	783b      	ldrb	r3, [r7, #0]
    7250:	2b01      	cmp	r3, #1
    7252:	d101      	bne.n	7258 <usb_keyboard_send+0x48>
		{
			if ( usb_tx_packet_count( NKRO_KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    7254:	2002      	movs	r0, #2
    7256:	e7f3      	b.n	7240 <usb_keyboard_send+0x30>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Changed &
    7258:	4b91      	ldr	r3, [pc, #580]	; (74a0 <usb_keyboard_send+0x290>)
    725a:	781b      	ldrb	r3, [r3, #0]
    725c:	f013 0f60 	tst.w	r3, #96	; 0x60
    7260:	d0f2      	beq.n	7248 <usb_keyboard_send+0x38>
			( USBKeyChangeState_System | USBKeyChangeState_Consumer )
		)
		{
			if ( usb_tx_packet_count( SYS_CTRL_ENDPOINT ) < TX_PACKET_LIMIT )
    7262:	2003      	movs	r0, #3
    7264:	e7ec      	b.n	7240 <usb_keyboard_send+0x30>
			{
				tx_packet = usb_malloc();
    7266:	f000 f941 	bl	74ec <usb_malloc>
				if ( tx_packet )
    726a:	4604      	mov	r4, r0
    726c:	2800      	cmp	r0, #0
    726e:	d0eb      	beq.n	7248 <usb_keyboard_send+0x38>
    7270:	e00e      	b.n	7290 <usb_keyboard_send+0x80>
					break;
			}
		}

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    7272:	782b      	ldrb	r3, [r5, #0]
    7274:	b14b      	cbz	r3, 728a <usb_keyboard_send+0x7a>
		{
			transmit_previous_timeout = 1;
    7276:	2301      	movs	r3, #1
    7278:	702b      	strb	r3, [r5, #0]
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
    727a:	4b89      	ldr	r3, [pc, #548]	; (74a0 <usb_keyboard_send+0x290>)
			#if enableDeviceRestartOnUSBTimeout == 1
			warn_print("USB Transmit Timeout...restarting device");
			usb_device_software_reset();
			#else
			warn_print("USB Transmit Timeout...auto-restart disabled");
    727c:	488a      	ldr	r0, [pc, #552]	; (74a8 <usb_keyboard_send+0x298>)

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
    727e:	2200      	movs	r2, #0
    7280:	701a      	strb	r2, [r3, #0]

		break;
	}

	return;
}
    7282:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
			#if enableDeviceRestartOnUSBTimeout == 1
			warn_print("USB Transmit Timeout...restarting device");
			usb_device_software_reset();
			#else
			warn_print("USB Transmit Timeout...auto-restart disabled");
    7286:	f000 be73 	b.w	7f70 <_print>
			#endif
			// Try to wakeup
			return;
		}

		yield();
    728a:	f7fb f983 	bl	2594 <yield>
	}
    728e:	e7c6      	b.n	721e <usb_keyboard_send+0xe>

	transmit_previous_timeout = 0;
    7290:	2300      	movs	r3, #0
    7292:	702b      	strb	r3, [r5, #0]

	// Pointer to USB tx packet buffer
	uint8_t *tx_buf = tx_packet->buf;

	// Check system control keys
	if ( USBKeys_Changed & USBKeyChangeState_System )
    7294:	4d82      	ldr	r5, [pc, #520]	; (74a0 <usb_keyboard_send+0x290>)
    7296:	782b      	ldrb	r3, [r5, #0]
    7298:	069a      	lsls	r2, r3, #26
    729a:	d51a      	bpl.n	72d2 <usb_keyboard_send+0xc2>
	{
		if ( Output_DebugMode )
    729c:	4b83      	ldr	r3, [pc, #524]	; (74ac <usb_keyboard_send+0x29c>)
    729e:	4e84      	ldr	r6, [pc, #528]	; (74b0 <usb_keyboard_send+0x2a0>)
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	b14b      	cbz	r3, 72b8 <usb_keyboard_send+0xa8>
		{
			print("SysCtrl[");
    72a4:	4883      	ldr	r0, [pc, #524]	; (74b4 <usb_keyboard_send+0x2a4>)
    72a6:	f000 fe63 	bl	7f70 <_print>
			printHex_op( USBKeys_SysCtrl, 2 );
    72aa:	7830      	ldrb	r0, [r6, #0]
    72ac:	2102      	movs	r1, #2
    72ae:	f000 ff02 	bl	80b6 <printHex_op>
			print( "] " NL );
    72b2:	4881      	ldr	r0, [pc, #516]	; (74b8 <usb_keyboard_send+0x2a8>)
    72b4:	f000 fe5c 	bl	7f70 <_print>
		}

		*tx_buf++ = 0x02; // ID
    72b8:	2302      	movs	r3, #2
		*tx_buf   = USBKeys_SysCtrl;
    72ba:	7832      	ldrb	r2, [r6, #0]
			print("SysCtrl[");
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
    72bc:	7223      	strb	r3, [r4, #8]
		*tx_buf   = USBKeys_SysCtrl;
		tx_packet->len = 2;
    72be:	8023      	strh	r3, [r4, #0]
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
		*tx_buf   = USBKeys_SysCtrl;
    72c0:	7262      	strb	r2, [r4, #9]
		tx_packet->len = 2;

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    72c2:	4621      	mov	r1, r4
    72c4:	2003      	movs	r0, #3
    72c6:	f7ff fa8f 	bl	67e8 <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_System; // Mark sent
    72ca:	782b      	ldrb	r3, [r5, #0]
    72cc:	f023 0320 	bic.w	r3, r3, #32
    72d0:	e0df      	b.n	7492 <usb_keyboard_send+0x282>
		return;
	}

	// Check consumer control keys
	if ( USBKeys_Changed & USBKeyChangeState_Consumer )
    72d2:	065b      	lsls	r3, r3, #25
    72d4:	d51b      	bpl.n	730e <usb_keyboard_send+0xfe>
	{
		if ( Output_DebugMode )
    72d6:	4b75      	ldr	r3, [pc, #468]	; (74ac <usb_keyboard_send+0x29c>)
    72d8:	4e78      	ldr	r6, [pc, #480]	; (74bc <usb_keyboard_send+0x2ac>)
    72da:	781b      	ldrb	r3, [r3, #0]
    72dc:	b14b      	cbz	r3, 72f2 <usb_keyboard_send+0xe2>
		{
			print("ConsCtrl[");
    72de:	4878      	ldr	r0, [pc, #480]	; (74c0 <usb_keyboard_send+0x2b0>)
    72e0:	f000 fe46 	bl	7f70 <_print>
			printHex_op( USBKeys_ConsCtrl, 2 );
    72e4:	8830      	ldrh	r0, [r6, #0]
    72e6:	2102      	movs	r1, #2
    72e8:	f000 fee5 	bl	80b6 <printHex_op>
			print( "] " NL );
    72ec:	4872      	ldr	r0, [pc, #456]	; (74b8 <usb_keyboard_send+0x2a8>)
    72ee:	f000 fe3f 	bl	7f70 <_print>
		}

		*tx_buf++ = 0x03; // ID
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
    72f2:	8833      	ldrh	r3, [r6, #0]
    72f4:	7263      	strb	r3, [r4, #9]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    72f6:	2003      	movs	r0, #3
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
    72f8:	0a1b      	lsrs	r3, r3, #8
    72fa:	72a3      	strb	r3, [r4, #10]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    72fc:	7220      	strb	r0, [r4, #8]
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
		tx_packet->len = 3;
    72fe:	8020      	strh	r0, [r4, #0]

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    7300:	4621      	mov	r1, r4
    7302:	f7ff fa71 	bl	67e8 <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_Consumer; // Mark sent
    7306:	782b      	ldrb	r3, [r5, #0]
    7308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    730c:	e0c1      	b.n	7492 <usb_keyboard_send+0x282>
		return;
	}

	switch ( USBKeys_Protocol )
    730e:	4b62      	ldr	r3, [pc, #392]	; (7498 <usb_keyboard_send+0x288>)
    7310:	781b      	ldrb	r3, [r3, #0]
    7312:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    7316:	b11b      	cbz	r3, 7320 <usb_keyboard_send+0x110>
    7318:	2e01      	cmp	r6, #1
    731a:	d045      	beq.n	73a8 <usb_keyboard_send+0x198>
    731c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	// Send boot keyboard interrupt packet(s)
	case 0:
		// USB Boot Mode debug output
		if ( Output_DebugMode )
    7320:	4b62      	ldr	r3, [pc, #392]	; (74ac <usb_keyboard_send+0x29c>)
    7322:	4f68      	ldr	r7, [pc, #416]	; (74c4 <usb_keyboard_send+0x2b4>)
    7324:	781b      	ldrb	r3, [r3, #0]
    7326:	b363      	cbz	r3, 7382 <usb_keyboard_send+0x172>
		{
			dbug_msg("Boot USB: ");
    7328:	4867      	ldr	r0, [pc, #412]	; (74c8 <usb_keyboard_send+0x2b8>)
    732a:	f000 fe21 	bl	7f70 <_print>
			printHex_op( USBKeys_Modifiers, 2 );
    732e:	2102      	movs	r1, #2
    7330:	7838      	ldrb	r0, [r7, #0]
    7332:	f000 fec0 	bl	80b6 <printHex_op>
			print(" ");
    7336:	4865      	ldr	r0, [pc, #404]	; (74cc <usb_keyboard_send+0x2bc>)
    7338:	f000 fe1a 	bl	7f70 <_print>
			printHex( 0 );
    733c:	2101      	movs	r1, #1
    733e:	4630      	mov	r0, r6
			print(" ");
			printHex_op( USBKeys_Keys[0], 2 );
    7340:	4e63      	ldr	r6, [pc, #396]	; (74d0 <usb_keyboard_send+0x2c0>)
		if ( Output_DebugMode )
		{
			dbug_msg("Boot USB: ");
			printHex_op( USBKeys_Modifiers, 2 );
			print(" ");
			printHex( 0 );
    7342:	f000 feb8 	bl	80b6 <printHex_op>
			print(" ");
    7346:	4861      	ldr	r0, [pc, #388]	; (74cc <usb_keyboard_send+0x2bc>)
    7348:	f000 fe12 	bl	7f70 <_print>
			printHex_op( USBKeys_Keys[0], 2 );
    734c:	2102      	movs	r1, #2
    734e:	7830      	ldrb	r0, [r6, #0]
    7350:	f000 feb1 	bl	80b6 <printHex_op>
			printHex_op( USBKeys_Keys[1], 2 );
    7354:	2102      	movs	r1, #2
    7356:	7870      	ldrb	r0, [r6, #1]
    7358:	f000 fead 	bl	80b6 <printHex_op>
			printHex_op( USBKeys_Keys[2], 2 );
    735c:	2102      	movs	r1, #2
    735e:	78b0      	ldrb	r0, [r6, #2]
    7360:	f000 fea9 	bl	80b6 <printHex_op>
			printHex_op( USBKeys_Keys[3], 2 );
    7364:	2102      	movs	r1, #2
    7366:	78f0      	ldrb	r0, [r6, #3]
    7368:	f000 fea5 	bl	80b6 <printHex_op>
			printHex_op( USBKeys_Keys[4], 2 );
    736c:	2102      	movs	r1, #2
    736e:	7930      	ldrb	r0, [r6, #4]
    7370:	f000 fea1 	bl	80b6 <printHex_op>
			printHex_op( USBKeys_Keys[5], 2 );
    7374:	7970      	ldrb	r0, [r6, #5]
    7376:	2102      	movs	r1, #2
    7378:	f000 fe9d 	bl	80b6 <printHex_op>
			print( NL );
    737c:	4855      	ldr	r0, [pc, #340]	; (74d4 <usb_keyboard_send+0x2c4>)
    737e:	f000 fdf7 	bl	7f70 <_print>
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
    7382:	783b      	ldrb	r3, [r7, #0]
    7384:	7223      	strb	r3, [r4, #8]
		*tx_buf++ = 0;
    7386:	2600      	movs	r6, #0
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    7388:	2206      	movs	r2, #6
    738a:	4951      	ldr	r1, [pc, #324]	; (74d0 <usb_keyboard_send+0x2c0>)
			print( NL );
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
		*tx_buf++ = 0;
    738c:	7266      	strb	r6, [r4, #9]
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    738e:	f104 000a 	add.w	r0, r4, #10
    7392:	f7fb f8f3 	bl	257c <memcpy>
		tx_packet->len = 8;
    7396:	2308      	movs	r3, #8
    7398:	8023      	strh	r3, [r4, #0]

		// Send USB Packet
		usb_tx( KEYBOARD_ENDPOINT, tx_packet );
    739a:	4621      	mov	r1, r4
    739c:	2001      	movs	r0, #1
    739e:	f7ff fa23 	bl	67e8 <usb_tx>
		USBKeys_Changed = USBKeyChangeState_None;
    73a2:	702e      	strb	r6, [r5, #0]
		break;
    73a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Send NKRO keyboard interrupts packet(s)
	case 1:
		if ( Output_DebugMode )
    73a8:	4b40      	ldr	r3, [pc, #256]	; (74ac <usb_keyboard_send+0x29c>)
    73aa:	781a      	ldrb	r2, [r3, #0]
    73ac:	461e      	mov	r6, r3
    73ae:	b112      	cbz	r2, 73b6 <usb_keyboard_send+0x1a6>
		{
			dbug_msg("NKRO USB: ");
    73b0:	4849      	ldr	r0, [pc, #292]	; (74d8 <usb_keyboard_send+0x2c8>)
    73b2:	f000 fddd 	bl	7f70 <_print>
		}

		// Standard HID Keyboard
		if ( USBKeys_Changed )
    73b6:	782b      	ldrb	r3, [r5, #0]
    73b8:	2b00      	cmp	r3, #0
    73ba:	d06b      	beq.n	7494 <usb_keyboard_send+0x284>
		{
			// USB NKRO Debug output
			if ( Output_DebugMode )
    73bc:	7833      	ldrb	r3, [r6, #0]
    73be:	f8df 8104 	ldr.w	r8, [pc, #260]	; 74c4 <usb_keyboard_send+0x2b4>
    73c2:	b3b3      	cbz	r3, 7432 <usb_keyboard_send+0x222>
			{
				printHex_op( USBKeys_Modifiers, 2 );
    73c4:	2102      	movs	r1, #2
    73c6:	f898 0000 	ldrb.w	r0, [r8]
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    73ca:	f8df 9104 	ldr.w	r9, [pc, #260]	; 74d0 <usb_keyboard_send+0x2c0>
		if ( USBKeys_Changed )
		{
			// USB NKRO Debug output
			if ( Output_DebugMode )
			{
				printHex_op( USBKeys_Modifiers, 2 );
    73ce:	f000 fe72 	bl	80b6 <printHex_op>
				print(" ");
    73d2:	483e      	ldr	r0, [pc, #248]	; (74cc <usb_keyboard_send+0x2bc>)
    73d4:	f000 fdcc 	bl	7f70 <_print>
    73d8:	2600      	movs	r6, #0
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    73da:	f819 0006 	ldrb.w	r0, [r9, r6]
    73de:	4f3c      	ldr	r7, [pc, #240]	; (74d0 <usb_keyboard_send+0x2c0>)
    73e0:	2102      	movs	r1, #2
    73e2:	3601      	adds	r6, #1
    73e4:	f000 fe67 	bl	80b6 <printHex_op>
			// USB NKRO Debug output
			if ( Output_DebugMode )
			{
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
    73e8:	2e06      	cmp	r6, #6
    73ea:	d1f6      	bne.n	73da <usb_keyboard_send+0x1ca>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    73ec:	4837      	ldr	r0, [pc, #220]	; (74cc <usb_keyboard_send+0x2bc>)
    73ee:	f000 fdbf 	bl	7f70 <_print>
    73f2:	1d7e      	adds	r6, r7, #5
    73f4:	f107 0913 	add.w	r9, r7, #19
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    73f8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    73fc:	2102      	movs	r1, #2
    73fe:	f000 fe5a 	bl	80b6 <printHex_op>
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				for ( uint8_t c = 6; c < 20; c++ )
    7402:	454e      	cmp	r6, r9
    7404:	d1f8      	bne.n	73f8 <usb_keyboard_send+0x1e8>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    7406:	4831      	ldr	r0, [pc, #196]	; (74cc <usb_keyboard_send+0x2bc>)
    7408:	4e34      	ldr	r6, [pc, #208]	; (74dc <usb_keyboard_send+0x2cc>)
    740a:	f000 fdb1 	bl	7f70 <_print>
				printHex_op( USBKeys_Keys[20], 2 );
    740e:	7d38      	ldrb	r0, [r7, #20]
    7410:	2102      	movs	r1, #2
    7412:	f000 fe50 	bl	80b6 <printHex_op>
				print(" ");
    7416:	482d      	ldr	r0, [pc, #180]	; (74cc <usb_keyboard_send+0x2bc>)
    7418:	f000 fdaa 	bl	7f70 <_print>
    741c:	1db7      	adds	r7, r6, #6
				for ( uint8_t c = 21; c < 27; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    741e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    7422:	2102      	movs	r1, #2
    7424:	f000 fe47 	bl	80b6 <printHex_op>
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				printHex_op( USBKeys_Keys[20], 2 );
				print(" ");
				for ( uint8_t c = 21; c < 27; c++ )
    7428:	42be      	cmp	r6, r7
    742a:	d1f8      	bne.n	741e <usb_keyboard_send+0x20e>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print( NL );
    742c:	4829      	ldr	r0, [pc, #164]	; (74d4 <usb_keyboard_send+0x2c4>)
    742e:	f000 fd9f 	bl	7f70 <_print>
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    7432:	4620      	mov	r0, r4

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
    7434:	f898 3000 	ldrb.w	r3, [r8]
    7438:	7263      	strb	r3, [r4, #9]
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    743a:	2701      	movs	r7, #1
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    743c:	2602      	movs	r6, #2
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    743e:	7227      	strb	r7, [r4, #8]
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    7440:	2206      	movs	r2, #6
    7442:	4923      	ldr	r1, [pc, #140]	; (74d0 <usb_keyboard_send+0x2c0>)
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    7444:	f820 6b0a 	strh.w	r6, [r0], #10

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    7448:	f7fb f898 	bl	257c <memcpy>
			tx_buf += 6;
			tx_packet->len += 6;
    744c:	8823      	ldrh	r3, [r4, #0]

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    744e:	4924      	ldr	r1, [pc, #144]	; (74e0 <usb_keyboard_send+0x2d0>)
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
			tx_buf += 6;
			tx_packet->len += 6;
    7450:	4620      	mov	r0, r4
    7452:	3306      	adds	r3, #6
    7454:	f820 3b10 	strh.w	r3, [r0], #16

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    7458:	220e      	movs	r2, #14
    745a:	f7fb f88f 	bl	257c <memcpy>
			tx_buf += 14;
			tx_packet->len += 14;
    745e:	8823      	ldrh	r3, [r4, #0]

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    7460:	491e      	ldr	r1, [pc, #120]	; (74dc <usb_keyboard_send+0x2cc>)
			tx_packet->len += 6;

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
			tx_buf += 14;
			tx_packet->len += 14;
    7462:	4620      	mov	r0, r4
    7464:	330e      	adds	r3, #14
    7466:	f820 3b1e 	strh.w	r3, [r0], #30

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    746a:	463a      	mov	r2, r7
    746c:	f7fb f886 	bl	257c <memcpy>
			tx_buf += 1;
			tx_packet->len += 1;
    7470:	8823      	ldrh	r3, [r4, #0]

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    7472:	491c      	ldr	r1, [pc, #112]	; (74e4 <usb_keyboard_send+0x2d4>)
			tx_packet->len += 14;

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
			tx_buf += 1;
			tx_packet->len += 1;
    7474:	4620      	mov	r0, r4
    7476:	443b      	add	r3, r7
    7478:	f820 3b1f 	strh.w	r3, [r0], #31

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    747c:	2206      	movs	r2, #6
    747e:	f7fb f87d 	bl	257c <memcpy>
			tx_packet->len += 6;
    7482:	8823      	ldrh	r3, [r4, #0]
    7484:	3306      	adds	r3, #6
    7486:	8023      	strh	r3, [r4, #0]

			// Send USB Packet
			usb_tx( NKRO_KEYBOARD_ENDPOINT, tx_packet );
    7488:	4621      	mov	r1, r4
    748a:	4630      	mov	r0, r6
    748c:	f7ff f9ac 	bl	67e8 <usb_tx>
			USBKeys_Changed = USBKeyChangeState_None; // Mark sent
    7490:	2300      	movs	r3, #0
    7492:	702b      	strb	r3, [r5, #0]
    7494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7498:	1fff8d08 	.word	0x1fff8d08
    749c:	0000be8a 	.word	0x0000be8a
    74a0:	1fff91db 	.word	0x1fff91db
    74a4:	1fff9344 	.word	0x1fff9344
    74a8:	0000beb7 	.word	0x0000beb7
    74ac:	1fff91ed 	.word	0x1fff91ed
    74b0:	1fffa5a0 	.word	0x1fffa5a0
    74b4:	0000befb 	.word	0x0000befb
    74b8:	0000bf04 	.word	0x0000bf04
    74bc:	1fffa5e0 	.word	0x1fffa5e0
    74c0:	0000bf09 	.word	0x0000bf09
    74c4:	1fff91da 	.word	0x1fff91da
    74c8:	0000bf13 	.word	0x0000bf13
    74cc:	00008952 	.word	0x00008952
    74d0:	1fffa5a4 	.word	0x1fffa5a4
    74d4:	0000c0ef 	.word	0x0000c0ef
    74d8:	0000bf31 	.word	0x0000bf31
    74dc:	1fffa5b8 	.word	0x1fffa5b8
    74e0:	1fffa5aa 	.word	0x1fffa5aa
    74e4:	1fffa5b9 	.word	0x1fffa5b9
    74e8:	1fff9342 	.word	0x1fff9342

000074ec <usb_malloc>:
// http://www.archivum.info/gnu.gcc.help/2006-08/00148/Re-GCC-Inline-Assembly.html
// http://gcc.gnu.org/ml/gcc/2012-06/msg00015.html
// __builtin_clz()

usb_packet_t *usb_malloc()
{
    74ec:	b510      	push	{r4, lr}
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    74ee:	b672      	cpsid	i
	avail = usb_buffer_available;
    74f0:	480b      	ldr	r0, [pc, #44]	; (7520 <usb_malloc+0x34>)
    74f2:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz( avail ); // clz = count leading zeros
    74f4:	fab2 f182 	clz	r1, r2
	if ( n >= NUM_USB_BUFFERS )
    74f8:	291d      	cmp	r1, #29
    74fa:	dd02      	ble.n	7502 <usb_malloc+0x16>
	{
		__enable_irq();
    74fc:	b662      	cpsie	i
		return NULL;
    74fe:	2000      	movs	r0, #0
    7500:	bd10      	pop	{r4, pc}
	}

	usb_buffer_available = avail & ~(0x80000000 >> n);
    7502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    7506:	40cb      	lsrs	r3, r1
    7508:	ea22 0203 	bic.w	r2, r2, r3
    750c:	6002      	str	r2, [r0, #0]
	__enable_irq();
    750e:	b662      	cpsie	i
	p = usb_buffer_memory + ( n * sizeof(usb_packet_t) );
    7510:	4c04      	ldr	r4, [pc, #16]	; (7524 <usb_malloc+0x38>)
    7512:	2348      	movs	r3, #72	; 0x48
    7514:	434b      	muls	r3, r1
    7516:	18e0      	adds	r0, r4, r3
	*(uint32_t *)p = 0;
    7518:	2200      	movs	r2, #0
    751a:	50e2      	str	r2, [r4, r3]
	*(uint32_t *)(p + 4) = 0;
    751c:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    751e:	bd10      	pop	{r4, pc}
    7520:	1fff90b8 	.word	0x1fff90b8
    7524:	1fff8160 	.word	0x1fff8160

00007528 <usb_free>:

void usb_free( usb_packet_t *p )
{
	unsigned int n, mask;

	n = ( (uint8_t *)p - usb_buffer_memory ) / sizeof(usb_packet_t);
    7528:	4b0c      	ldr	r3, [pc, #48]	; (755c <usb_free+0x34>)
    752a:	2248      	movs	r2, #72	; 0x48
    752c:	1ac3      	subs	r3, r0, r3
    752e:	fbb3 f3f2 	udiv	r3, r3, r2
	if ( n >= NUM_USB_BUFFERS )
    7532:	2b1d      	cmp	r3, #29
    7534:	d811      	bhi.n	755a <usb_free+0x32>
		return;

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if ( usb_rx_memory_needed && usb_configuration )
    7536:	4a0a      	ldr	r2, [pc, #40]	; (7560 <usb_free+0x38>)
    7538:	7812      	ldrb	r2, [r2, #0]
    753a:	b122      	cbz	r2, 7546 <usb_free+0x1e>
    753c:	4a09      	ldr	r2, [pc, #36]	; (7564 <usb_free+0x3c>)
    753e:	7812      	ldrb	r2, [r2, #0]
    7540:	b10a      	cbz	r2, 7546 <usb_free+0x1e>
	{
		usb_rx_memory( p );
    7542:	f7ff b8f3 	b.w	672c <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    7546:	b672      	cpsid	i
	usb_buffer_available |= mask;
    7548:	4907      	ldr	r1, [pc, #28]	; (7568 <usb_free+0x40>)
    754a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    754e:	fa22 f303 	lsr.w	r3, r2, r3
    7552:	680a      	ldr	r2, [r1, #0]
    7554:	431a      	orrs	r2, r3
    7556:	600a      	str	r2, [r1, #0]
	__enable_irq();
    7558:	b662      	cpsie	i
    755a:	4770      	bx	lr
    755c:	1fff8160 	.word	0x1fff8160
    7560:	1fff9339 	.word	0x1fff9339
    7564:	1fff9342 	.word	0x1fff9342
    7568:	1fff90b8 	.word	0x1fff90b8

0000756c <usb_mouse_send>:
// Process pending mouse commands
// XXX Missing mouse movement and wheels
//     Proper support will require KLL generation of the USB descriptors
//     Similar support will be required for joystick control
void usb_mouse_send()
{
    756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    756e:	4e21      	ldr	r6, [pc, #132]	; (75f4 <usb_mouse_send+0x88>)
    7570:	4f21      	ldr	r7, [pc, #132]	; (75f8 <usb_mouse_send+0x8c>)
// Process pending mouse commands
// XXX Missing mouse movement and wheels
//     Proper support will require KLL generation of the USB descriptors
//     Similar support will be required for joystick control
void usb_mouse_send()
{
    7572:	f643 4401 	movw	r4, #15361	; 0x3c01
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    7576:	7833      	ldrb	r3, [r6, #0]
    7578:	b923      	cbnz	r3, 7584 <usb_mouse_send+0x18>
		{
			erro_print("USB not configured...");
    757a:	4820      	ldr	r0, [pc, #128]	; (75fc <usb_mouse_send+0x90>)
        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
}
    757c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
		{
			erro_print("USB not configured...");
    7580:	f000 bcf6 	b.w	7f70 <_print>
			return;
		}

                // Attempt to acquire a USB packet for the mouse endpoint
                if ( usb_tx_packet_count( MOUSE_ENDPOINT ) < TX_PACKET_LIMIT )
    7584:	2009      	movs	r0, #9
    7586:	f7ff f8bf 	bl	6708 <usb_tx_packet_count>
    758a:	2802      	cmp	r0, #2
    758c:	4d1a      	ldr	r5, [pc, #104]	; (75f8 <usb_mouse_send+0x8c>)
    758e:	d902      	bls.n	7596 <usb_mouse_send+0x2a>
                        tx_packet = usb_malloc();
                        if ( tx_packet )
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    7590:	3c01      	subs	r4, #1
    7592:	d11b      	bne.n	75cc <usb_mouse_send+0x60>
    7594:	e01c      	b.n	75d0 <usb_mouse_send+0x64>
		}

                // Attempt to acquire a USB packet for the mouse endpoint
                if ( usb_tx_packet_count( MOUSE_ENDPOINT ) < TX_PACKET_LIMIT )
                {
                        tx_packet = usb_malloc();
    7596:	f7ff ffa9 	bl	74ec <usb_malloc>
                        if ( tx_packet )
    759a:	4601      	mov	r1, r0
    759c:	2800      	cmp	r0, #0
    759e:	d0f7      	beq.n	7590 <usb_mouse_send+0x24>
        transmit_previous_timeout = 0;

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
    75a0:	4f17      	ldr	r7, [pc, #92]	; (7600 <usb_mouse_send+0x94>)
        packet_data[1] = USBMouse_Relative_x;
    75a2:	4e18      	ldr	r6, [pc, #96]	; (7604 <usb_mouse_send+0x98>)
        transmit_previous_timeout = 0;

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
    75a4:	883b      	ldrh	r3, [r7, #0]
    75a6:	8103      	strh	r3, [r0, #8]
			return;
		}
		yield();
        }

        transmit_previous_timeout = 0;
    75a8:	2400      	movs	r4, #0
    75aa:	702c      	strb	r4, [r5, #0]
        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
        packet_data[1] = USBMouse_Relative_x;
        packet_data[2] = USBMouse_Relative_y;
    75ac:	4d16      	ldr	r5, [pc, #88]	; (7608 <usb_mouse_send+0x9c>)

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
        packet_data[1] = USBMouse_Relative_x;
    75ae:	8833      	ldrh	r3, [r6, #0]
    75b0:	8143      	strh	r3, [r0, #10]
        packet_data[2] = USBMouse_Relative_y;
    75b2:	882b      	ldrh	r3, [r5, #0]
    75b4:	8183      	strh	r3, [r0, #12]
        tx_packet->len = 6;
    75b6:	2306      	movs	r3, #6
    75b8:	8003      	strh	r3, [r0, #0]
        usb_tx( MOUSE_ENDPOINT, tx_packet );
    75ba:	2009      	movs	r0, #9
    75bc:	f7ff f914 	bl	67e8 <usb_tx>

        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
    75c0:	4b12      	ldr	r3, [pc, #72]	; (760c <usb_mouse_send+0xa0>)
        packet_data[2] = USBMouse_Relative_y;
        tx_packet->len = 6;
        usb_tx( MOUSE_ENDPOINT, tx_packet );

        // Clear status and state
        USBMouse_Buttons = 0;
    75c2:	803c      	strh	r4, [r7, #0]
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
    75c4:	701c      	strb	r4, [r3, #0]
        tx_packet->len = 6;
        usb_tx( MOUSE_ENDPOINT, tx_packet );

        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
    75c6:	8034      	strh	r4, [r6, #0]
        USBMouse_Relative_y = 0;
    75c8:	802c      	strh	r4, [r5, #0]
    75ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        tx_packet = usb_malloc();
                        if ( tx_packet )
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    75cc:	783b      	ldrb	r3, [r7, #0]
    75ce:	b173      	cbz	r3, 75ee <usb_mouse_send+0x82>
		{
			transmit_previous_timeout = 1;
    75d0:	2301      	movs	r3, #1
			warn_print("USB Transmit Timeout...");
    75d2:	480f      	ldr	r0, [pc, #60]	; (7610 <usb_mouse_send+0xa4>)
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
    75d4:	702b      	strb	r3, [r5, #0]
			warn_print("USB Transmit Timeout...");
    75d6:	f000 fccb 	bl	7f70 <_print>

                        // Clear status and state
                        USBMouse_Buttons = 0;
    75da:	4a09      	ldr	r2, [pc, #36]	; (7600 <usb_mouse_send+0x94>)
    75dc:	2300      	movs	r3, #0
    75de:	8013      	strh	r3, [r2, #0]
                        USBMouse_Relative_x = 0;
    75e0:	4a08      	ldr	r2, [pc, #32]	; (7604 <usb_mouse_send+0x98>)
    75e2:	8013      	strh	r3, [r2, #0]
                        USBMouse_Relative_y = 0;
    75e4:	4a08      	ldr	r2, [pc, #32]	; (7608 <usb_mouse_send+0x9c>)
    75e6:	8013      	strh	r3, [r2, #0]
                        USBMouse_Changed = 0;
    75e8:	4a08      	ldr	r2, [pc, #32]	; (760c <usb_mouse_send+0xa0>)
    75ea:	7013      	strb	r3, [r2, #0]
			return;
    75ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		yield();
    75ee:	f7fa ffd1 	bl	2594 <yield>
        }
    75f2:	e7c0      	b.n	7576 <usb_mouse_send+0xa>
    75f4:	1fff9342 	.word	0x1fff9342
    75f8:	1fff9345 	.word	0x1fff9345
    75fc:	0000be8a 	.word	0x0000be8a
    7600:	1fff91d8 	.word	0x1fff91d8
    7604:	1fff91e2 	.word	0x1fff91e2
    7608:	1fff91e4 	.word	0x1fff91e4
    760c:	1fff91de 	.word	0x1fff91de
    7610:	0000bf4f 	.word	0x0000bf4f

00007614 <usb_serial_getchar>:

// ----- Functions -----

// get the next character, or -1 if nothing received
int usb_serial_getchar()
{
    7614:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if ( !rx_packet )
    7616:	4c10      	ldr	r4, [pc, #64]	; (7658 <usb_serial_getchar+0x44>)
    7618:	6823      	ldr	r3, [r4, #0]
    761a:	b16b      	cbz	r3, 7638 <usb_serial_getchar+0x24>
			return -1;
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
		if ( !rx_packet )
			return -1;
	}
	i = rx_packet->index;
    761c:	6820      	ldr	r0, [r4, #0]
    761e:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
    7620:	1c5a      	adds	r2, r3, #1
    7622:	4403      	add	r3, r0
    7624:	7a1c      	ldrb	r4, [r3, #8]
	if ( i >= rx_packet->len )
    7626:	8803      	ldrh	r3, [r0, #0]
    7628:	429a      	cmp	r2, r3
    762a:	d312      	bcc.n	7652 <usb_serial_getchar+0x3e>
	{
		usb_free( rx_packet );
    762c:	f7ff ff7c 	bl	7528 <usb_free>
		rx_packet = NULL;
    7630:	4b09      	ldr	r3, [pc, #36]	; (7658 <usb_serial_getchar+0x44>)
    7632:	2200      	movs	r2, #0
    7634:	601a      	str	r2, [r3, #0]
    7636:	e00d      	b.n	7654 <usb_serial_getchar+0x40>
	unsigned int i;
	int c;

	if ( !rx_packet )
	{
		if ( !usb_configuration )
    7638:	4b08      	ldr	r3, [pc, #32]	; (765c <usb_serial_getchar+0x48>)
    763a:	781b      	ldrb	r3, [r3, #0]
    763c:	b913      	cbnz	r3, 7644 <usb_serial_getchar+0x30>
			return -1;
    763e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7642:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
    7644:	2005      	movs	r0, #5
    7646:	f7ff f843 	bl	66d0 <usb_rx>
    764a:	6020      	str	r0, [r4, #0]
		if ( !rx_packet )
    764c:	2800      	cmp	r0, #0
    764e:	d1e5      	bne.n	761c <usb_serial_getchar+0x8>
    7650:	e7f5      	b.n	763e <usb_serial_getchar+0x2a>
		usb_free( rx_packet );
		rx_packet = NULL;
	}
	else
	{
		rx_packet->index = i;
    7652:	8042      	strh	r2, [r0, #2]
	}
	return c;
    7654:	4620      	mov	r0, r4
}
    7656:	bd10      	pop	{r4, pc}
    7658:	1fff9350 	.word	0x1fff9350
    765c:	1fff9342 	.word	0x1fff9342

00007660 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	return usb_rx_byte_count_data[ endpoint ];
    7660:	4b04      	ldr	r3, [pc, #16]	; (7674 <usb_serial_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_serial_available()
{
	int count = usb_rx_byte_count( CDC_RX_ENDPOINT );
    7662:	8918      	ldrh	r0, [r3, #8]
	if ( rx_packet )
    7664:	4b04      	ldr	r3, [pc, #16]	; (7678 <usb_serial_available+0x18>)
    7666:	681a      	ldr	r2, [r3, #0]
    7668:	b11a      	cbz	r2, 7672 <usb_serial_available+0x12>
		count += rx_packet->len - rx_packet->index;
    766a:	8813      	ldrh	r3, [r2, #0]
    766c:	8852      	ldrh	r2, [r2, #2]
    766e:	1a9b      	subs	r3, r3, r2
    7670:	4418      	add	r0, r3
	return count;
}
    7672:	4770      	bx	lr
    7674:	1fffa5e2 	.word	0x1fffa5e2
    7678:	1fff9350 	.word	0x1fff9350

0000767c <usb_serial_write>:
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    767c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    7680:	4d30      	ldr	r5, [pc, #192]	; (7744 <usb_serial_write+0xc8>)
	while ( size > 0 )
	{
		if ( !tx_packet )
    7682:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 7754 <usb_serial_write+0xd8>
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    7686:	2301      	movs	r3, #1
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    7688:	4681      	mov	r9, r0
    768a:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    768c:	702b      	strb	r3, [r5, #0]
    768e:	4646      	mov	r6, r8
	while ( size > 0 )
    7690:	2c00      	cmp	r4, #0
    7692:	d052      	beq.n	773a <usb_serial_write+0xbe>
	{
		if ( !tx_packet )
    7694:	f8d8 3000 	ldr.w	r3, [r8]
    7698:	bb43      	cbnz	r3, 76ec <usb_serial_write+0x70>
					tx_noautoflush = 0;
					return -1;
				}
				if ( usb_tx_packet_count( CDC_TX_ENDPOINT ) < TX_PACKET_LIMIT )
				{
					tx_noautoflush = 1;
    769a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7744 <usb_serial_write+0xc8>
    769e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 774c <usb_serial_write+0xd0>
    76a2:	f648 4701 	movw	r7, #35841	; 0x8c01
		if ( !tx_packet )
		{
			wait_count = 0;
			while ( 1 )
			{
				if ( !usb_configuration )
    76a6:	4b28      	ldr	r3, [pc, #160]	; (7748 <usb_serial_write+0xcc>)
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    76ae:	b90b      	cbnz	r3, 76b4 <usb_serial_write+0x38>
				{
					tx_noautoflush = 0;
    76b0:	7029      	strb	r1, [r5, #0]
    76b2:	e014      	b.n	76de <usb_serial_write+0x62>
					return -1;
				}
				if ( usb_tx_packet_count( CDC_TX_ENDPOINT ) < TX_PACKET_LIMIT )
    76b4:	2006      	movs	r0, #6
    76b6:	f7ff f827 	bl	6708 <usb_tx_packet_count>
    76ba:	2807      	cmp	r0, #7
    76bc:	d807      	bhi.n	76ce <usb_serial_write+0x52>
				{
					tx_noautoflush = 1;
    76be:	2301      	movs	r3, #1
    76c0:	702b      	strb	r3, [r5, #0]
					tx_packet = usb_malloc();
    76c2:	f7ff ff13 	bl	74ec <usb_malloc>
    76c6:	6030      	str	r0, [r6, #0]
					if ( tx_packet )
    76c8:	b980      	cbnz	r0, 76ec <usb_serial_write+0x70>
						break;
					tx_noautoflush = 0;
    76ca:	f88a 0000 	strb.w	r0, [sl]
				}
				if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    76ce:	3f01      	subs	r7, #1
    76d0:	d002      	beq.n	76d8 <usb_serial_write+0x5c>
    76d2:	f89b 3000 	ldrb.w	r3, [fp]
    76d6:	b133      	cbz	r3, 76e6 <usb_serial_write+0x6a>
				{
					transmit_previous_timeout = 1;
    76d8:	4b1c      	ldr	r3, [pc, #112]	; (774c <usb_serial_write+0xd0>)
    76da:	2201      	movs	r2, #1
    76dc:	701a      	strb	r2, [r3, #0]
					return -1;
    76de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    76e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				}
				yield();
    76e6:	f7fa ff55 	bl	2594 <yield>
			}
    76ea:	e7dc      	b.n	76a6 <usb_serial_write+0x2a>
		}
		transmit_previous_timeout = 0;
    76ec:	4b17      	ldr	r3, [pc, #92]	; (774c <usb_serial_write+0xd0>)
    76ee:	2100      	movs	r1, #0
    76f0:	7019      	strb	r1, [r3, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    76f2:	6831      	ldr	r1, [r6, #0]
    76f4:	884b      	ldrh	r3, [r1, #2]
    76f6:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
    76fa:	42a0      	cmp	r0, r4
    76fc:	bf28      	it	cs
    76fe:	4620      	movcs	r0, r4
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7700:	181f      	adds	r7, r3, r0
    7702:	440b      	add	r3, r1
    7704:	804f      	strh	r7, [r1, #2]
		size -= len;
    7706:	1a24      	subs	r4, r4, r0
    7708:	3307      	adds	r3, #7
    770a:	eb09 0700 	add.w	r7, r9, r0
		while ( len-- > 0 )
    770e:	45b9      	cmp	r9, r7
    7710:	d004      	beq.n	771c <usb_serial_write+0xa0>
			*dest++ = *src++;
    7712:	f819 0b01 	ldrb.w	r0, [r9], #1
    7716:	f803 0f01 	strb.w	r0, [r3, #1]!
    771a:	e7f8      	b.n	770e <usb_serial_write+0x92>
		if ( tx_packet->index >= CDC_TX_SIZE )
    771c:	884b      	ldrh	r3, [r1, #2]
    771e:	2b3f      	cmp	r3, #63	; 0x3f
    7720:	d906      	bls.n	7730 <usb_serial_write+0xb4>
		{
			tx_packet->len = CDC_TX_SIZE;
    7722:	2340      	movs	r3, #64	; 0x40
    7724:	800b      	strh	r3, [r1, #0]
			usb_tx( CDC_TX_ENDPOINT, tx_packet );
    7726:	2006      	movs	r0, #6
    7728:	f7ff f85e 	bl	67e8 <usb_tx>
			tx_packet = NULL;
    772c:	2300      	movs	r3, #0
    772e:	6033      	str	r3, [r6, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    7730:	4b07      	ldr	r3, [pc, #28]	; (7750 <usb_serial_write+0xd4>)
    7732:	2205      	movs	r2, #5
    7734:	701a      	strb	r2, [r3, #0]
    7736:	46b9      	mov	r9, r7
    7738:	e7aa      	b.n	7690 <usb_serial_write+0x14>
	}
	tx_noautoflush = 0;
    773a:	702c      	strb	r4, [r5, #0]
	return 0;
    773c:	4620      	mov	r0, r4
}
    773e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7742:	bf00      	nop
    7744:	1fff9347 	.word	0x1fff9347
    7748:	1fff9342 	.word	0x1fff9342
    774c:	1fff934c 	.word	0x1fff934c
    7750:	1fff9346 	.word	0x1fff9346
    7754:	1fff9348 	.word	0x1fff9348

00007758 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback()
{
    7758:	b538      	push	{r3, r4, r5, lr}
	if ( tx_noautoflush )
    775a:	4b0e      	ldr	r3, [pc, #56]	; (7794 <usb_serial_flush_callback+0x3c>)
    775c:	781b      	ldrb	r3, [r3, #0]
    775e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    7762:	b9ab      	cbnz	r3, 7790 <usb_serial_flush_callback+0x38>
		return;
	if ( tx_packet )
    7764:	4c0c      	ldr	r4, [pc, #48]	; (7798 <usb_serial_flush_callback+0x40>)
    7766:	6821      	ldr	r1, [r4, #0]
    7768:	b131      	cbz	r1, 7778 <usb_serial_flush_callback+0x20>
	{
		tx_packet->len = tx_packet->index;
    776a:	884b      	ldrh	r3, [r1, #2]
    776c:	800b      	strh	r3, [r1, #0]
		usb_tx( CDC_TX_ENDPOINT, tx_packet );
    776e:	2006      	movs	r0, #6
    7770:	f7ff f83a 	bl	67e8 <usb_tx>
		tx_packet = NULL;
    7774:	6025      	str	r5, [r4, #0]
    7776:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    7778:	f7ff feb8 	bl	74ec <usb_malloc>
		if ( tx )
    777c:	4601      	mov	r1, r0
    777e:	b120      	cbz	r0, 778a <usb_serial_flush_callback+0x32>
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    7780:	2006      	movs	r0, #6
		else
		{
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    7782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if ( tx )
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    7786:	f7ff b82f 	b.w	67e8 <usb_tx>
		}
		else
		{
			usb_cdc_transmit_flush_timer = 1;
    778a:	4b04      	ldr	r3, [pc, #16]	; (779c <usb_serial_flush_callback+0x44>)
    778c:	2201      	movs	r2, #1
    778e:	701a      	strb	r2, [r3, #0]
    7790:	bd38      	pop	{r3, r4, r5, pc}
    7792:	bf00      	nop
    7794:	1fff9347 	.word	0x1fff9347
    7798:	1fff9348 	.word	0x1fff9348
    779c:	1fff9346 	.word	0x1fff9346

000077a0 <cliFunc_clear>:

// ----- CLI Command Functions -----

void cliFunc_clear( char* args)
{
	print("\033[2J\033[H\r"); // Erases the whole screen
    77a0:	4801      	ldr	r0, [pc, #4]	; (77a8 <cliFunc_clear+0x8>)
    77a2:	f000 bbe5 	b.w	7f70 <_print>
    77a6:	bf00      	nop
    77a8:	0000c075 	.word	0x0000c075

000077ac <cliFunc_reload>:
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
	errorLED( CLILEDState ); // Enable/Disable error LED
}

void cliFunc_reload( char* args )
{
    77ac:	b508      	push	{r3, lr}
	if ( flashModeEnabled_define == 0 )
	{
		print( NL );
    77ae:	4805      	ldr	r0, [pc, #20]	; (77c4 <cliFunc_reload+0x18>)
    77b0:	f000 fbde 	bl	7f70 <_print>
		warn_print("flashModeEnabled not set, cancelling firmware reload...");
    77b4:	4804      	ldr	r0, [pc, #16]	; (77c8 <cliFunc_reload+0x1c>)
    77b6:	f000 fbdb 	bl	7f70 <_print>
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    77ba:	4804      	ldr	r0, [pc, #16]	; (77cc <cliFunc_reload+0x20>)
		return;
	}

	// Request to output module to be set into firmware reload mode
	Output_firmwareReload();
}
    77bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if ( flashModeEnabled_define == 0 )
	{
		print( NL );
		warn_print("flashModeEnabled not set, cancelling firmware reload...");
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    77c0:	f000 bbd6 	b.w	7f70 <_print>
    77c4:	0000c0ef 	.word	0x0000c0ef
    77c8:	0000adbb 	.word	0x0000adbb
    77cc:	0000ae0a 	.word	0x0000ae0a

000077d0 <cliFunc_reset>:
	Output_firmwareReload();
}

void cliFunc_reset( char* args )
{
	print("\033c"); // Resets the terminal
    77d0:	4801      	ldr	r0, [pc, #4]	; (77d8 <cliFunc_reset+0x8>)
    77d2:	f000 bbcd 	b.w	7f70 <_print>
    77d6:	bf00      	nop
    77d8:	0000c07e 	.word	0x0000c07e

000077dc <cliFunc_help>:
		CLIHexDebugMode = 1;
	}
}

void cliFunc_help( char* args )
{
    77dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		print( NL "\033[1;32m" );
		_print( CLIDictNames[dict] ); // This print is requride by AVR (flash)
		print( "\033[0m" NL );

		// Parse each cmd/description until a null command entry is found
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    77e0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 7888 <cliFunc_help+0xac>

void cliFunc_help( char* args )
{
	// Scan array of dictionaries and print every description
	//  (no alphabetical here, too much processing/memory to sort...)
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    77e4:	2700      	movs	r7, #0
    77e6:	46c2      	mov	sl, r8
    77e8:	4b1e      	ldr	r3, [pc, #120]	; (7864 <cliFunc_help+0x88>)
    77ea:	781b      	ldrb	r3, [r3, #0]
    77ec:	b2fd      	uxtb	r5, r7
    77ee:	42ab      	cmp	r3, r5
    77f0:	d936      	bls.n	7860 <cliFunc_help+0x84>
	{
		// Print the name of each dictionary as a title
		print( NL "\033[1;32m" );
    77f2:	481d      	ldr	r0, [pc, #116]	; (7868 <cliFunc_help+0x8c>)
    77f4:	f000 fbbc 	bl	7f70 <_print>
		_print( CLIDictNames[dict] ); // This print is requride by AVR (flash)
    77f8:	4b1c      	ldr	r3, [pc, #112]	; (786c <cliFunc_help+0x90>)
    77fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    77fe:	f000 fbb7 	bl	7f70 <_print>
		print( "\033[0m" NL );
    7802:	481b      	ldr	r0, [pc, #108]	; (7870 <cliFunc_help+0x94>)
    7804:	f000 fbb4 	bl	7f70 <_print>

		// Parse each cmd/description until a null command entry is found
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    7808:	f04f 0900 	mov.w	r9, #0
    780c:	fa5f f389 	uxtb.w	r3, r9
    7810:	260c      	movs	r6, #12
    7812:	435e      	muls	r6, r3
    7814:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    7818:	5999      	ldr	r1, [r3, r6]
    781a:	b1f9      	cbz	r1, 785c <cliFunc_help+0x80>
		{
			dPrintStrs(" \033[35m", CLIDict[dict][cmd].name, "\033[0m");
    781c:	4b15      	ldr	r3, [pc, #84]	; (7874 <cliFunc_help+0x98>)
    781e:	4a16      	ldr	r2, [pc, #88]	; (7878 <cliFunc_help+0x9c>)
    7820:	4816      	ldr	r0, [pc, #88]	; (787c <cliFunc_help+0xa0>)
    7822:	f000 fb8b 	bl	7f3c <printstrs>

			// Determine number of spaces to tab by the length of the command and TabAlign
			uint8_t padLength = CLIEntryTabAlign - lenStr( (char*)CLIDict[dict][cmd].name );
    7826:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    782a:	5998      	ldr	r0, [r3, r6]
    782c:	f000 fba2 	bl	7f74 <lenStr>
    7830:	f1c0 000d 	rsb	r0, r0, #13
    7834:	b2c4      	uxtb	r4, r0
			while ( padLength-- > 0 )
    7836:	b12c      	cbz	r4, 7844 <cliFunc_help+0x68>
				print(" ");
    7838:	4811      	ldr	r0, [pc, #68]	; (7880 <cliFunc_help+0xa4>)
    783a:	3c01      	subs	r4, #1
    783c:	f000 fb98 	bl	7f70 <_print>
    7840:	b2e4      	uxtb	r4, r4
    7842:	e7f8      	b.n	7836 <cliFunc_help+0x5a>

			_print( CLIDict[dict][cmd].description ); // This print is required by AVR (flash)
    7844:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
    7848:	441e      	add	r6, r3
    784a:	f109 0901 	add.w	r9, r9, #1
    784e:	6870      	ldr	r0, [r6, #4]
    7850:	f000 fb8e 	bl	7f70 <_print>
			print( NL );
    7854:	480b      	ldr	r0, [pc, #44]	; (7884 <cliFunc_help+0xa8>)
    7856:	f000 fb8b 	bl	7f70 <_print>
    785a:	e7d7      	b.n	780c <cliFunc_help+0x30>
    785c:	3701      	adds	r7, #1
    785e:	e7c3      	b.n	77e8 <cliFunc_help+0xc>
		}
	}
}
    7860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7864:	1fff935b 	.word	0x1fff935b
    7868:	0000c081 	.word	0x0000c081
    786c:	1fff97d8 	.word	0x1fff97d8
    7870:	0000c08b 	.word	0x0000c08b
    7874:	0000bf7e 	.word	0x0000bf7e
    7878:	0000af19 	.word	0x0000af19
    787c:	0000c092 	.word	0x0000c092
    7880:	00008952 	.word	0x00008952
    7884:	0000c0ef 	.word	0x0000c0ef
    7888:	1fff97ac 	.word	0x1fff97ac

0000788c <cliFunc_led>:

void cliFunc_led( char* args )
{
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
    788c:	4b03      	ldr	r3, [pc, #12]	; (789c <cliFunc_led+0x10>)
    788e:	7818      	ldrb	r0, [r3, #0]
    7890:	f080 0002 	eor.w	r0, r0, #2
    7894:	7018      	strb	r0, [r3, #0]
	errorLED( CLILEDState ); // Enable/Disable error LED
    7896:	f000 bb43 	b.w	7f20 <errorLED>
    789a:	bf00      	nop
    789c:	1fff935a 	.word	0x1fff935a

000078a0 <cliFunc_restart>:
}

void cliFunc_restart( char* args )
{
	// Trigger an overall software reset
	Output_softReset();
    78a0:	f7fe be92 	b.w	65c8 <Output_softReset>

000078a4 <cliFunc_version>:
}

void cliFunc_version( char* args )
{
    78a4:	b508      	push	{r3, lr}
	print( NL );
    78a6:	4821      	ldr	r0, [pc, #132]	; (792c <cliFunc_version+0x88>)
    78a8:	f000 fb62 	bl	7f70 <_print>
	print( " \033[1mRevision:\033[0m      " CLI_Revision       NL );
    78ac:	4820      	ldr	r0, [pc, #128]	; (7930 <cliFunc_version+0x8c>)
    78ae:	f000 fb5f 	bl	7f70 <_print>
	print( " \033[1mBranch:\033[0m        " CLI_Branch         NL );
    78b2:	4820      	ldr	r0, [pc, #128]	; (7934 <cliFunc_version+0x90>)
    78b4:	f000 fb5c 	bl	7f70 <_print>
	print( " \033[1mTree Status:\033[0m   " CLI_ModifiedStatus CLI_ModifiedFiles NL );
    78b8:	481f      	ldr	r0, [pc, #124]	; (7938 <cliFunc_version+0x94>)
    78ba:	f000 fb59 	bl	7f70 <_print>
	print( " \033[1mRepo Origin:\033[0m   " CLI_RepoOrigin     NL );
    78be:	481f      	ldr	r0, [pc, #124]	; (793c <cliFunc_version+0x98>)
    78c0:	f000 fb56 	bl	7f70 <_print>
	print( " \033[1mCommit Date:\033[0m   " CLI_CommitDate     NL );
    78c4:	481e      	ldr	r0, [pc, #120]	; (7940 <cliFunc_version+0x9c>)
    78c6:	f000 fb53 	bl	7f70 <_print>
	print( " \033[1mCommit Author:\033[0m " CLI_CommitAuthor   NL );
    78ca:	481e      	ldr	r0, [pc, #120]	; (7944 <cliFunc_version+0xa0>)
    78cc:	f000 fb50 	bl	7f70 <_print>
	print( " \033[1mBuild Date:\033[0m    " CLI_BuildDate      NL );
    78d0:	481d      	ldr	r0, [pc, #116]	; (7948 <cliFunc_version+0xa4>)
    78d2:	f000 fb4d 	bl	7f70 <_print>
	print( " \033[1mBuild OS:\033[0m      " CLI_BuildOS        NL );
    78d6:	481d      	ldr	r0, [pc, #116]	; (794c <cliFunc_version+0xa8>)
    78d8:	f000 fb4a 	bl	7f70 <_print>
	print( " \033[1mArchitecture:\033[0m  " CLI_Arch           NL );
    78dc:	481c      	ldr	r0, [pc, #112]	; (7950 <cliFunc_version+0xac>)
    78de:	f000 fb47 	bl	7f70 <_print>
	print( " \033[1mChip:\033[0m          " CLI_Chip           NL );
    78e2:	481c      	ldr	r0, [pc, #112]	; (7954 <cliFunc_version+0xb0>)
    78e4:	f000 fb44 	bl	7f70 <_print>
	print( " \033[1mCPU:\033[0m           " CLI_CPU            NL );
    78e8:	481b      	ldr	r0, [pc, #108]	; (7958 <cliFunc_version+0xb4>)
    78ea:	f000 fb41 	bl	7f70 <_print>
	print( " \033[1mDevice:\033[0m        " CLI_Device         NL );
    78ee:	481b      	ldr	r0, [pc, #108]	; (795c <cliFunc_version+0xb8>)
    78f0:	f000 fb3e 	bl	7f70 <_print>
	print( " \033[1mModules:\033[0m       " CLI_Modules        NL );
    78f4:	481a      	ldr	r0, [pc, #104]	; (7960 <cliFunc_version+0xbc>)
    78f6:	f000 fb3b 	bl	7f70 <_print>
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
    78fa:	481a      	ldr	r0, [pc, #104]	; (7964 <cliFunc_version+0xc0>)
    78fc:	f000 fb38 	bl	7f70 <_print>
	printHex32_op( SIM_UIDH, 8 );
    7900:	4b19      	ldr	r3, [pc, #100]	; (7968 <cliFunc_version+0xc4>)
    7902:	2108      	movs	r1, #8
    7904:	6818      	ldr	r0, [r3, #0]
    7906:	f000 fc12 	bl	812e <printHex32_op>
	printHex32_op( SIM_UIDMH, 8 );
    790a:	4b18      	ldr	r3, [pc, #96]	; (796c <cliFunc_version+0xc8>)
    790c:	2108      	movs	r1, #8
    790e:	6818      	ldr	r0, [r3, #0]
    7910:	f000 fc0d 	bl	812e <printHex32_op>
	printHex32_op( SIM_UIDML, 8 );
    7914:	4b16      	ldr	r3, [pc, #88]	; (7970 <cliFunc_version+0xcc>)
    7916:	2108      	movs	r1, #8
    7918:	6818      	ldr	r0, [r3, #0]
    791a:	f000 fc08 	bl	812e <printHex32_op>
	printHex32_op( SIM_UIDL, 8 );
    791e:	4b15      	ldr	r3, [pc, #84]	; (7974 <cliFunc_version+0xd0>)
    7920:	2108      	movs	r1, #8
    7922:	6818      	ldr	r0, [r3, #0]
#elif defined(_at90usb162_) || defined(_atmega32u4_) || defined(_at90usb646_) || defined(_at90usb1286_)
#else
#error "No unique id defined."
#endif
}
    7924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
	printHex32_op( SIM_UIDH, 8 );
	printHex32_op( SIM_UIDMH, 8 );
	printHex32_op( SIM_UIDML, 8 );
	printHex32_op( SIM_UIDL, 8 );
    7928:	f000 bc01 	b.w	812e <printHex32_op>
    792c:	0000c0ef 	.word	0x0000c0ef
    7930:	0000c099 	.word	0x0000c099
    7934:	0000c0b4 	.word	0x0000c0b4
    7938:	0000c0cf 	.word	0x0000c0cf
    793c:	0000c0f2 	.word	0x0000c0f2
    7940:	0000c10d 	.word	0x0000c10d
    7944:	0000c128 	.word	0x0000c128
    7948:	0000c143 	.word	0x0000c143
    794c:	0000c177 	.word	0x0000c177
    7950:	0000c199 	.word	0x0000c199
    7954:	0000c1b7 	.word	0x0000c1b7
    7958:	0000c1df 	.word	0x0000c1df
    795c:	0000c203 	.word	0x0000c203
    7960:	0000c226 	.word	0x0000c226
    7964:	0000c285 	.word	0x0000c285
    7968:	40048054 	.word	0x40048054
    796c:	40048058 	.word	0x40048058
    7970:	4004805c 	.word	0x4004805c
    7974:	40048060 	.word	0x40048060

00007978 <cliFunc_cliDebug>:
{
	print("\033[2J\033[H\r"); // Erases the whole screen
}

void cliFunc_cliDebug( char* args )
{
    7978:	b510      	push	{r4, lr}
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    797a:	4c09      	ldr	r4, [pc, #36]	; (79a0 <cliFunc_cliDebug+0x28>)
	{
		print( NL );
    797c:	4809      	ldr	r0, [pc, #36]	; (79a4 <cliFunc_cliDebug+0x2c>)
}

void cliFunc_cliDebug( char* args )
{
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    797e:	7823      	ldrb	r3, [r4, #0]
    7980:	b133      	cbz	r3, 7990 <cliFunc_cliDebug+0x18>
	{
		print( NL );
    7982:	f000 faf5 	bl	7f70 <_print>
		info_print("Hex debug mode disabled...");
    7986:	4808      	ldr	r0, [pc, #32]	; (79a8 <cliFunc_cliDebug+0x30>)
    7988:	f000 faf2 	bl	7f70 <_print>
		CLIHexDebugMode = 0;
    798c:	2300      	movs	r3, #0
    798e:	e005      	b.n	799c <cliFunc_cliDebug+0x24>
	}
	else
	{
		print( NL );
    7990:	f000 faee 	bl	7f70 <_print>
		info_print("Hex debug mode enabled...");
    7994:	4805      	ldr	r0, [pc, #20]	; (79ac <cliFunc_cliDebug+0x34>)
    7996:	f000 faeb 	bl	7f70 <_print>
		CLIHexDebugMode = 1;
    799a:	2301      	movs	r3, #1
    799c:	7023      	strb	r3, [r4, #0]
    799e:	bd10      	pop	{r4, pc}
    79a0:	1fff9358 	.word	0x1fff9358
    79a4:	0000c0ef 	.word	0x0000c0ef
    79a8:	0000c29e 	.word	0x0000c29e
    79ac:	0000c2cd 	.word	0x0000c2cd

000079b0 <CLI_argumentIsolation>:
// Takes a string, returns two pointers
//  One to the first non-space character
//  The second to the next argument (first NULL if there isn't an argument). delimited by a space
//  Places a NULL at the first space after the first argument
void CLI_argumentIsolation( char* string, char** first, char** second )
{
    79b0:	b530      	push	{r4, r5, lr}
	// Mark out the first argument
	// This is done by finding the first space after a list of non-spaces and setting it NULL
	char* cmdPtr = string - 1;
    79b2:	3801      	subs	r0, #1
	while ( *++cmdPtr == ' ' ); // Skips leading spaces, and points to first character of cmd
    79b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    79b8:	2b20      	cmp	r3, #32
    79ba:	d0fb      	beq.n	79b4 <CLI_argumentIsolation+0x4>
    79bc:	1c45      	adds	r5, r0, #1
    79be:	462b      	mov	r3, r5
    79c0:	3501      	adds	r5, #1

	// Locates first space delimiter
	char* argPtr = cmdPtr + 1;
	while ( *argPtr != ' ' && *argPtr != '\0' )
    79c2:	781c      	ldrb	r4, [r3, #0]
    79c4:	f014 04df 	ands.w	r4, r4, #223	; 0xdf
    79c8:	d1f9      	bne.n	79be <CLI_argumentIsolation+0xe>
		argPtr++;

	// Point to the first character of args or a NULL (no args) and set the space delimiter as a NULL
	(++argPtr)[-1] = '\0';
    79ca:	f803 4b01 	strb.w	r4, [r3], #1

	// Set return variables
	*first = cmdPtr;
    79ce:	6008      	str	r0, [r1, #0]
	*second = argPtr;
    79d0:	6013      	str	r3, [r2, #0]
    79d2:	bd30      	pop	{r4, r5, pc}

000079d4 <CLI_commandLookup>:
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    79d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    79d8:	4b24      	ldr	r3, [pc, #144]	; (7a6c <CLI_commandLookup+0x98>)
    79da:	781b      	ldrb	r3, [r3, #0]
	*second = argPtr;
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    79dc:	b089      	sub	sp, #36	; 0x24
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    79de:	2b00      	cmp	r3, #0
    79e0:	d041      	beq.n	7a66 <CLI_commandLookup+0x92>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    79e2:	4d23      	ldr	r5, [pc, #140]	; (7a70 <CLI_commandLookup+0x9c>)
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    79e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 7a9c <CLI_commandLookup+0xc8>
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    79e8:	f8df a088 	ldr.w	sl, [pc, #136]	; 7a74 <CLI_commandLookup+0xa0>
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    79ec:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    79ee:	aa07      	add	r2, sp, #28
    79f0:	a906      	add	r1, sp, #24
    79f2:	4628      	mov	r0, r5
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    79f4:	54ec      	strb	r4, [r5, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    79f6:	f7ff ffdb 	bl	79b0 <CLI_argumentIsolation>
    79fa:	46a8      	mov	r8, r5

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    79fc:	f899 3000 	ldrb.w	r3, [r9]
    7a00:	b2e6      	uxtb	r6, r4
    7a02:	42b3      	cmp	r3, r6
    7a04:	d91a      	bls.n	7a3c <CLI_commandLookup+0x68>
    7a06:	2700      	movs	r7, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    7a08:	f04f 0b0c 	mov.w	fp, #12
    7a0c:	b2fd      	uxtb	r5, r7
    7a0e:	fb0b f505 	mul.w	r5, fp, r5
    7a12:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    7a16:	5959      	ldr	r1, [r3, r5]
    7a18:	b171      	cbz	r1, 7a38 <CLI_commandLookup+0x64>
		{
			// Compare the first argument and each command entry
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == -1 )
    7a1a:	9806      	ldr	r0, [sp, #24]
    7a1c:	f000 fba6 	bl	816c <eqStr>
    7a20:	3001      	adds	r0, #1
    7a22:	f107 0701 	add.w	r7, r7, #1
    7a26:	d1f1      	bne.n	7a0c <CLI_commandLookup+0x38>
			{
				// Run the specified command function pointer
				//   argPtr is already pointing at the first character of the arguments
				(*(void (*)(char*))CLIDict[dict][cmd].function)( argPtr );
    7a28:	4b12      	ldr	r3, [pc, #72]	; (7a74 <CLI_commandLookup+0xa0>)
    7a2a:	9807      	ldr	r0, [sp, #28]
    7a2c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7a30:	441d      	add	r5, r3
    7a32:	68ab      	ldr	r3, [r5, #8]
    7a34:	4798      	blx	r3

				return;
    7a36:	e016      	b.n	7a66 <CLI_commandLookup+0x92>
    7a38:	3401      	adds	r4, #1
    7a3a:	e7df      	b.n	79fc <CLI_commandLookup+0x28>
			}
		}
	}

	// No match for the command...
	print( NL );
    7a3c:	4c0e      	ldr	r4, [pc, #56]	; (7a78 <CLI_commandLookup+0xa4>)
    7a3e:	4620      	mov	r0, r4
    7a40:	f000 fa96 	bl	7f70 <_print>
	erro_dPrint("\"", CLILineBuffer, "\" is not a valid command...type \033[35mhelp\033[0m");
    7a44:	4b0d      	ldr	r3, [pc, #52]	; (7a7c <CLI_commandLookup+0xa8>)
    7a46:	9305      	str	r3, [sp, #20]
    7a48:	4b0d      	ldr	r3, [pc, #52]	; (7a80 <CLI_commandLookup+0xac>)
    7a4a:	9303      	str	r3, [sp, #12]
    7a4c:	4b0d      	ldr	r3, [pc, #52]	; (7a84 <CLI_commandLookup+0xb0>)
    7a4e:	9301      	str	r3, [sp, #4]
    7a50:	4b0d      	ldr	r3, [pc, #52]	; (7a88 <CLI_commandLookup+0xb4>)
    7a52:	9300      	str	r3, [sp, #0]
    7a54:	9404      	str	r4, [sp, #16]
    7a56:	f8cd 8008 	str.w	r8, [sp, #8]
    7a5a:	4b0c      	ldr	r3, [pc, #48]	; (7a8c <CLI_commandLookup+0xb8>)
    7a5c:	4a0c      	ldr	r2, [pc, #48]	; (7a90 <CLI_commandLookup+0xbc>)
    7a5e:	490d      	ldr	r1, [pc, #52]	; (7a94 <CLI_commandLookup+0xc0>)
    7a60:	480d      	ldr	r0, [pc, #52]	; (7a98 <CLI_commandLookup+0xc4>)
    7a62:	f000 fa6b 	bl	7f3c <printstrs>
}
    7a66:	b009      	add	sp, #36	; 0x24
    7a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a6c:	1fff9800 	.word	0x1fff9800
    7a70:	1fff9744 	.word	0x1fff9744
    7a74:	1fff97ac 	.word	0x1fff97ac
    7a78:	0000c0ef 	.word	0x0000c0ef
    7a7c:	0000bf7e 	.word	0x0000bf7e
    7a80:	0000c30b 	.word	0x0000c30b
    7a84:	0000c339 	.word	0x0000c339
    7a88:	000097fc 	.word	0x000097fc
    7a8c:	0000c2fb 	.word	0x0000c2fb
    7a90:	0000af1c 	.word	0x0000af1c
    7a94:	0000c301 	.word	0x0000c301
    7a98:	0000c308 	.word	0x0000c308
    7a9c:	1fff935b 	.word	0x1fff935b

00007aa0 <CLI_registerDictionary>:

// Registers a command dictionary with the CLI
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
    7aa0:	b410      	push	{r4}
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
    7aa2:	4a09      	ldr	r2, [pc, #36]	; (7ac8 <CLI_registerDictionary+0x28>)
    7aa4:	7813      	ldrb	r3, [r2, #0]
    7aa6:	2b09      	cmp	r3, #9
    7aa8:	d903      	bls.n	7ab2 <CLI_registerDictionary+0x12>
	{
		erro_print("Max number of dictionaries defined already...");
    7aaa:	4808      	ldr	r0, [pc, #32]	; (7acc <CLI_registerDictionary+0x2c>)
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}
    7aac:	bc10      	pop	{r4}
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
	{
		erro_print("Max number of dictionaries defined already...");
    7aae:	f000 ba5f 	b.w	7f70 <_print>
		return;
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
    7ab2:	4c07      	ldr	r4, [pc, #28]	; (7ad0 <CLI_registerDictionary+0x30>)
    7ab4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
    7ab8:	1c59      	adds	r1, r3, #1
    7aba:	7011      	strb	r1, [r2, #0]
    7abc:	4a05      	ldr	r2, [pc, #20]	; (7ad4 <CLI_registerDictionary+0x34>)
}
    7abe:	bc10      	pop	{r4}
		return;
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
    7ac0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    7ac4:	4770      	bx	lr
    7ac6:	bf00      	nop
    7ac8:	1fff935b 	.word	0x1fff935b
    7acc:	0000c33b 	.word	0x0000c33b
    7ad0:	1fff97d8 	.word	0x1fff97d8
    7ad4:	1fff97ac 	.word	0x1fff97ac

00007ad8 <CLI_init>:

// Initialize the CLI
inline void CLI_init()
{
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    7ad8:	4b0e      	ldr	r3, [pc, #56]	; (7b14 <CLI_init+0x3c>)

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7ada:	480f      	ldr	r0, [pc, #60]	; (7b18 <CLI_init+0x40>)
	print("\033[1;34m:\033[0m "); // Blue bold prompt
}

// Initialize the CLI
inline void CLI_init()
{
    7adc:	b510      	push	{r4, lr}
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    7ade:	2400      	movs	r4, #0
    7ae0:	701c      	strb	r4, [r3, #0]

	// History starts empty
	CLIHistoryHead = 0;
    7ae2:	4b0e      	ldr	r3, [pc, #56]	; (7b1c <CLI_init+0x44>)
    7ae4:	701c      	strb	r4, [r3, #0]
	CLIHistoryCurrent = 0;
    7ae6:	4b0e      	ldr	r3, [pc, #56]	; (7b20 <CLI_init+0x48>)
    7ae8:	701c      	strb	r4, [r3, #0]
	CLIHistoryTail = 0;
    7aea:	4b0e      	ldr	r3, [pc, #56]	; (7b24 <CLI_init+0x4c>)
    7aec:	701c      	strb	r4, [r3, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7aee:	f000 fa3f 	bl	7f70 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7af2:	480d      	ldr	r0, [pc, #52]	; (7b28 <CLI_init+0x50>)
    7af4:	f000 fa3c 	bl	7f70 <_print>

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    7af8:	4b0c      	ldr	r3, [pc, #48]	; (7b2c <CLI_init+0x54>)
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    7afa:	490d      	ldr	r1, [pc, #52]	; (7b30 <CLI_init+0x58>)
    7afc:	480d      	ldr	r0, [pc, #52]	; (7b34 <CLI_init+0x5c>)

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    7afe:	701c      	strb	r4, [r3, #0]
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    7b00:	f7ff ffce 	bl	7aa0 <CLI_registerDictionary>

	// Initialize main LED
	init_errorLED();
    7b04:	f000 f9fe 	bl	7f04 <init_errorLED>
	CLILEDState = 0;
    7b08:	4b0b      	ldr	r3, [pc, #44]	; (7b38 <CLI_init+0x60>)
    7b0a:	701c      	strb	r4, [r3, #0]

	// Hex debug mode is off by default
	CLIHexDebugMode = 0;
    7b0c:	4b0b      	ldr	r3, [pc, #44]	; (7b3c <CLI_init+0x64>)
    7b0e:	701c      	strb	r4, [r3, #0]
    7b10:	bd10      	pop	{r4, pc}
    7b12:	bf00      	nop
    7b14:	1fff9800 	.word	0x1fff9800
    7b18:	0000c380 	.word	0x0000c380
    7b1c:	1fff97a9 	.word	0x1fff97a9
    7b20:	1fff9359 	.word	0x1fff9359
    7b24:	1fff97d4 	.word	0x1fff97d4
    7b28:	0000c386 	.word	0x0000c386
    7b2c:	1fff935b 	.word	0x1fff935b
    7b30:	0000c536 	.word	0x0000c536
    7b34:	0000c434 	.word	0x0000c434
    7b38:	1fff935a 	.word	0x1fff935a
    7b3c:	1fff9358 	.word	0x1fff9358

00007b40 <CLI_tabCompletion>:
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    7b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    7b44:	4d29      	ldr	r5, [pc, #164]	; (7bec <CLI_tabCompletion+0xac>)
    7b46:	782b      	ldrb	r3, [r5, #0]
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    7b48:	b087      	sub	sp, #28
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	d04b      	beq.n	7be6 <CLI_tabCompletion+0xa6>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    7b4e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 7bfc <CLI_tabCompletion+0xbc>

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    7b52:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 7c00 <CLI_tabCompletion+0xc0>
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    7b56:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    7b58:	aa05      	add	r2, sp, #20
    7b5a:	a904      	add	r1, sp, #16
    7b5c:	4640      	mov	r0, r8
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    7b5e:	f808 4003 	strb.w	r4, [r8, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    7b62:	f7ff ff25 	bl	79b0 <CLI_argumentIsolation>
	// Tab match pointer
	char* tabMatch = 0;
	uint8_t matches = 0;

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    7b66:	4a22      	ldr	r2, [pc, #136]	; (7bf0 <CLI_tabCompletion+0xb0>)
    7b68:	f8cd 8004 	str.w	r8, [sp, #4]
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );

	// Tab match pointer
	char* tabMatch = 0;
	uint8_t matches = 0;
    7b6c:	4627      	mov	r7, r4
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );

	// Tab match pointer
	char* tabMatch = 0;
    7b6e:	4626      	mov	r6, r4
	uint8_t matches = 0;

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    7b70:	7813      	ldrb	r3, [r2, #0]
    7b72:	fa5f fa84 	uxtb.w	sl, r4
    7b76:	4553      	cmp	r3, sl
    7b78:	d91e      	bls.n	7bb8 <CLI_tabCompletion+0x78>
    7b7a:	f04f 0900 	mov.w	r9, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    7b7e:	230c      	movs	r3, #12
    7b80:	fa5f f889 	uxtb.w	r8, r9
    7b84:	fb03 f808 	mul.w	r8, r3, r8
    7b88:	f85b 102a 	ldr.w	r1, [fp, sl, lsl #2]
    7b8c:	f851 1008 	ldr.w	r1, [r1, r8]
    7b90:	b181      	cbz	r1, 7bb4 <CLI_tabCompletion+0x74>
		{
			// Compare the first argument piece to each command entry to see if it is "like"
			// NOTE: To save on processing, we only care about the commands and ignore the arguments
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
    7b92:	9804      	ldr	r0, [sp, #16]
    7b94:	9203      	str	r2, [sp, #12]
    7b96:	9302      	str	r3, [sp, #8]
    7b98:	f000 fae8 	bl	816c <eqStr>
    7b9c:	9b02      	ldr	r3, [sp, #8]
    7b9e:	9a03      	ldr	r2, [sp, #12]
    7ba0:	b928      	cbnz	r0, 7bae <CLI_tabCompletion+0x6e>
			{
				// TODO Make list of commands if multiple matches
				matches++;
				tabMatch = (char*)CLIDict[dict][cmd].name;
    7ba2:	f85b 102a 	ldr.w	r1, [fp, sl, lsl #2]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    7ba6:	3701      	adds	r7, #1
				tabMatch = (char*)CLIDict[dict][cmd].name;
    7ba8:	f851 6008 	ldr.w	r6, [r1, r8]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    7bac:	b2ff      	uxtb	r7, r7
    7bae:	f109 0901 	add.w	r9, r9, #1
    7bb2:	e7e5      	b.n	7b80 <CLI_tabCompletion+0x40>
    7bb4:	3401      	adds	r4, #1
    7bb6:	e7db      	b.n	7b70 <CLI_tabCompletion+0x30>
			}
		}
	}

	// Only tab complete if there was 1 match
	if ( matches == 1 )
    7bb8:	2f01      	cmp	r7, #1
    7bba:	d114      	bne.n	7be6 <CLI_tabCompletion+0xa6>
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    7bbc:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7bbe:	480d      	ldr	r0, [pc, #52]	; (7bf4 <CLI_tabCompletion+0xb4>)

	// Only tab complete if there was 1 match
	if ( matches == 1 )
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    7bc0:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7bc2:	f000 f9d5 	bl	7f70 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7bc6:	480c      	ldr	r0, [pc, #48]	; (7bf8 <CLI_tabCompletion+0xb8>)
    7bc8:	f000 f9d2 	bl	7f70 <_print>

		// Reprint the prompt (automatically clears the line)
		prompt();

		// Display the command
		dPrint( tabMatch );
    7bcc:	4630      	mov	r0, r6
    7bce:	f7fe fcf3 	bl	65b8 <Output_putstr>

		// There are no index counts, so just copy the whole string to the input buffer
		while ( *tabMatch != '\0' )
    7bd2:	7833      	ldrb	r3, [r6, #0]
    7bd4:	b13b      	cbz	r3, 7be6 <CLI_tabCompletion+0xa6>
		{
			CLILineBuffer[CLILineBufferCurrent++] = *tabMatch++;
    7bd6:	782b      	ldrb	r3, [r5, #0]
    7bd8:	9901      	ldr	r1, [sp, #4]
    7bda:	1c5a      	adds	r2, r3, #1
    7bdc:	702a      	strb	r2, [r5, #0]
    7bde:	f816 2b01 	ldrb.w	r2, [r6], #1
    7be2:	54ca      	strb	r2, [r1, r3]
    7be4:	e7f5      	b.n	7bd2 <CLI_tabCompletion+0x92>
		}
	}
}
    7be6:	b007      	add	sp, #28
    7be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7bec:	1fff9800 	.word	0x1fff9800
    7bf0:	1fff935b 	.word	0x1fff935b
    7bf4:	0000c380 	.word	0x0000c380
    7bf8:	0000c386 	.word	0x0000c386
    7bfc:	1fff9744 	.word	0x1fff9744
    7c00:	1fff97ac 	.word	0x1fff97ac

00007c04 <CLI_wrap>:

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;

	if ( kX < kLowerBound )
    7c04:	4281      	cmp	r1, r0
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    7c06:	eba2 0201 	sub.w	r2, r2, r1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    7c0a:	bfc8      	it	gt
    7c0c:	1a0b      	subgt	r3, r1, r0
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    7c0e:	f102 0201 	add.w	r2, r2, #1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    7c12:	bfc2      	ittt	gt
    7c14:	fb93 f3f2 	sdivgt	r3, r3, r2
    7c18:	fb03 2302 	mlagt	r3, r3, r2, r2
    7c1c:	18c0      	addgt	r0, r0, r3

	return kLowerBound + (kX - kLowerBound) % range_size;
    7c1e:	1a43      	subs	r3, r0, r1
    7c20:	fb93 f0f2 	sdiv	r0, r3, r2
    7c24:	fb02 3010 	mls	r0, r2, r0, r3
}
    7c28:	4408      	add	r0, r1
    7c2a:	4770      	bx	lr

00007c2c <CLI_saveHistory>:

inline void CLI_saveHistory( char *buff )
{
    7c2c:	b510      	push	{r4, lr}
	if ( buff == NULL )
    7c2e:	b108      	cbz	r0, 7c34 <CLI_saveHistory+0x8>
    7c30:	3801      	subs	r0, #1
    7c32:	e006      	b.n	7c42 <CLI_saveHistory+0x16>
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    7c34:	4b0e      	ldr	r3, [pc, #56]	; (7c70 <CLI_saveHistory+0x44>)
    7c36:	781a      	ldrb	r2, [r3, #0]
    7c38:	2364      	movs	r3, #100	; 0x64
    7c3a:	4353      	muls	r3, r2
    7c3c:	4a0d      	ldr	r2, [pc, #52]	; (7c74 <CLI_saveHistory+0x48>)
    7c3e:	54d0      	strb	r0, [r2, r3]
		return;
    7c40:	bd10      	pop	{r4, pc}
	}

        // Don't write empty lines to the history
        const char *cursor = buff;
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
    7c42:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7c46:	2b20      	cmp	r3, #32
    7c48:	d0fb      	beq.n	7c42 <CLI_saveHistory+0x16>
        if (*cursor == '\0') { return ; }
    7c4a:	b17b      	cbz	r3, 7c6c <CLI_saveHistory+0x40>

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    7c4c:	4b0a      	ldr	r3, [pc, #40]	; (7c78 <CLI_saveHistory+0x4c>)
    7c4e:	4a09      	ldr	r2, [pc, #36]	; (7c74 <CLI_saveHistory+0x48>)
    7c50:	7819      	ldrb	r1, [r3, #0]
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    7c52:	4b07      	ldr	r3, [pc, #28]	; (7c70 <CLI_saveHistory+0x44>)
    7c54:	7818      	ldrb	r0, [r3, #0]
    7c56:	2364      	movs	r3, #100	; 0x64
    7c58:	fb00 2203 	mla	r2, r0, r3, r2
    7c5c:	4807      	ldr	r0, [pc, #28]	; (7c7c <CLI_saveHistory+0x50>)
    7c5e:	2300      	movs	r3, #0
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    7c60:	428b      	cmp	r3, r1
    7c62:	da03      	bge.n	7c6c <CLI_saveHistory+0x40>
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    7c64:	5c1c      	ldrb	r4, [r3, r0]
    7c66:	54d4      	strb	r4, [r2, r3]
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    7c68:	3301      	adds	r3, #1
    7c6a:	e7f9      	b.n	7c60 <CLI_saveHistory+0x34>
    7c6c:	bd10      	pop	{r4, pc}
    7c6e:	bf00      	nop
    7c70:	1fff97d4 	.word	0x1fff97d4
    7c74:	1fff935c 	.word	0x1fff935c
    7c78:	1fff9800 	.word	0x1fff9800
    7c7c:	1fff9744 	.word	0x1fff9744

00007c80 <CLI_retreiveHistory>:
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
	}
}

void CLI_retreiveHistory( int index )
{
    7c80:	b570      	push	{r4, r5, r6, lr}
	char *histMatch = CLIHistoryBuffer[ index ];
    7c82:	4c0f      	ldr	r4, [pc, #60]	; (7cc0 <CLI_retreiveHistory+0x40>)

	// Reset the buffer
	CLILineBufferCurrent = 0;
    7c84:	4e0f      	ldr	r6, [pc, #60]	; (7cc4 <CLI_retreiveHistory+0x44>)
	}
}

void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];
    7c86:	2364      	movs	r3, #100	; 0x64
    7c88:	fb03 4400 	mla	r4, r3, r0, r4

	// Reset the buffer
	CLILineBufferCurrent = 0;
    7c8c:	2500      	movs	r5, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7c8e:	480e      	ldr	r0, [pc, #56]	; (7cc8 <CLI_retreiveHistory+0x48>)
void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];

	// Reset the buffer
	CLILineBufferCurrent = 0;
    7c90:	7035      	strb	r5, [r6, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7c92:	f000 f96d 	bl	7f70 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7c96:	480d      	ldr	r0, [pc, #52]	; (7ccc <CLI_retreiveHistory+0x4c>)
    7c98:	f000 f96a 	bl	7f70 <_print>

	// Reprint the prompt (automatically clears the line)
	prompt();

	// Display the command
	dPrint( histMatch );
    7c9c:	4620      	mov	r0, r4
    7c9e:	f7fe fc8b 	bl	65b8 <Output_putstr>

	// There are no index counts, so just copy the whole string to the input buffe
	CLILineBufferCurrent = 0;
	while ( *histMatch != '\0' )
    7ca2:	4620      	mov	r0, r4
    7ca4:	b2e1      	uxtb	r1, r4
	{
		CLILineBuffer[ CLILineBufferCurrent++ ] = *histMatch++;
    7ca6:	4c0a      	ldr	r4, [pc, #40]	; (7cd0 <CLI_retreiveHistory+0x50>)

	// Display the command
	dPrint( histMatch );

	// There are no index counts, so just copy the whole string to the input buffe
	CLILineBufferCurrent = 0;
    7ca8:	7035      	strb	r5, [r6, #0]
    7caa:	1a43      	subs	r3, r0, r1
	while ( *histMatch != '\0' )
    7cac:	f810 2b01 	ldrb.w	r2, [r0], #1
    7cb0:	b2db      	uxtb	r3, r3
    7cb2:	b112      	cbz	r2, 7cba <CLI_retreiveHistory+0x3a>
	{
		CLILineBuffer[ CLILineBufferCurrent++ ] = *histMatch++;
    7cb4:	54e2      	strb	r2, [r4, r3]
    7cb6:	2501      	movs	r5, #1
    7cb8:	e7f7      	b.n	7caa <CLI_retreiveHistory+0x2a>
    7cba:	b105      	cbz	r5, 7cbe <CLI_retreiveHistory+0x3e>
    7cbc:	7033      	strb	r3, [r6, #0]
    7cbe:	bd70      	pop	{r4, r5, r6, pc}
    7cc0:	1fff935c 	.word	0x1fff935c
    7cc4:	1fff9800 	.word	0x1fff9800
    7cc8:	0000c380 	.word	0x0000c380
    7ccc:	0000c386 	.word	0x0000c386
    7cd0:	1fff9744 	.word	0x1fff9744

00007cd4 <CLI_process>:
	CLIHexDebugMode = 0;
}

// Query the serial input buffer for any new characters
void CLI_process()
{
    7cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Current buffer position
	uint8_t prev_buf_pos = CLILineBufferCurrent;
    7cd8:	4d7a      	ldr	r5, [pc, #488]	; (7ec4 <CLI_process+0x1f0>)

			return;
		}

		// Place into line buffer
		CLILineBuffer[CLILineBufferCurrent++] = cur_char;
    7cda:	4e7b      	ldr	r6, [pc, #492]	; (7ec8 <CLI_process+0x1f4>)

// Query the serial input buffer for any new characters
void CLI_process()
{
	// Current buffer position
	uint8_t prev_buf_pos = CLILineBufferCurrent;
    7cdc:	782c      	ldrb	r4, [r5, #0]

		// Retrieve from output module
		char cur_char = (char)Output_getchar();

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    7cde:	462f      	mov	r7, r5

	// Process each character while available
	while ( 1 )
	{
		// No more characters to process
		if ( Output_availablechar() == 0 )
    7ce0:	f7fe fc66 	bl	65b0 <Output_availablechar>
    7ce4:	b198      	cbz	r0, 7d0e <CLI_process+0x3a>
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    7ce6:	f7fe fc65 	bl	65b4 <Output_getchar>

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    7cea:	782b      	ldrb	r3, [r5, #0]
    7cec:	2b63      	cmp	r3, #99	; 0x63
		// No more characters to process
		if ( Output_availablechar() == 0 )
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    7cee:	b2c0      	uxtb	r0, r0

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    7cf0:	d909      	bls.n	7d06 <CLI_process+0x32>
		{
			print( NL );
    7cf2:	4876      	ldr	r0, [pc, #472]	; (7ecc <CLI_process+0x1f8>)
    7cf4:	f000 f93c 	bl	7f70 <_print>
			erro_print("Serial line buffer is full, dropping character and resetting...");
    7cf8:	4875      	ldr	r0, [pc, #468]	; (7ed0 <CLI_process+0x1fc>)
    7cfa:	f000 f939 	bl	7f70 <_print>

			// Clear buffer
			CLILineBufferCurrent = 0;
    7cfe:	4b71      	ldr	r3, [pc, #452]	; (7ec4 <CLI_process+0x1f0>)
    7d00:	2200      	movs	r2, #0
    7d02:	701a      	strb	r2, [r3, #0]
    7d04:	e043      	b.n	7d8e <CLI_process+0xba>

			return;
		}

		// Place into line buffer
		CLILineBuffer[CLILineBufferCurrent++] = cur_char;
    7d06:	1c5a      	adds	r2, r3, #1
    7d08:	703a      	strb	r2, [r7, #0]
    7d0a:	54f0      	strb	r0, [r6, r3]
	}
    7d0c:	e7e8      	b.n	7ce0 <CLI_process+0xc>

	// Display Hex Key Input if enabled
	if ( CLIHexDebugMode && CLILineBufferCurrent > prev_buf_pos )
    7d0e:	4b71      	ldr	r3, [pc, #452]	; (7ed4 <CLI_process+0x200>)
    7d10:	781b      	ldrb	r3, [r3, #0]
    7d12:	b1e3      	cbz	r3, 7d4e <CLI_process+0x7a>
    7d14:	782b      	ldrb	r3, [r5, #0]
    7d16:	42a3      	cmp	r3, r4
    7d18:	f240 80d2 	bls.w	7ec0 <CLI_process+0x1ec>
	{
		print("\033[s\r\n"); // Save cursor position, and move to the next line
    7d1c:	486e      	ldr	r0, [pc, #440]	; (7ed8 <CLI_process+0x204>)
		print("\033[2K");    // Erases the current line

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
		{
			printHex( CLILineBuffer[pos++] );
    7d1e:	4f6a      	ldr	r7, [pc, #424]	; (7ec8 <CLI_process+0x1f4>)
	}

	// Display Hex Key Input if enabled
	if ( CLIHexDebugMode && CLILineBufferCurrent > prev_buf_pos )
	{
		print("\033[s\r\n"); // Save cursor position, and move to the next line
    7d20:	f000 f926 	bl	7f70 <_print>
		print("\033[2K");    // Erases the current line
    7d24:	486d      	ldr	r0, [pc, #436]	; (7edc <CLI_process+0x208>)
    7d26:	f000 f923 	bl	7f70 <_print>

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
    7d2a:	4623      	mov	r3, r4
    7d2c:	782a      	ldrb	r2, [r5, #0]
    7d2e:	429a      	cmp	r2, r3
    7d30:	d90a      	bls.n	7d48 <CLI_process+0x74>
		{
			printHex( CLILineBuffer[pos++] );
    7d32:	1c5e      	adds	r6, r3, #1
    7d34:	5cf8      	ldrb	r0, [r7, r3]
    7d36:	2101      	movs	r1, #1
    7d38:	f000 f9bd 	bl	80b6 <printHex_op>
    7d3c:	b2f6      	uxtb	r6, r6
			print(" ");
    7d3e:	4868      	ldr	r0, [pc, #416]	; (7ee0 <CLI_process+0x20c>)
    7d40:	f000 f916 	bl	7f70 <_print>
		print("\033[2K");    // Erases the current line

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
		{
			printHex( CLILineBuffer[pos++] );
    7d44:	4633      	mov	r3, r6
    7d46:	e7f1      	b.n	7d2c <CLI_process+0x58>
			print(" ");
		}

		print("\033[u"); // Restore cursor position
    7d48:	4866      	ldr	r0, [pc, #408]	; (7ee4 <CLI_process+0x210>)
    7d4a:	f000 f911 	bl	7f70 <_print>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7d4e:	4f5e      	ldr	r7, [pc, #376]	; (7ec8 <CLI_process+0x1f4>)
    7d50:	46b8      	mov	r8, r7
    7d52:	e007      	b.n	7d64 <CLI_process+0x90>
    7d54:	d82f      	bhi.n	7db6 <CLI_process+0xe2>
    7d56:	2a08      	cmp	r2, #8
    7d58:	d121      	bne.n	7d9e <CLI_process+0xca>
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
    7d5a:	2b01      	cmp	r3, #1
    7d5c:	f040 80a0 	bne.w	7ea0 <CLI_process+0x1cc>
			return;

		case 0x08:
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace
    7d60:	2300      	movs	r3, #0
    7d62:	702b      	strb	r3, [r5, #0]

		print("\033[u"); // Restore cursor position
	}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
    7d64:	782b      	ldrb	r3, [r5, #0]
    7d66:	f8df 915c 	ldr.w	r9, [pc, #348]	; 7ec4 <CLI_process+0x1f0>
    7d6a:	429c      	cmp	r4, r3
    7d6c:	f080 80a8 	bcs.w	7ec0 <CLI_process+0x1ec>
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7d70:	5d3a      	ldrb	r2, [r7, r4]
    7d72:	4e55      	ldr	r6, [pc, #340]	; (7ec8 <CLI_process+0x1f4>)
    7d74:	2a0a      	cmp	r2, #10
    7d76:	d1ed      	bne.n	7d54 <CLI_process+0x80>
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    7d78:	441e      	add	r6, r3
    7d7a:	2220      	movs	r2, #32

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    7d7c:	2b01      	cmp	r3, #1
		switch ( CLILineBuffer[prev_buf_pos] )
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    7d7e:	f806 2c01 	strb.w	r2, [r6, #-1]

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    7d82:	d11f      	bne.n	7dc4 <CLI_process+0xf0>
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    7d84:	2300      	movs	r3, #0

			// Reset the prompt after processing has finished
			print( NL );
    7d86:	4851      	ldr	r0, [pc, #324]	; (7ecc <CLI_process+0x1f8>)
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    7d88:	702b      	strb	r3, [r5, #0]

			// Reset the prompt after processing has finished
			print( NL );
    7d8a:	f000 f8f1 	bl	7f70 <_print>

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7d8e:	4856      	ldr	r0, [pc, #344]	; (7ee8 <CLI_process+0x214>)
    7d90:	f000 f8ee 	bl	7f70 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7d94:	4855      	ldr	r0, [pc, #340]	; (7eec <CLI_process+0x218>)
			prev_buf_pos++;

			break;
		}
	}
}
    7d96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7d9a:	f000 b8e9 	b.w	7f70 <_print>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7d9e:	2a09      	cmp	r2, #9
    7da0:	f040 8084 	bne.w	7eac <CLI_process+0x1d8>
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;

		case 0x09: // Tab
			// Tab completion for the current command
			CLI_tabCompletion();
    7da4:	f7ff fecc 	bl	7b40 <CLI_tabCompletion>

			CLILineBufferCurrent--; // Remove the Tab
    7da8:	f899 3000 	ldrb.w	r3, [r9]
    7dac:	3b01      	subs	r3, #1
    7dae:	f889 3000 	strb.w	r3, [r9]

			// XXX There is a potential bug here when resetting the buffer (losing valid keypresses)
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;
    7db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7db6:	2a1b      	cmp	r2, #27
    7db8:	d029      	beq.n	7e0e <CLI_process+0x13a>
    7dba:	2a7f      	cmp	r2, #127	; 0x7f
    7dbc:	d0cd      	beq.n	7d5a <CLI_process+0x86>
    7dbe:	2a0d      	cmp	r2, #13
    7dc0:	d174      	bne.n	7eac <CLI_process+0x1d8>
    7dc2:	e7d9      	b.n	7d78 <CLI_process+0xa4>
				CLILineBufferCurrent--;
			}
			else
			{
				// Add the command to the history
				CLI_saveHistory( CLILineBuffer );
    7dc4:	4840      	ldr	r0, [pc, #256]	; (7ec8 <CLI_process+0x1f4>)
    7dc6:	f7ff ff31 	bl	7c2c <CLI_saveHistory>

				// Process the current line buffer
				CLI_commandLookup();
    7dca:	f7ff fe03 	bl	79d4 <CLI_commandLookup>

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
    7dce:	4a48      	ldr	r2, [pc, #288]	; (7ef0 <CLI_process+0x21c>)
    7dd0:	4948      	ldr	r1, [pc, #288]	; (7ef4 <CLI_process+0x220>)
    7dd2:	7813      	ldrb	r3, [r2, #0]
    7dd4:	7808      	ldrb	r0, [r1, #0]
    7dd6:	4283      	cmp	r3, r0
    7dd8:	d206      	bcs.n	7de8 <CLI_process+0x114>
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    7dda:	3001      	adds	r0, #1
    7ddc:	260a      	movs	r6, #10
    7dde:	fb90 f4f6 	sdiv	r4, r0, r6
    7de2:	fb06 0014 	mls	r0, r6, r4, r0
    7de6:	7008      	strb	r0, [r1, #0]
				CLIHistoryTail++;
    7de8:	3301      	adds	r3, #1
    7dea:	b2db      	uxtb	r3, r3
				if ( CLIHistoryTail == CLIMaxHistorySize )
    7dec:	2b0a      	cmp	r3, #10
				{
					CLIHistoryTail = 0;
    7dee:	bf03      	ittte	eq
    7df0:	2300      	moveq	r3, #0
    7df2:	7013      	strbeq	r3, [r2, #0]
					CLIHistoryHead = 1;
    7df4:	2301      	moveq	r3, #1
				CLI_commandLookup();

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
				CLIHistoryTail++;
    7df6:	7013      	strbne	r3, [r2, #0]
				if ( CLIHistoryTail == CLIMaxHistorySize )
				{
					CLIHistoryTail = 0;
					CLIHistoryHead = 1;
    7df8:	bf08      	it	eq
    7dfa:	700b      	strbeq	r3, [r1, #0]
				}

				CLIHistoryCurrent = CLIHistoryTail; // 'Up' starts at the last item
    7dfc:	4b3e      	ldr	r3, [pc, #248]	; (7ef8 <CLI_process+0x224>)
    7dfe:	7812      	ldrb	r2, [r2, #0]
    7e00:	701a      	strb	r2, [r3, #0]
inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    7e02:	2364      	movs	r3, #100	; 0x64
    7e04:	4353      	muls	r3, r2
    7e06:	4a3d      	ldr	r2, [pc, #244]	; (7efc <CLI_process+0x228>)
    7e08:	2100      	movs	r1, #0
    7e0a:	54d1      	strb	r1, [r2, r3]
    7e0c:	e7ba      	b.n	7d84 <CLI_process+0xb0>

		case 0x1B: // Esc / Escape codes
			// Check for other escape sequence

			// \e[ is an escape code in vt100 compatible terminals
			if ( CLILineBufferCurrent >= prev_buf_pos + 3
    7e0e:	1ca7      	adds	r7, r4, #2
    7e10:	429f      	cmp	r7, r3
    7e12:	da55      	bge.n	7ec0 <CLI_process+0x1ec>
				&& CLILineBuffer[ prev_buf_pos ] == 0x1B
				&& CLILineBuffer[ prev_buf_pos + 1] == 0x5B )
    7e14:	1933      	adds	r3, r6, r4
    7e16:	785b      	ldrb	r3, [r3, #1]
    7e18:	2b5b      	cmp	r3, #91	; 0x5b
    7e1a:	d151      	bne.n	7ec0 <CLI_process+0x1ec>
			{
				// Arrow Keys: A (0x41) = Up, B (0x42) = Down, C (0x43) = Right, D (0x44) = Left

				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
    7e1c:	5df3      	ldrb	r3, [r6, r7]
    7e1e:	2b41      	cmp	r3, #65	; 0x41
    7e20:	d122      	bne.n	7e68 <CLI_process+0x194>
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
    7e22:	4d35      	ldr	r5, [pc, #212]	; (7ef8 <CLI_process+0x224>)
    7e24:	4b32      	ldr	r3, [pc, #200]	; (7ef0 <CLI_process+0x21c>)
    7e26:	f995 2000 	ldrsb.w	r2, [r5]
    7e2a:	781b      	ldrb	r3, [r3, #0]
    7e2c:	429a      	cmp	r2, r3
    7e2e:	d104      	bne.n	7e3a <CLI_process+0x166>
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    7e30:	2300      	movs	r3, #0
						CLI_saveHistory( CLILineBuffer );
    7e32:	4630      	mov	r0, r6
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    7e34:	5533      	strb	r3, [r6, r4]
						CLI_saveHistory( CLILineBuffer );
    7e36:	f7ff fef9 	bl	7c2c <CLI_saveHistory>
					}

					// Grab the previus item from the history if there is one
					if ( RING_PREV( CLIHistoryCurrent ) != RING_PREV( CLIHistoryHead ) )
    7e3a:	f995 0000 	ldrsb.w	r0, [r5]
    7e3e:	2209      	movs	r2, #9
    7e40:	2100      	movs	r1, #0
    7e42:	3801      	subs	r0, #1
    7e44:	f7ff fede 	bl	7c04 <CLI_wrap>
    7e48:	4b2a      	ldr	r3, [pc, #168]	; (7ef4 <CLI_process+0x220>)
    7e4a:	4604      	mov	r4, r0
    7e4c:	7818      	ldrb	r0, [r3, #0]
    7e4e:	2209      	movs	r2, #9
    7e50:	2100      	movs	r1, #0
    7e52:	3801      	subs	r0, #1
    7e54:	f7ff fed6 	bl	7c04 <CLI_wrap>
    7e58:	4284      	cmp	r4, r0
						CLIHistoryCurrent = RING_PREV( CLIHistoryCurrent );
    7e5a:	bf1c      	itt	ne
    7e5c:	4b26      	ldrne	r3, [pc, #152]	; (7ef8 <CLI_process+0x224>)
    7e5e:	701c      	strbne	r4, [r3, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    7e60:	f995 0000 	ldrsb.w	r0, [r5]
    7e64:	f7ff ff0c 	bl	7c80 <CLI_retreiveHistory>
				}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
    7e68:	5df3      	ldrb	r3, [r6, r7]
    7e6a:	2b42      	cmp	r3, #66	; 0x42
    7e6c:	d128      	bne.n	7ec0 <CLI_process+0x1ec>
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
    7e6e:	4c22      	ldr	r4, [pc, #136]	; (7ef8 <CLI_process+0x224>)
    7e70:	f994 0000 	ldrsb.w	r0, [r4]
    7e74:	2209      	movs	r2, #9
    7e76:	2100      	movs	r1, #0
    7e78:	3001      	adds	r0, #1
    7e7a:	f7ff fec3 	bl	7c04 <CLI_wrap>
    7e7e:	4b1c      	ldr	r3, [pc, #112]	; (7ef0 <CLI_process+0x21c>)
    7e80:	4605      	mov	r5, r0
    7e82:	7818      	ldrb	r0, [r3, #0]
    7e84:	2209      	movs	r2, #9
    7e86:	2100      	movs	r1, #0
    7e88:	3001      	adds	r0, #1
    7e8a:	f7ff febb 	bl	7c04 <CLI_wrap>
    7e8e:	4285      	cmp	r5, r0
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
    7e90:	bf18      	it	ne
    7e92:	7025      	strbne	r5, [r4, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    7e94:	f994 0000 	ldrsb.w	r0, [r4]
			prev_buf_pos++;

			break;
		}
	}
}
    7e98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
					CLI_retreiveHistory( CLIHistoryCurrent );
    7e9c:	f7ff bef0 	b.w	7c80 <CLI_retreiveHistory>

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    7ea0:	3b02      	subs	r3, #2

				// Remove character from tty
				print("\b \b");
    7ea2:	4817      	ldr	r0, [pc, #92]	; (7f00 <CLI_process+0x22c>)

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    7ea4:	702b      	strb	r3, [r5, #0]

				// Remove character from tty
				print("\b \b");
    7ea6:	f000 f863 	bl	7f70 <_print>
    7eaa:	e75b      	b.n	7d64 <CLI_process+0x90>

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    7eac:	2200      	movs	r2, #0

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    7eae:	eb08 0004 	add.w	r0, r8, r4

			// Buffer reset
			prev_buf_pos++;
    7eb2:	3401      	adds	r4, #1

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    7eb4:	f808 2003 	strb.w	r2, [r8, r3]

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );

			// Buffer reset
			prev_buf_pos++;
    7eb8:	b2e4      	uxtb	r4, r4
		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    7eba:	f7fe fb7d 	bl	65b8 <Output_putstr>

			// Buffer reset
			prev_buf_pos++;

			break;
    7ebe:	e751      	b.n	7d64 <CLI_process+0x90>
    7ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ec4:	1fff9800 	.word	0x1fff9800
    7ec8:	1fff9744 	.word	0x1fff9744
    7ecc:	0000c0ef 	.word	0x0000c0ef
    7ed0:	0000c394 	.word	0x0000c394
    7ed4:	1fff9358 	.word	0x1fff9358
    7ed8:	0000c3eb 	.word	0x0000c3eb
    7edc:	0000c3f1 	.word	0x0000c3f1
    7ee0:	00008952 	.word	0x00008952
    7ee4:	0000c3f6 	.word	0x0000c3f6
    7ee8:	0000c380 	.word	0x0000c380
    7eec:	0000c386 	.word	0x0000c386
    7ef0:	1fff97d4 	.word	0x1fff97d4
    7ef4:	1fff97a9 	.word	0x1fff97a9
    7ef8:	1fff9359 	.word	0x1fff9359
    7efc:	1fff935c 	.word	0x1fff935c
    7f00:	0000c3fa 	.word	0x0000c3fa

00007f04 <init_errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Enable pin
	GPIOA_PDDR |= (1<<5);
    7f04:	4a04      	ldr	r2, [pc, #16]	; (7f18 <init_errorLED+0x14>)
    7f06:	6813      	ldr	r3, [r2, #0]
    7f08:	f043 0320 	orr.w	r3, r3, #32
    7f0c:	6013      	str	r3, [r2, #0]

	// Setup pin - A5 - See Lib/pin_map.mchck for more details on pins
	PORTA_PCR5 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    7f0e:	4b03      	ldr	r3, [pc, #12]	; (7f1c <init_errorLED+0x18>)
    7f10:	f44f 72a2 	mov.w	r2, #324	; 0x144
    7f14:	601a      	str	r2, [r3, #0]
    7f16:	4770      	bx	lr
    7f18:	400ff014 	.word	0x400ff014
    7f1c:	40049014 	.word	0x40049014

00007f20 <errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Error LED On (A5)
	if ( on ) {
    7f20:	b108      	cbz	r0, 7f26 <errorLED+0x6>
		GPIOA_PSOR |= (1<<5);
    7f22:	4a04      	ldr	r2, [pc, #16]	; (7f34 <errorLED+0x14>)
    7f24:	e000      	b.n	7f28 <errorLED+0x8>
	}
	// Error LED Off
	else {
		GPIOA_PCOR |= (1<<5);
    7f26:	4a04      	ldr	r2, [pc, #16]	; (7f38 <errorLED+0x18>)
    7f28:	6813      	ldr	r3, [r2, #0]
    7f2a:	f043 0320 	orr.w	r3, r3, #32
    7f2e:	6013      	str	r3, [r2, #0]
    7f30:	4770      	bx	lr
    7f32:	bf00      	nop
    7f34:	400ff004 	.word	0x400ff004
    7f38:	400ff008 	.word	0x400ff008

00007f3c <printstrs>:

// ----- Functions -----

// Multiple string Output
void printstrs( char* first, ... )
{
    7f3c:	b40f      	push	{r0, r1, r2, r3}
    7f3e:	b507      	push	{r0, r1, r2, lr}
    7f40:	ab04      	add	r3, sp, #16
    7f42:	f853 0b04 	ldr.w	r0, [r3], #4
	// Initialize the variadic function parameter list
	va_list ap;

	// Get the first parameter
	va_start( ap, first );
    7f46:	9301      	str	r3, [sp, #4]
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    7f48:	7803      	ldrb	r3, [r0, #0]
    7f4a:	b133      	cbz	r3, 7f5a <printstrs+0x1e>
	{
		// Print out the given string
		Output_putstr( cur );
    7f4c:	f7fe fb34 	bl	65b8 <Output_putstr>

		// Get the next argument ready
		cur = va_arg( ap, char* );
    7f50:	9b01      	ldr	r3, [sp, #4]
    7f52:	1d1a      	adds	r2, r3, #4
    7f54:	9201      	str	r2, [sp, #4]
    7f56:	6818      	ldr	r0, [r3, #0]
    7f58:	e7f6      	b.n	7f48 <printstrs+0xc>
	// Get the first parameter
	va_start( ap, first );
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    7f5a:	7843      	ldrb	r3, [r0, #1]
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d1f5      	bne.n	7f4c <printstrs+0x10>
    7f60:	7883      	ldrb	r3, [r0, #2]
    7f62:	2b00      	cmp	r3, #0
    7f64:	d1f2      	bne.n	7f4c <printstrs+0x10>
		// Get the next argument ready
		cur = va_arg( ap, char* );
	}

	va_end( ap ); // Not required, but good practice
}
    7f66:	b003      	add	sp, #12
    7f68:	f85d eb04 	ldr.w	lr, [sp], #4
    7f6c:	b004      	add	sp, #16
    7f6e:	4770      	bx	lr

00007f70 <_print>:
	while ( ( c = pgm_read_byte( s++ ) ) != '\0' )
	{
		Output_putchar( c );
	}
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	Output_putstr( (char*)s );
    7f70:	f7fe bb22 	b.w	65b8 <Output_putstr>

00007f74 <lenStr>:
	}
}


uint16_t lenStr( char* in )
{
    7f74:	4603      	mov	r3, r0
	// Iterator
	char *pos;

	// Loop until null is found
	for ( pos = in; *pos; pos++ );
    7f76:	781a      	ldrb	r2, [r3, #0]
    7f78:	1c59      	adds	r1, r3, #1
    7f7a:	b10a      	cbz	r2, 7f80 <lenStr+0xc>
    7f7c:	460b      	mov	r3, r1
    7f7e:	e7fa      	b.n	7f76 <lenStr+0x2>

	// Return the difference between the pointers of in and pos (which is the string length)
	return (pos - in);
    7f80:	1a18      	subs	r0, r3, r0
}
    7f82:	b280      	uxth	r0, r0
    7f84:	4770      	bx	lr

00007f86 <revsStr>:
	}
}


void revsStr( char* in )
{
    7f86:	b510      	push	{r4, lr}
    7f88:	4604      	mov	r4, r0

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    7f8a:	f7ff fff3 	bl	7f74 <lenStr>
    7f8e:	2300      	movs	r3, #0
    7f90:	3801      	subs	r0, #1
    7f92:	4283      	cmp	r3, r0
    7f94:	da06      	bge.n	7fa4 <revsStr+0x1e>
	{
		c = in[i];
    7f96:	5ce2      	ldrb	r2, [r4, r3]
		in[i] = in[j];
    7f98:	5c21      	ldrb	r1, [r4, r0]
    7f9a:	54e1      	strb	r1, [r4, r3]
		in[j] = c;
    7f9c:	5422      	strb	r2, [r4, r0]

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    7f9e:	3301      	adds	r3, #1
    7fa0:	3801      	subs	r0, #1
    7fa2:	e7f6      	b.n	7f92 <revsStr+0xc>
	{
		c = in[i];
		in[i] = in[j];
		in[j] = c;
	}
}
    7fa4:	bd10      	pop	{r4, pc}

00007fa6 <int8ToStr>:



// String Functions
void int8ToStr( uint8_t in, char* out )
{
    7fa6:	b430      	push	{r4, r5}
    7fa8:	4603      	mov	r3, r0
	// Position and sign containers
	uint8_t pos;
	pos = 0;
    7faa:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7fac:	240a      	movs	r4, #10
    7fae:	fbb3 f0f4 	udiv	r0, r3, r4
    7fb2:	fb04 3310 	mls	r3, r4, r0, r3
    7fb6:	3330      	adds	r3, #48	; 0x30
    7fb8:	548b      	strb	r3, [r1, r2]
    7fba:	1c55      	adds	r5, r2, #1
	}
	while ( (in /= 10) > 0 );
    7fbc:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7fc0:	b2ea      	uxtb	r2, r5
	}
	while ( (in /= 10) > 0 );
    7fc2:	d1f4      	bne.n	7fae <int8ToStr+0x8>

	// Append null
	out[pos] = '\0';
    7fc4:	548b      	strb	r3, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
    7fc6:	4608      	mov	r0, r1
}
    7fc8:	bc30      	pop	{r4, r5}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7fca:	f7ff bfdc 	b.w	7f86 <revsStr>

00007fce <printInt8>:



// Number Printing Functions
void printInt8( uint8_t in )
{
    7fce:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 3 + 1 for null
	char tmpStr[4];

	// Convert number
	int8ToStr( in, tmpStr );
    7fd0:	a901      	add	r1, sp, #4
    7fd2:	f7ff ffe8 	bl	7fa6 <int8ToStr>

	// Print number
	dPrintStr( tmpStr );
    7fd6:	a801      	add	r0, sp, #4
    7fd8:	f7fe faee 	bl	65b8 <Output_putstr>
}
    7fdc:	b003      	add	sp, #12
    7fde:	f85d fb04 	ldr.w	pc, [sp], #4

00007fe2 <int16ToStr>:
	revsStr(out);
}


void int16ToStr( uint16_t in, char* out )
{
    7fe2:	b430      	push	{r4, r5}
    7fe4:	4603      	mov	r3, r0
	// Position and sign containers
	uint16_t pos;
	pos = 0;
    7fe6:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7fe8:	240a      	movs	r4, #10
    7fea:	fbb3 f0f4 	udiv	r0, r3, r4
    7fee:	fb04 3310 	mls	r3, r4, r0, r3
    7ff2:	3330      	adds	r3, #48	; 0x30
    7ff4:	548b      	strb	r3, [r1, r2]
    7ff6:	1c55      	adds	r5, r2, #1
	}
	while ( (in /= 10) > 0 );
    7ff8:	b283      	uxth	r3, r0
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7ffa:	b2aa      	uxth	r2, r5
	}
	while ( (in /= 10) > 0 );
    7ffc:	2b00      	cmp	r3, #0
    7ffe:	d1f4      	bne.n	7fea <int16ToStr+0x8>

	// Append null
	out[pos] = '\0';
    8000:	548b      	strb	r3, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
    8002:	4608      	mov	r0, r1
}
    8004:	bc30      	pop	{r4, r5}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    8006:	f7ff bfbe 	b.w	7f86 <revsStr>

0000800a <printInt16>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt16( uint16_t in )
{
    800a:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 5 + 1 for null
	char tmpStr[6];

	// Convert number
	int16ToStr( in, tmpStr );
    800c:	4669      	mov	r1, sp
    800e:	f7ff ffe8 	bl	7fe2 <int16ToStr>

	// Print number
	dPrintStr( tmpStr );
    8012:	4668      	mov	r0, sp
    8014:	f7fe fad0 	bl	65b8 <Output_putstr>
}
    8018:	b003      	add	sp, #12
    801a:	f85d fb04 	ldr.w	pc, [sp], #4

0000801e <int32ToStr>:
	revsStr(out);
}


void int32ToStr( uint32_t in, char* out )
{
    801e:	b430      	push	{r4, r5}
    8020:	4603      	mov	r3, r0
    8022:	1e4c      	subs	r4, r1, #1
	// Position and sign containers
	uint32_t pos;
	pos = 0;
    8024:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    8026:	250a      	movs	r5, #10
    8028:	fbb3 f0f5 	udiv	r0, r3, r5
    802c:	fb05 3310 	mls	r3, r5, r0, r3
    8030:	3330      	adds	r3, #48	; 0x30
    8032:	f804 3f01 	strb.w	r3, [r4, #1]!
    8036:	3201      	adds	r2, #1
	}
	while ( (in /= 10) > 0 );
    8038:	4603      	mov	r3, r0
    803a:	2800      	cmp	r0, #0
    803c:	d1f4      	bne.n	8028 <int32ToStr+0xa>

	// Append null
	out[pos] = '\0';
    803e:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    8040:	bc30      	pop	{r4, r5}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    8042:	4608      	mov	r0, r1
    8044:	f7ff bf9f 	b.w	7f86 <revsStr>

00008048 <printInt32>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt32( uint32_t in )
{
    8048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Max number of characters is 10 + 1 for null
	char tmpStr[11];

	// Convert number
	int32ToStr( in, tmpStr );
    804a:	a901      	add	r1, sp, #4
    804c:	f7ff ffe7 	bl	801e <int32ToStr>

	// Print number
	dPrintStr( tmpStr );
    8050:	a801      	add	r0, sp, #4
    8052:	f7fe fab1 	bl	65b8 <Output_putstr>
}
    8056:	b005      	add	sp, #20
    8058:	f85d fb04 	ldr.w	pc, [sp], #4

0000805c <hexToStr_op>:
	revsStr(out);
}


void hexToStr_op( uint16_t in, char* out, uint8_t op )
{
    805c:	b470      	push	{r4, r5, r6}
	// Position container
	uint16_t pos = 0;
    805e:	2400      	movs	r4, #0

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
    8060:	f000 050f 	and.w	r5, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    8064:	2d0a      	cmp	r5, #10
    8066:	bf34      	ite	cc
    8068:	2630      	movcc	r6, #48	; 0x30
    806a:	2637      	movcs	r6, #55	; 0x37
    806c:	1c63      	adds	r3, r4, #1
    806e:	4435      	add	r5, r6
	}
	while ( (in /= 16) > 0 );
    8070:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    8072:	b29b      	uxth	r3, r3
    8074:	550d      	strb	r5, [r1, r4]
	}
	while ( (in /= 16) > 0 );
    8076:	d001      	beq.n	807c <hexToStr_op+0x20>

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    8078:	461c      	mov	r4, r3
    807a:	e7f1      	b.n	8060 <hexToStr_op+0x4>
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    807c:	2a02      	cmp	r2, #2
    807e:	d00c      	beq.n	809a <hexToStr_op+0x3e>
    8080:	2a04      	cmp	r2, #4
    8082:	d00a      	beq.n	809a <hexToStr_op+0x3e>
    8084:	2a01      	cmp	r2, #1
    8086:	d110      	bne.n	80aa <hexToStr_op+0x4e>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    8088:	2278      	movs	r2, #120	; 0x78
    808a:	54ca      	strb	r2, [r1, r3]
		out[pos++] = '0';
    808c:	1ce3      	adds	r3, r4, #3
    808e:	3402      	adds	r4, #2
    8090:	b2a4      	uxth	r4, r4
    8092:	2230      	movs	r2, #48	; 0x30
    8094:	b29b      	uxth	r3, r3
    8096:	550a      	strb	r2, [r1, r4]
		break;
    8098:	e007      	b.n	80aa <hexToStr_op+0x4e>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    809a:	b292      	uxth	r2, r2
			out[pos++] = '0';
    809c:	2030      	movs	r0, #48	; 0x30
		out[pos++] = 'x';
		out[pos++] = '0';
		break;
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    809e:	4293      	cmp	r3, r2
    80a0:	d203      	bcs.n	80aa <hexToStr_op+0x4e>
			out[pos++] = '0';
    80a2:	1c5c      	adds	r4, r3, #1
    80a4:	54c8      	strb	r0, [r1, r3]
    80a6:	b2a3      	uxth	r3, r4
    80a8:	e7f9      	b.n	809e <hexToStr_op+0x42>
		break;
	}

	// Append null
	out[pos] = '\0';
    80aa:	2200      	movs	r2, #0
    80ac:	54ca      	strb	r2, [r1, r3]

	// Reverse the string to the correct order
	revsStr(out);
    80ae:	4608      	mov	r0, r1
}
    80b0:	bc70      	pop	{r4, r5, r6}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    80b2:	f7ff bf68 	b.w	7f86 <revsStr>

000080b6 <printHex_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex_op( uint16_t in, uint8_t op )
{
    80b6:	b507      	push	{r0, r1, r2, lr}
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hexToStr_op( in, tmpStr, op );
    80b8:	460a      	mov	r2, r1
    80ba:	4669      	mov	r1, sp
    80bc:	f7ff ffce 	bl	805c <hexToStr_op>

	// Print number
	dPrintStr( tmpStr );
    80c0:	4668      	mov	r0, sp
    80c2:	f7fe fa79 	bl	65b8 <Output_putstr>
}
    80c6:	b003      	add	sp, #12
    80c8:	f85d fb04 	ldr.w	pc, [sp], #4

000080cc <hex32ToStr_op>:
	revsStr(out);
}


void hex32ToStr_op( uint32_t in, char* out, uint8_t op )
{
    80cc:	b4f0      	push	{r4, r5, r6, r7}
    80ce:	1e4e      	subs	r6, r1, #1
	// Position container
	uint32_t pos = 0;
    80d0:	2400      	movs	r4, #0

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
    80d2:	f000 050f 	and.w	r5, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    80d6:	2d0a      	cmp	r5, #10
    80d8:	bf34      	ite	cc
    80da:	2730      	movcc	r7, #48	; 0x30
    80dc:	2737      	movcs	r7, #55	; 0x37
    80de:	443d      	add	r5, r7
	}
	while ( (in /= 16) > 0 );
    80e0:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    80e2:	f104 0301 	add.w	r3, r4, #1
    80e6:	f806 5f01 	strb.w	r5, [r6, #1]!
	}
	while ( (in /= 16) > 0 );
    80ea:	d001      	beq.n	80f0 <hex32ToStr_op+0x24>

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    80ec:	461c      	mov	r4, r3
    80ee:	e7f0      	b.n	80d2 <hex32ToStr_op+0x6>
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    80f0:	1e50      	subs	r0, r2, #1
    80f2:	2807      	cmp	r0, #7
    80f4:	d815      	bhi.n	8122 <hex32ToStr_op+0x56>
    80f6:	e8df f000 	tbb	[pc, r0]
    80fa:	0407      	.short	0x0407
    80fc:	14140414 	.word	0x14140414
    8100:	0414      	.short	0x0414
    8102:	18c8      	adds	r0, r1, r3
		break;
	case 2: //  8-bit padding
	case 4: // 16-bit padding
	case 8: // 32-bit padding
		while ( pos < op )
			out[pos++] = '0';
    8104:	2430      	movs	r4, #48	; 0x30
    8106:	e006      	b.n	8116 <hex32ToStr_op+0x4a>

	// Output formatting options
	switch ( op )
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    8108:	2278      	movs	r2, #120	; 0x78
    810a:	54ca      	strb	r2, [r1, r3]
		out[pos++] = '0';
    810c:	1ce3      	adds	r3, r4, #3
    810e:	440c      	add	r4, r1
    8110:	2230      	movs	r2, #48	; 0x30
    8112:	70a2      	strb	r2, [r4, #2]
		break;
    8114:	e005      	b.n	8122 <hex32ToStr_op+0x56>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
	case 8: // 32-bit padding
		while ( pos < op )
    8116:	4293      	cmp	r3, r2
    8118:	d203      	bcs.n	8122 <hex32ToStr_op+0x56>
			out[pos++] = '0';
    811a:	3301      	adds	r3, #1
    811c:	f800 4b01 	strb.w	r4, [r0], #1
    8120:	e7f9      	b.n	8116 <hex32ToStr_op+0x4a>
		break;
	}

	// Append null
	out[pos] = '\0';
    8122:	2200      	movs	r2, #0
    8124:	54ca      	strb	r2, [r1, r3]

	// Reverse the string to the correct order
	revsStr(out);
    8126:	4608      	mov	r0, r1
}
    8128:	bcf0      	pop	{r4, r5, r6, r7}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    812a:	f7ff bf2c 	b.w	7f86 <revsStr>

0000812e <printHex32_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex32_op( uint32_t in, uint8_t op )
{
    812e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[11];

	// Convert number
	hex32ToStr_op( in, tmpStr, op );
    8130:	460a      	mov	r2, r1
    8132:	a901      	add	r1, sp, #4
    8134:	f7ff ffca 	bl	80cc <hex32ToStr_op>

	// Print number
	dPrintStr( tmpStr );
    8138:	a801      	add	r0, sp, #4
    813a:	f7fe fa3d 	bl	65b8 <Output_putstr>
}
    813e:	b005      	add	sp, #20
    8140:	f85d fb04 	ldr.w	pc, [sp], #4

00008144 <hex32ToStr16>:


// Converts a number to UTF-16LE
// Useful for fields in the USB Descriptor
void hex32ToStr16( uint32_t in, uint16_t* out, uint8_t op )
{
    8144:	b530      	push	{r4, r5, lr}
    8146:	b085      	sub	sp, #20
	// Convert number to ASCII
	char tmpStr[11];
	hex32ToStr_op( in, tmpStr, op );
    8148:	ad01      	add	r5, sp, #4


// Converts a number to UTF-16LE
// Useful for fields in the USB Descriptor
void hex32ToStr16( uint32_t in, uint16_t* out, uint8_t op )
{
    814a:	460c      	mov	r4, r1
	// Convert number to ASCII
	char tmpStr[11];
	hex32ToStr_op( in, tmpStr, op );
    814c:	4629      	mov	r1, r5
    814e:	f7ff ffbd 	bl	80cc <hex32ToStr_op>
    8152:	4621      	mov	r1, r4
    8154:	2300      	movs	r3, #0
	// Just add an extra NULL after every character
	for ( uint8_t byte = 0; byte < sizeof( tmpStr ); byte++ )
	{
		// Don't copy the character if NULL and the current is not NULL
		// Just stop
		if ( tmpStr[byte] == '\0' && out[byte] != 0x0000 )
    8156:	5cea      	ldrb	r2, [r5, r3]
    8158:	b90a      	cbnz	r2, 815e <hex32ToStr16+0x1a>
    815a:	8808      	ldrh	r0, [r1, #0]
    815c:	b920      	cbnz	r0, 8168 <hex32ToStr16+0x24>
    815e:	3301      	adds	r3, #1
	char tmpStr[11];
	hex32ToStr_op( in, tmpStr, op );

	// Convert number to UTF-16LE
	// Just add an extra NULL after every character
	for ( uint8_t byte = 0; byte < sizeof( tmpStr ); byte++ )
    8160:	2b0b      	cmp	r3, #11
		if ( tmpStr[byte] == '\0' && out[byte] != 0x0000 )
		{
			break;
		}

		out[byte] = tmpStr[byte] | 0x0000;
    8162:	f821 2b02 	strh.w	r2, [r1], #2
	char tmpStr[11];
	hex32ToStr_op( in, tmpStr, op );

	// Convert number to UTF-16LE
	// Just add an extra NULL after every character
	for ( uint8_t byte = 0; byte < sizeof( tmpStr ); byte++ )
    8166:	d1f6      	bne.n	8156 <hex32ToStr16+0x12>
			break;
		}

		out[byte] = tmpStr[byte] | 0x0000;
	}
}
    8168:	b005      	add	sp, #20
    816a:	bd30      	pop	{r4, r5, pc}

0000816c <eqStr>:
	return (pos - in);
}


int16_t eqStr( char* str1, char* str2 )
{
    816c:	b510      	push	{r4, lr}
    816e:	4603      	mov	r3, r0
	// Scan each string for NULLs and whether they are the same
	while( *str1 != '\0' && *str1++ == *str2++ );
    8170:	f810 2b01 	ldrb.w	r2, [r0], #1
    8174:	b122      	cbz	r2, 8180 <eqStr+0x14>
    8176:	f811 4b01 	ldrb.w	r4, [r1], #1
    817a:	4294      	cmp	r4, r2
    817c:	4603      	mov	r3, r0
    817e:	d0f6      	beq.n	816e <eqStr+0x2>

	// If the strings are still identical (i.e. both NULL), then return -1, otherwise current *str1
	// If *str1 is 0, then str1 ended (and str1 is "like" str2), otherwise strings are different
	return *--str1 == *--str2 ? -1 : *++str1;
    8180:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    8184:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    8188:	4290      	cmp	r0, r2
    818a:	bf14      	ite	ne
    818c:	7818      	ldrbne	r0, [r3, #0]
    818e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
}
    8192:	bd10      	pop	{r4, pc}

00008194 <numToInt>:

int numToInt( char* in )
{
    8194:	b570      	push	{r4, r5, r6, lr}
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16
    8196:	220a      	movs	r2, #10
    8198:	4604      	mov	r4, r0
	// Pointers to the LSD (Least Significant Digit) and MSD
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
    819a:	2501      	movs	r5, #1
    819c:	4621      	mov	r1, r4
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
    819e:	f814 3b01 	ldrb.w	r3, [r4], #1
    81a2:	b193      	cbz	r3, 81ca <numToInt+0x36>
	{
		// Check for positive/negative
		switch ( *lsd++ )
    81a4:	2b2b      	cmp	r3, #43	; 0x2b
    81a6:	4621      	mov	r1, r4
    81a8:	d00d      	beq.n	81c6 <numToInt+0x32>
    81aa:	d802      	bhi.n	81b2 <numToInt+0x1e>
    81ac:	2b20      	cmp	r3, #32
    81ae:	d00a      	beq.n	81c6 <numToInt+0x32>
    81b0:	e008      	b.n	81c4 <numToInt+0x30>
    81b2:	2b2d      	cmp	r3, #45	; 0x2d
    81b4:	d003      	beq.n	81be <numToInt+0x2a>
    81b6:	2b78      	cmp	r3, #120	; 0x78
    81b8:	d104      	bne.n	81c4 <numToInt+0x30>
		case '+':
		case ' ':
			msd = lsd;
			break;
		case 'x': // Hex Mode
			base = 0x10;
    81ba:	2210      	movs	r2, #16
			msd = lsd;
			break;
    81bc:	e003      	b.n	81c6 <numToInt+0x32>
		// Check for positive/negative
		switch ( *lsd++ )
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    81be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    81c2:	e000      	b.n	81c6 <numToInt+0x32>

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
	{
		// Check for positive/negative
		switch ( *lsd++ )
    81c4:	4601      	mov	r1, r0
		case '+':
		case ' ':
			msd = lsd;
			break;
		case 'x': // Hex Mode
			base = 0x10;
    81c6:	4608      	mov	r0, r1
    81c8:	e7e8      	b.n	819c <numToInt+0x8>
			break;
		}
	}

	// Process string depending on which base
	switch ( base )
    81ca:	2a0a      	cmp	r2, #10
    81cc:	d003      	beq.n	81d6 <numToInt+0x42>
    81ce:	2a10      	cmp	r2, #16
    81d0:	d11e      	bne.n	8210 <numToInt+0x7c>
    81d2:	2401      	movs	r4, #1
    81d4:	e011      	b.n	81fa <numToInt+0x66>
    81d6:	2401      	movs	r4, #1
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    81d8:	4281      	cmp	r1, r0
    81da:	d919      	bls.n	8210 <numToInt+0x7c>
			total += ( (*--lsd) - '0' ) * digit;
    81dc:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    81e0:	3e30      	subs	r6, #48	; 0x30
    81e2:	fb04 3306 	mla	r3, r4, r6, r3
	// Process string depending on which base
	switch ( base )
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    81e6:	4354      	muls	r4, r2
    81e8:	e7f6      	b.n	81d8 <numToInt+0x44>

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
    81ea:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    81ee:	2a39      	cmp	r2, #57	; 0x39
    81f0:	d806      	bhi.n	8200 <numToInt+0x6c>
    81f2:	3a30      	subs	r2, #48	; 0x30
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    81f4:	fb04 3302 	mla	r3, r4, r2, r3
			total += ( (*--lsd) - '0' ) * digit;
		break;

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
    81f8:	0124      	lsls	r4, r4, #4
    81fa:	4281      	cmp	r1, r0
    81fc:	d8f5      	bhi.n	81ea <numToInt+0x56>
    81fe:	e007      	b.n	8210 <numToInt+0x7c>
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
    8200:	2a46      	cmp	r2, #70	; 0x46
    8202:	d801      	bhi.n	8208 <numToInt+0x74>
    8204:	3a37      	subs	r2, #55	; 0x37
    8206:	e7f5      	b.n	81f4 <numToInt+0x60>
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    8208:	2a66      	cmp	r2, #102	; 0x66
    820a:	d8f5      	bhi.n	81f8 <numToInt+0x64>
    820c:	3a57      	subs	r2, #87	; 0x57
    820e:	e7f1      	b.n	81f4 <numToInt+0x60>
		break;
	}

	// Propagate sign and return
	return total * sign;
}
    8210:	fb05 f003 	mul.w	r0, r5, r3
    8214:	bd70      	pop	{r4, r5, r6, pc}
    8216:	4d4e      	.short	0x4d4e
    8218:	0a0d2149 	.word	0x0a0d2149
    821c:	72614800 	.word	0x72614800
    8220:	61462064 	.word	0x61462064
    8224:	21746c75 	.word	0x21746c75
    8228:	42435320 	.word	0x42435320
    822c:	5346485f 	.word	0x5346485f
    8230:	00203a52 	.word	0x00203a52
    8234:	6f6d654d 	.word	0x6f6d654d
    8238:	4d207972 	.word	0x4d207972
    823c:	67616e61 	.word	0x67616e61
    8240:	46207265 	.word	0x46207265
    8244:	746c7561 	.word	0x746c7561
    8248:	43532021 	.word	0x43532021
    824c:	46435f42 	.word	0x46435f42
    8250:	203a5253 	.word	0x203a5253
    8254:	43532000 	.word	0x43532000
    8258:	4d4d5f42 	.word	0x4d4d5f42
    825c:	203a5241 	.word	0x203a5241
    8260:	73754200 	.word	0x73754200
    8264:	75614620 	.word	0x75614620
    8268:	2021746c 	.word	0x2021746c
    826c:	5f424353 	.word	0x5f424353
    8270:	52534643 	.word	0x52534643
    8274:	2000203a 	.word	0x2000203a
    8278:	5f424353 	.word	0x5f424353
    827c:	52414642 	.word	0x52414642
    8280:	5500203a 	.word	0x5500203a
    8284:	65676173 	.word	0x65676173
    8288:	75614620 	.word	0x75614620
    828c:	2021746c 	.word	0x2021746c
    8290:	5f424353 	.word	0x5f424353
    8294:	52534643 	.word	0x52534643
    8298:	203a      	.short	0x203a
    829a:	00          	.byte	0x00

0000829b <sys_reset_to_loader_magic>:
    829b:	ff 00 7f 52 45 53 45 54 20 54 4f 20 4c 4f 41 44     ...RESET TO LOAD
    82ab:	45 52 7f 00 ff 00 e8 fd 00                          ER.......

000082b4 <ledWPageCLIDict_DescEntry>:
    82b4:	57 72 69 74 65 20 74 6f 20 67 69 76 65 6e 20 72     Write to given r
    82c4:	65 67 69 73 74 65 72 20 70 61 67 65 20 73 74 61     egister page sta
    82d4:	72 74 69 6e 67 20 61 74 20 61 64 64 72 65 73 73     rting at address
    82e4:	2e 20 69 2e 65 2e 20 30 78 32 20 30 78 32 34 20     . i.e. 0x2 0x24 
    82f4:	30 78 46 30 20 30 78 31 32 00                       0xF0 0x12.

000082fe <ledTestCLIDict_DescEntry>:
    82fe:	54 65 73 74 20 6f 75 74 20 74 68 65 20 6c 65 64     Test out the led
    830e:	20 70 61 67 65 73 2e 00 00 00                        pages....

00008318 <ledCLIDict>:
    8318:	69 85 00 00 a2 86 00 00 9d 2c 00 00 71 85 00 00     i........,..q...
    8328:	1b 87 00 00 15 2c 00 00 79 85 00 00 ac 85 00 00     .....,..y.......
    8338:	91 2e 00 00 81 85 00 00 84 83 00 00 e9 2b 00 00     .............+..
    8348:	8a 85 00 00 a2 83 00 00 1d 2b 00 00 93 85 00 00     .........+......
    8358:	fe 82 00 00 ed 29 00 00 9b 85 00 00 b4 82 00 00     .....)..........
    8368:	25 2d 00 00 a4 85 00 00 71 86 00 00 8d 29 00 00     %-......q....)..
    8378:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

00008384 <ledRPageCLIDict_DescEntry>:
    8384:	52 65 61 64 20 74 68 65 20 67 69 76 65 6e 20 72     Read the given r
    8394:	65 67 69 73 74 65 72 20 70 61 67 65 2e 00           egister page..

000083a2 <ledStartCLIDict_DescEntry>:
    83a2:	44 69 73 61 62 6c 65 20 73 6f 66 74 77 61 72 65     Disable software
    83b2:	20 73 68 75 74 64 6f 77 6e 2e 00 1b 5b 31 3b 33      shutdown...[1;3
    83c2:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 44 41     5mDEBUG.[0m - DA
    83d2:	54 41 3a 20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e     TA: ..[1;33mWARN
    83e2:	49 4e 47 1b 5b 30 6d 20 2d 20 49 32 43 5f 42 75     ING.[0m - I2C_Bu
    83f2:	66 66 65 72 50 75 73 68 20 66 61 69 6c 65 64 2c     fferPush failed,
    8402:	20 62 75 66 66 65 72 20 66 75 6c 6c 3a 20 00 1b      buffer full: ..
    8412:	5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30     [1;5;31mERROR.[0
    8422:	6d 20 2d 20 4e 6f 20 62 75 66 66 65 72 20 74 6f     m - No buffer to
    8432:	20 70 6f 70 20 61 6e 20 65 6e 74 72 79 20 66 72      pop an entry fr
    8442:	6f 6d 2e 2e 2e 20 00 1b 5b 31 3b 35 3b 33 31 6d     om... ..[1;5;31m
    8452:	45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 32 43 20     ERROR.[0m - I2C 
    8462:	4e 41 4b 20 64 65 74 65 63 74 65 64 2e 2e 2e 0d     NAK detected....
    8472:	0a 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52     ...[1;5;31mERROR
    8482:	1b 5b 30 6d 20 2d 20 41 72 62 69 74 72 61 74 69     .[0m - Arbitrati
    8492:	6f 6e 20 6c 6f 73 74 2e 2e 2e 0d 0a 00 1b 5b 31     on lost.......[1
    84a2:	3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20     ;5;31mERROR.[0m 
    84b2:	2d 20 53 6c 61 76 65 20 41 64 64 72 65 73 73 20     - Slave Address 
    84c2:	49 32 43 20 4e 41 4b 20 64 65 74 65 63 74 65 64     I2C NAK detected
    84d2:	2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 35 6d 44 45 42     .......[1;35mDEB
    84e2:	55 47 1b 5b 30 6d 20 2d 20 41 74 74 65 6d 70 74     UG.[0m - Attempt
    84f2:	69 6e 67 20 74 6f 20 72 65 61 64 20 62 79 74 65     ing to read byte
    8502:	20 2d 20 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47      - ..[1;35mDEBUG
    8512:	1b 5b 30 6d 20 2d 20 4e 45 58 54 0d 0a 00 1b 5b     .[0m - NEXT....[
    8522:	31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20     1;32mINFO.[0m - 
    8532:	53 65 6e 64 69 6e 67 3a 20 00 7c 20 00 4c 45 44     Sending: .| .LED
    8542:	5f 63 6f 6e 74 72 6f 6c 5f 63 61 70 61 62 69 6c     _control_capabil
    8552:	69 74 79 28 6d 6f 64 65 2c 61 6d 6f 75 6e 74 2c     ity(mode,amount,
    8562:	69 6e 64 65 78 29 00 69 32 63 52 65 63 76 00 69     index).i2cRecv.i
    8572:	32 63 53 65 6e 64 00 6c 65 64 43 74 72 6c 00 6c     2cSend.ledCtrl.l
    8582:	65 64 52 50 61 67 65 00 6c 65 64 53 74 61 72 74     edRPage.ledStart
    8592:	00 6c 65 64 54 65 73 74 00 6c 65 64 57 50 61 67     .ledTest.ledWPag
    85a2:	65 00 6c 65 64 5a 65 72 6f 00                       e.ledZero.

000085ac <ledCtrlCLIDict_DescEntry>:
    85ac:	42 61 73 69 63 20 4c 45 44 20 63 6f 6e 74 72 6f     Basic LED contro
    85bc:	6c 2e 20 41 72 67 73 3a 20 3c 6d 6f 64 65 3e 20     l. Args: <mode> 
    85cc:	3c 61 6d 6f 75 6e 74 3e 20 5b 3c 69 6e 64 65 78     <amount> [<index
    85dc:	3e 5d 00                                            >].

000085df <LED_defaultBrightness1>:
    85df:	e8 24 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     .$..............
    85ef:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    85ff:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    860f:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    861f:	00 00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    862f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    863f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    864f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    865f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    866f:	00 00                                               ..

00008671 <ledZeroCLIDict_DescEntry>:
    8671:	5a 65 72 6f 20 6f 75 74 20 4c 45 44 20 72 65 67     Zero out LED reg
    8681:	69 73 74 65 72 20 70 61 67 65 73 20 28 6e 6f 6e     ister pages (non
    8691:	2d 63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 29 2e     -configuration).
    86a1:	00                                                  .

000086a2 <i2cRecvCLIDict_DescEntry>:
    86a2:	53 65 6e 64 20 49 32 43 20 73 65 71 75 65 6e 63     Send I2C sequenc
    86b2:	65 20 6f 66 20 62 79 74 65 73 20 61 6e 64 20 65     e of bytes and e
    86c2:	78 70 65 63 74 20 61 20 72 65 70 6c 79 20 6f 66     xpect a reply of
    86d2:	20 31 20 62 79 74 65 20 6f 6e 20 74 68 65 20 6c      1 byte on the l
    86e2:	61 73 74 20 73 65 71 75 65 6e 63 65 2e 0d 0a 09     ast sequence....
    86f2:	09 55 73 65 20 7c 27 73 20 74 6f 20 73 70 6c 69     .Use |'s to spli
    8702:	74 20 73 65 71 75 65 6e 63 65 73 20 77 69 74 68     t sequences with
    8712:	20 61 20 73 74 6f 70 2e 00                           a stop..

0000871b <i2cSendCLIDict_DescEntry>:
    871b:	53 65 6e 64 20 49 32 43 20 73 65 71 75 65 6e 63     Send I2C sequenc
    872b:	65 20 6f 66 20 62 79 74 65 73 2e 20 55 73 65 20     e of bytes. Use 
    873b:	7c 27 73 20 74 6f 20 73 70 6c 69 74 20 73 65 71     |'s to split seq
    874b:	75 65 6e 63 65 73 20 77 69 74 68 20 61 20 73 74     uences with a st
    875b:	6f 70 2e 00                                         op..

0000875f <LED_ledEnableMask1>:
    875f:	e8 00 ff 00 ff 00 ff 00 ff 00 3f 00 00 00 00 00     ..........?.....
    876f:	00 00 00 00                                         ....

00008773 <ledCLIDictName>:
    8773:	49 53 53 49 20 4c 45 44 20 4d 6f 64 75 6c 65 20     ISSI LED Module 
    8783:	43 6f 6d 6d 61 6e 64 73 00                          Commands.

0000878c <matrixCLIDict>:
    878c:	ed 89 00 00 bc 87 00 00 01 30 00 00 f9 89 00 00     .........0......
    879c:	aa 8a 00 00 89 2f 00 00 04 8a 00 00 10 8a 00 00     ...../..........
    87ac:	dd 2f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ./..............

000087bc <matrixDebugCLIDict_DescEntry>:
    87bc:	45 6e 61 62 6c 65 73 20 6d 61 74 72 69 78 20 64     Enables matrix d
    87cc:	65 62 75 67 20 6d 6f 64 65 2c 20 70 72 69 6e 74     ebug mode, print
    87dc:	73 20 6f 75 74 20 65 61 63 68 20 73 63 61 6e 20     s out each scan 
    87ec:	63 6f 64 65 2e 0d 0a 09 09 49 66 20 61 72 67 75     code.....If argu
    87fc:	6d 65 6e 74 20 1b 5b 33 35 6d 54 1b 5b 30 6d 20     ment .[35mT.[0m 
    880c:	69 73 20 67 69 76 65 6e 2c 20 70 72 69 6e 74 73     is given, prints
    881c:	20 6f 75 74 20 65 61 63 68 20 73 63 61 6e 20 63      out each scan c
    882c:	6f 64 65 20 73 74 61 74 65 20 74 72 61 6e 73 69     ode state transi
    883c:	74 69 6f 6e 2e 00 1b 5b 31 3b 33 32 6d 49 4e 46     tion...[1;32mINF
    884c:	4f 1b 5b 30 6d 20 2d 20 43 6f 6c 75 6d 6e 73 3a     O.[0m - Columns:
    885c:	20 20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b       ..[1;32mINFO.[
    886c:	30 6d 20 2d 20 52 6f 77 73 3a 20 20 20 20 20 00     0m - Rows:     .
    887c:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    888c:	2d 20 4d 61 78 20 4b 65 79 73 3a 20 00 1b 5b 31     - Max Keys: ..[1
    889c:	3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 4d     ;32mINFO.[0m - M
    88ac:	61 74 72 69 78 20 44 65 62 75 67 20 4d 6f 64 65     atrix Debug Mode
    88bc:	3a 20 00 1b 5b 31 6d 4f 1b 5b 30 6d 00 1b 5b 31     : ..[1mO.[0m..[1
    88cc:	3b 33 33 6d 50 1b 5b 30 6d 00 1b 5b 31 3b 33 32     ;33mP.[0m..[1;32
    88dc:	6d 48 1b 5b 30 6d 00 1b 5b 31 3b 33 35 6d 52 1b     mH.[0m..[1;35mR.
    88ec:	5b 30 6d 00 1b 5b 31 3b 33 31 6d 49 1b 5b 30 6d     [0m..[1;31mI.[0m
    88fc:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    890c:	5b 30 6d 20 2d 20 4d 61 74 72 69 78 20 73 63 61     [0m - Matrix sca
    891c:	6e 20 62 75 67 21 21 20 52 65 70 6f 72 74 20 6d     n bug!! Report m
    892c:	65 21 0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     e!....[1;32mINFO
    893c:	1b 5b 30 6d 20 2d 20 4d 61 78 20 73 63 61 6e 73     .[0m - Max scans
    894c:	3a 20 20 20 20 20 20 00 1b 5b 31 3b 33 32 6d 49     :      ..[1;32mI
    895c:	4e 46 4f 1b 5b 30 6d 20 2d 20 50 72 65 76 69 6f     NFO.[0m - Previo
    896c:	75 73 20 73 63 61 6e 73 3a 20 00 1b 5b 31 3b 33     us scans: ..[1;3
    897c:	32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 63 61     2mINFO.[0m - Sca
    898c:	6e 20 4e 75 6d 62 65 72 3a 20 20 20 20 00 3c 6b     n Number:    .<k
    899c:	65 79 3e 3a 3c 70 72 65 76 69 6f 75 73 20 73 74     ey>:<previous st
    89ac:	61 74 65 3e 3c 63 75 72 72 65 6e 74 20 73 74 61     ate><current sta
    89bc:	74 65 3e 20 3c 61 63 74 69 76 65 20 63 6f 75 6e     te> <active coun
    89cc:	74 3e 20 3c 69 6e 61 63 74 69 76 65 20 63 6f 75     t> <inactive cou
    89dc:	6e 74 3e 00 1b 5b 31 6d 30 78 00 3a 00 20 30 78     nt>..[1m0x.:. 0x
    89ec:	00 6d 61 74 72 69 78 44 65 62 75 67 00 6d 61 74     .matrixDebug.mat
    89fc:	72 69 78 49 6e 66 6f 00 6d 61 74 72 69 78 53 74     rixInfo.matrixSt
    8a0c:	61 74 65 00                                         ate.

00008a10 <matrixStateCLIDict_DescEntry>:
    8a10:	50 72 69 6e 74 73 20 6f 75 74 20 74 68 65 20 63     Prints out the c
    8a20:	75 72 72 65 6e 74 20 73 63 61 6e 20 74 61 62 6c     urrent scan tabl
    8a30:	65 20 4e 20 74 69 6d 65 73 2e 0d 0a 09 09 20 1b     e N times..... .
    8a40:	5b 31 6d 4f 1b 5b 30 6d 20 2d 20 4f 66 66 2c 20     [1mO.[0m - Off, 
    8a50:	1b 5b 31 3b 33 33 6d 50 1b 5b 30 6d 20 2d 20 50     .[1;33mP.[0m - P
    8a60:	72 65 73 73 2c 20 1b 5b 31 3b 33 32 6d 48 1b 5b     ress, .[1;32mH.[
    8a70:	30 6d 20 2d 20 48 6f 6c 64 2c 20 1b 5b 31 3b 33     0m - Hold, .[1;3
    8a80:	35 6d 52 1b 5b 30 6d 20 2d 20 52 65 6c 65 61 73     5mR.[0m - Releas
    8a90:	65 2c 20 1b 5b 31 3b 33 31 6d 49 1b 5b 30 6d 20     e, .[1;31mI.[0m 
    8aa0:	2d 20 49 6e 76 61 6c 69 64 00                       - Invalid.

00008aaa <matrixInfoCLIDict_DescEntry>:
    8aaa:	50 72 69 6e 74 20 69 6e 66 6f 20 61 62 6f 75 74     Print info about
    8aba:	20 74 68 65 20 63 6f 6e 66 69 67 75 72 65 64 20      the configured 
    8aca:	6d 61 74 72 69 78 2e 00                             matrix..

00008ad2 <matrixCLIDictName>:
    8ad2:	4d 61 74 72 69 78 20 4d 6f 64 75 6c 65 20 43 6f     Matrix Module Co
    8ae2:	6d 6d 61 6e 64 73 00 00 00 00 00 ff ff ff ff ff     mmands..........
    8af2:	ff 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff     .??????????????.
    8b02:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8b12:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    8b22:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8b32:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    8b42:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8b52:	ff fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff     ................
    8b62:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8b72:	00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00     ................
    8b82:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8b92:	00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00     ................
    8ba2:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8bb2:	00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00     ................
    8bc2:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8bd2:	00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00     ................
    8be2:	00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    8bf2:	ff 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     .???????????????
    8c02:	3f 3f 3f 3f 3f 00 00 00 00 00 00 ff ff ff ff ff     ?????...........
    8c12:	ff e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8c22:	e0 e0 e0 e0 e0 00 00 00 00 00 00 07 07 07 07 07     ................
    8c32:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 ff     ................
    8c42:	ff ff ff ff ff 00 00 00 00 00 00 fc fc fc fc fc     ................
    8c52:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff     ................
    8c62:	ff ff ff ff ff 00 00 00 00 00 00 3f 3f 3f 3f 3f     ...........?????
    8c72:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff     ???????????????.
    8c82:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8c92:	00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff     ................
    8ca2:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8cb2:	00 07 07 07 07 07 07 07 07 07 07 07 07 07 07 ff     ................
    8cc2:	ff ff ff ff ff 00 00 00 00 00 00 fc fc fc fc fc     ................
    8cd2:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff     ................
    8ce2:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8cf2:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    8d02:	ff ff ff ff ff 00 00 00 00 00 00 e0 e0 e0 e0 e0     ................
    8d12:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff     ................
    8d22:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8d32:	ff 07 07 07 07 07 07 07 07 07 07 07 07 07 07 ff     ................
    8d42:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8d52:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    8d62:	ff ff ff ff ff 00 00 00 00 00 00 3f 3f 3f 3f 3f     ...........?????
    8d72:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff     ???????????????.
    8d82:	ff ff ff ff ff 00 00 00 00 00 00 e0 e0 e0 e0 e0     ................
    8d92:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff     ................
    8da2:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8db2:	ff 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    8dc2:	07 07 07 07 07 00 00 00 00 00 00 ff ff ff ff ff     ................
    8dd2:	ff fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    8de2:	fc fc fc fc fc 00 00 00 00 00 00 ff ff ff ff ff     ................
    8df2:	ff 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff     .??????????????.
    8e02:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8e12:	ff e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff     ................
    8e22:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8e32:	ff 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    8e42:	07 07 07 07 07 00 00 00 00 00 00 ff ff ff ff ff     ................
    8e52:	ff fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    8e62:	fc fc fc fc fc 00 00 00 00 00 00 00 00 00 00 00     ................
    8e72:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    8e82:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8e92:	00 00 00 00 00 00 00 00 e0 e0 e0 e0 e0 e0 e0 ff     ................
    8ea2:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8eb2:	00 00 00 00 00 00 00 00 07 07 07 07 07 07 07 ff     ................
    8ec2:	ff ff ff ff ff 00 00 00 00 00 00 fc fc fc fc fc     ................
    8ed2:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff     ................
    8ee2:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8ef2:	ff 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff     .??????????????.
    8f02:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8f12:	ff e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff     ................
    8f22:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8f32:	ff 07 07 07 07 07 07 07 07 07 07 07 07 07 07 ff     ................
    8f42:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8f52:	ff fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff     ................
    8f62:	ff ff ff ff ff 00 00 00 00 00 00 3f 3f 3f 3f 3f     ...........?????
    8f72:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f ff     ???????????????.
    8f82:	ff ff ff ff ff 00 00 00 00 00 00 e0 e0 e0 e0 e0     ................
    8f92:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 ff     ................
    8fa2:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8fb2:	ff 07 07 07 07 07 07 07 07 07 07 07 07 07 07 ff     ................
    8fc2:	ff ff ff ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    8fd2:	ff fc fc fc fc fc fc fc fc fc fc fc fc fc fc ff     ................
    8fe2:	ff ff ff ff ff 00 00 00 39 b9 ea aa 8d 8d a8 a8     ........9.......
    8ff2:	27 27 a0 1f 4b 4b 8d 8d b5 34 00 00 42 82 f3 b3     ''..KK...4..B...
    9002:	f6 f6 a5 a5 49 49 b7 b7 5d 5d 45 85 fc bc f6 b6     ....II..]]E.....
    9012:	2d 2d c1 00 7e 7e 3c 3c 03 83 94 13 f9 b9 ca 09     --..~~<<........
    9022:	d3 12 84 84                                         ....

00009026 <lcdTestCLIDict_DescEntry>:
    9026:	54 65 73 74 20 6f 75 74 20 74 68 65 20 4c 43 44     Test out the LCD
    9036:	20 64 69 73 70 6c 61 79 2e 00                        display..

00009040 <lcdColorCLIDict_DescEntry>:
    9040:	53 65 74 20 62 61 63 6b 6c 69 67 68 74 20 63 6f     Set backlight co
    9050:	6c 6f 72 2e 20 33 20 31 36 2d 62 69 74 20 6e 75     lor. 3 16-bit nu
    9060:	6d 62 65 72 73 3a 20 52 20 47 20 42 2e 20 69 2e     mbers: R G B. i.
    9070:	65 2e 20 30 78 46 46 46 20 30 78 31 34 34 34 20     e. 0xFFF 0x1444 
    9080:	30 78 33 32 00                                      0x32.

00009085 <lcdCLIDictName>:
    9085:	53 54 20 4c 43 44 20 4d 6f 64 75 6c 65 20 43 6f     ST LCD Module Co
    9095:	6d 6d 61 6e 64 73 00                                mmands.

0000909c <lcdCLIDict>:
    909c:	9b 91 00 00 c3 91 00 00 79 36 00 00 a2 91 00 00     ........y6......
    90ac:	40 90 00 00 d5 34 00 00 ab 91 00 00 26 94 00 00     @....4......&...
    90bc:	bd 35 00 00 b3 91 00 00 07 94 00 00 ff 37 00 00     .5...........7..
    90cc:	bb 91 00 00 26 90 00 00 2d 37 00 00 00 00 00 00     ....&...-7......
    90dc:	00 00 00 00 00 00 00 00 4e 6f 20 61 72 67 73 20     ........No args 
    90ec:	70 72 6f 76 69 64 65 64 2e 00 1b 5b 31 3b 33 32     provided...[1;32
    90fc:	6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 65 6e 64     mINFO.[0m - Send
    910c:	69 6e 67 2d 20 00 1b 5b 31 3b 33 32 6d 49 4e 46     ing- ..[1;32mINF
    911c:	4f 1b 5b 30 6d 20 2d 20 53 65 6e 64 69 6e 67 20     O.[0m - Sending 
    912c:	57 49 54 48 20 41 30 20 46 4c 41 47 20 53 45 54     WITH A0 FLAG SET
    913c:	2d 20 00 4c 43 44 5f 6c 61 79 65 72 53 74 61 63     - .LCD_layerStac
    914c:	6b 45 78 61 63 74 5f 63 61 70 61 62 69 6c 69 74     kExact_capabilit
    915c:	79 28 6e 75 6d 2c 6c 61 79 65 72 31 2c 6c 61 79     y(num,layer1,lay
    916c:	65 72 32 2c 6c 61 79 65 72 33 2c 6c 61 79 65 72     er2,layer3,layer
    917c:	34 29 00 4c 43 44 5f 6c 61 79 65 72 53 74 61 63     4).LCD_layerStac
    918c:	6b 5f 63 61 70 61 62 69 6c 69 74 79 28 29 00 6c     k_capability().l
    919c:	63 64 43 6d 64 00 6c 63 64 43 6f 6c 6f 72 00 6c     cdCmd.lcdColor.l
    91ac:	63 64 44 69 73 70 00 6c 63 64 49 6e 69 74 00 6c     cdDisp.lcdInit.l
    91bc:	63 64 54 65 73 74 00                                cdTest.

000091c3 <lcdCmdCLIDict_DescEntry>:
    91c3:	53 65 6e 64 20 62 79 74 65 20 76 69 61 20 53 50     Send byte via SP
    91d3:	49 2c 20 73 65 63 6f 6e 64 20 61 72 67 75 6d 65     I, second argume
    91e3:	6e 74 20 65 6e 61 62 6c 65 73 20 61 30 2e 20 44     nt enables a0. D
    91f3:	65 66 61 75 6c 74 73 20 74 6f 20 63 6f 6e 74 72     efaults to contr
    9203:	6f 6c 2e 00                                         ol..

00009207 <STLcdDefaultImage>:
    9207:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9217:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9227:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    9237:	c0 c0 c0 c0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
    9247:	ff ff ff ff ff 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    9257:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    9267:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9277:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9287:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9297:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    92a7:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    92b7:	03 03 03 03 03 00 00 00 00 00 00 00 00 00 00 00     ................
    92c7:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    92d7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    92e7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    92f7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9307:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9317:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9327:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    9337:	c0 c0 c0 c0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
    9347:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    9357:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9367:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9377:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9387:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9397:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    93a7:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    93b7:	03 03 03 03 03 00 00 00 00 00 00 00 00 00 00 00     ................
    93c7:	ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    93d7:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    93e7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    93f7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00009407 <lcdInitCLIDict_DescEntry>:
    9407:	52 65 2d 69 6e 69 74 69 61 6c 69 7a 65 20 74 68     Re-initialize th
    9417:	65 20 4c 43 44 20 64 69 73 70 6c 61 79 2e 00        e LCD display..

00009426 <lcdDispCLIDict_DescEntry>:
    9426:	57 72 69 74 65 20 62 79 74 65 28 73 29 20 74 6f     Write byte(s) to
    9436:	20 67 69 76 65 6e 20 70 61 67 65 20 73 74 61 72      given page star
    9446:	74 69 6e 67 20 61 74 20 67 69 76 65 6e 20 61 64     ting at given ad
    9456:	64 72 65 73 73 2e 20 69 2e 65 2e 20 30 78 31 20     dress. i.e. 0x1 
    9466:	30 78 35 20 30 78 46 46 20 30 78 30 30 00 27 9a     0x5 0xFF 0x00.'.
    9476:	00 00 32 9a 00 00 3c 9a 00 00 4a 9a 00 00 53 9a     ..2...<...J...S.
    9486:	00 00 5c 9a 00 00 66 9a 00 00 77 9a 00 00 84 9a     ..\...f...w.....
    9496:	00 00 16 01 16 01 01 00 01 05 00 03 16 00           ..............

000094a4 <uartConnectCLIDict>:
    94a4:	90 9a 00 00 69 9b 00 00 f9 44 00 00 9b 9a 00 00     ....i....D......
    94b4:	04 95 00 00 89 3b 00 00 a6 9a 00 00 10 9c 00 00     .....;..........
    94c4:	89 46 00 00 b1 9a 00 00 dd 9a 00 00 e5 3c 00 00     .F...........<..
    94d4:	bc 9a 00 00 2b 9b 00 00 85 3e 00 00 c7 9a 00 00     ....+....>......
    94e4:	d5 9b 00 00 09 47 00 00 d2 9a 00 00 23 95 00 00     .....G......#...
    94f4:	3d 3d 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ==..............

00009504 <connectDbgCLIDict_DescEntry>:
    9504:	54 6f 67 67 6c 65 20 55 41 52 54 43 6f 6e 6e 65     Toggle UARTConne
    9514:	63 74 20 64 65 62 75 67 20 6d 6f 64 65 2e 00        ct debug mode..

00009523 <connectStsCLIDict_DescEntry>:
    9523:	55 41 52 54 43 6f 6e 6e 65 63 74 20 73 74 61 74     UARTConnect stat
    9533:	75 73 2e 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47     us...[1;35mDEBUG
    9543:	1b 5b 30 6d 20 2d 20 41 6e 69 6d 61 74 69 6f 6e     .[0m - Animation
    9553:	0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b     ....[1;32mINFO.[
    9563:	30 6d 20 2d 20 43 6f 6e 6e 65 63 74 20 44 65 62     0m - Connect Deb
    9573:	75 67 20 4d 6f 64 65 20 54 6f 67 67 6c 65 00 1b     ug Mode Toggle..
    9583:	5b 31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20     [1;35mDEBUG.[0m 
    9593:	2d 20 50 45 4e 44 49 4e 47 20 53 45 54 20 2d 3e     - PENDING SET ->
    95a3:	20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47      ..[1;33mWARNING
    95b3:	1b 5b 30 6d 20 2d 20 43 61 62 6c 65 20 46 61 75     .[0m - Cable Fau
    95c3:	6c 74 21 0d 0a 00 20 53 6c 61 76 65 20 00 20 4d     lt!... Slave . M
    95d3:	61 73 74 65 72 20 00 1b 5b 31 3b 33 35 6d 44 45     aster ..[1;35mDE
    95e3:	42 55 47 1b 5b 30 6d 20 2d 20 43 41 42 4c 45 43     BUG.[0m - CABLEC
    95f3:	48 45 43 4b 20 52 45 43 45 49 56 45 20 2d 20 00     HECK RECEIVE - .
    9603:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    9613:	2d 20 4c 69 73 74 20 6f 66 20 55 41 52 54 43 6f     - List of UARTCo
    9623:	6e 6e 65 63 74 20 63 6f 6d 6d 61 6e 64 73 00 4d     nnect commands.M
    9633:	61 73 74 65 72 00 53 6c 61 76 65 00 1b 5b 31 3b     aster.Slave..[1;
    9643:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 55 41     32mINFO.[0m - UA
    9653:	52 54 43 6f 6e 6e 65 63 74 20 53 74 61 74 75 73     RTConnect Status
    9663:	00 0d 0a 44 65 76 69 63 65 20 54 79 70 65 3a 09     ...Device Type:.
    9673:	00 0d 0a 44 65 76 69 63 65 20 49 64 3a 09 00 0d     ...Device Id:...
    9683:	0a 4d 61 78 20 49 64 3a 09 00 0d 0a 4d 61 73 74     .Max Id:....Mast
    9693:	65 72 20 3c 3d 0d 0a 09 53 74 61 74 75 73 3a 09     er <=...Status:.
    96a3:	00 0d 0a 09 46 61 75 6c 74 73 3a 09 00 2f 00 0d     ....Faults:../..
    96b3:	0a 09 52 78 3a 09 00 0d 0a 09 54 78 3a 09 00 0d     ..Rx:.....Tx:...
    96c3:	0a 53 6c 61 76 65 20 3c 3d 0d 0a 09 53 74 61 74     .Slave <=...Stat
    96d3:	75 73 3a 09 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     us:...[1;32mINFO
    96e3:	1b 5b 30 6d 20 2d 20 53 65 74 74 69 6e 67 20 64     .[0m - Setting d
    96f3:	65 76 69 63 65 20 61 73 20 73 6c 61 76 65 2e 00     evice as slave..
    9703:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    9713:	2d 20 53 65 74 74 69 6e 67 20 64 65 76 69 63 65     - Setting device
    9723:	20 61 73 20 6d 61 73 74 65 72 2e 00 1b 5b 31 3b      as master...[1;
    9733:	33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d     33mWARNING.[0m -
    9743:	20 54 6f 6f 20 6d 75 63 68 20 64 61 74 61 20 74      Too much data t
    9753:	6f 20 73 65 6e 64 20 6f 6e 20 55 41 52 54 00 2c     o send on UART.,
    9763:	20 77 61 69 74 69 6e 67 2e 2e 2e 0d 0a 00 20 2b      waiting...... +
    9773:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    9783:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 53 63     [0m - Invalid Sc
    9793:	61 6e 43 6f 64 65 20 64 69 72 65 63 74 69 6f 6e     anCode direction
    97a3:	2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 33 6d 57 41 52     .......[1;33mWAR
    97b3:	4e 49 4e 47 1b 5b 30 6d 20 2d 20 4e 6f 74 20 65     NING.[0m - Not e
    97c3:	6e 6f 75 67 68 20 69 6e 74 65 72 63 6f 6e 6e 65     nough interconne
    97d3:	63 74 20 6c 61 79 6f 75 74 20 6e 6f 64 65 73 20     ct layout nodes 
    97e3:	63 6f 6e 66 69 67 75 72 65 64 3a 20 00 1b 5b 31     configured: ..[1
    97f3:	3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20     ;35mDEBUG.[0m - 
    9803:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    9813:	5b 30 6d 20 2d 20 54 6f 6f 20 62 69 67 20 6f 66     [0m - Too big of
    9823:	20 61 20 63 6f 6d 6d 61 6e 64 20 74 6f 20 66 69      a command to fi
    9833:	74 20 69 6e 74 6f 20 74 68 65 20 62 75 66 66 65     t into the buffe
    9843:	72 2e 2e 2e 00 1b 5b 31 3b 35 3b 33 31 6d 45 52     r.....[1;5;31mER
    9853:	52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76 61 6c 69     ROR.[0m - Invali
    9863:	64 20 55 41 52 54 20 74 6f 20 73 65 6e 64 20 66     d UART to send f
    9873:	72 6f 6d 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 35 6d     rom.......[1;35m
    9883:	44 45 42 55 47 1b 5b 30 6d 20 2d 20 49 64 52 65     DEBUG.[0m - IdRe
    9893:	71 75 65 73 74 0d 0a 00 1b 5b 31 3b 35 3b 33 31     quest....[1;5;31
    98a3:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76     mERROR.[0m - Inv
    98b3:	61 6c 69 64 20 49 64 52 65 71 75 65 73 74 20 64     alid IdRequest d
    98c3:	69 72 65 63 74 69 6f 6e 2e 2e 2e 0d 0a 00 1b 5b     irection.......[
    98d3:	31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d     1;35mDEBUG.[0m -
    98e3:	20 49 64 45 6e 75 6d 65 72 61 74 69 6f 6e 0d 0a      IdEnumeration..
    98f3:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    9903:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 49 64     [0m - Invalid Id
    9913:	45 6e 75 6d 65 72 61 74 69 6f 6e 20 64 69 72 65     Enumeration dire
    9923:	63 74 69 6f 6e 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33     ction.......[1;3
    9933:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 49 64     5mDEBUG.[0m - Id
    9943:	52 65 70 6f 72 74 0d 0a 00 1b 5b 31 3b 33 32 6d     Report....[1;32m
    9953:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 49 64 20 52 65     INFO.[0m - Id Re
    9963:	70 6f 72 74 65 64 3a 20 00 1b 5b 31 3b 33 32 6d     ported: ..[1;32m
    9973:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 65 6e 64 69     INFO.[0m - Sendi
    9983:	6e 67 20 53 79 6e 63 20 49 64 6c 65 73 2e 2e 2e     ng Sync Idles...
    9993:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    99a3:	20 2d 20 52 65 73 65 74 74 69 6e 67 20 55 41 52      - Resetting UAR
    99b3:	54 43 6f 6e 6e 65 63 74 20 73 74 61 74 65 2e 2e     TConnect state..
    99c3:	2e 00 20 57 61 69 74 20 00 20 53 59 4e 20 00 20     .. Wait . SYN . 
    99d3:	53 4f 48 20 00 20 23 23 23 20 00 20 43 4d 44 20     SOH . ### . CMD 
    99e3:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    99f3:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 55 41     [0m - Invalid UA
    9a03:	52 54 53 74 61 74 75 73 2e 2e 2e 00 54 78 46 49     RTStatus....TxFI
    9a13:	46 4f 20 30 20 2d 20 00 54 78 46 49 46 4f 20 31     FO 0 - .TxFIFO 1
    9a23:	20 2d 20 00 43 61 62 6c 65 43 68 65 63 6b 00 49      - .CableCheck.I
    9a33:	64 52 65 71 75 65 73 74 00 49 64 45 6e 75 6d 65     dRequest.IdEnume
    9a43:	72 61 74 69 6f 6e 00 49 64 52 65 70 6f 72 74 00     ration.IdReport.
    9a53:	53 63 61 6e 43 6f 64 65 00 41 6e 69 6d 61 74 69     ScanCode.Animati
    9a63:	6f 6e 00 52 65 6d 6f 74 65 43 61 70 61 62 69 6c     on.RemoteCapabil
    9a73:	69 74 79 00 52 65 6d 6f 74 65 4f 75 74 70 75 74     ity.RemoteOutput
    9a83:	00 52 65 6d 6f 74 65 49 6e 70 75 74 00 63 6f 6e     .RemoteInput.con
    9a93:	6e 65 63 74 43 6d 64 00 63 6f 6e 6e 65 63 74 44     nectCmd.connectD
    9aa3:	62 67 00 63 6f 6e 6e 65 63 74 49 64 6c 00 63 6f     bg.connectIdl.co
    9ab3:	6e 6e 65 63 74 4c 73 74 00 63 6f 6e 6e 65 63 74     nnectLst.connect
    9ac3:	4d 73 74 00 63 6f 6e 6e 65 63 74 52 73 74 00 63     Mst.connectRst.c
    9ad3:	6f 6e 6e 65 63 74 53 74 73 00                       onnectSts.

00009add <connectLstCLIDict_DescEntry>:
    9add:	4c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 20     Lists available 
    9aed:	55 41 52 54 43 6f 6e 6e 65 63 74 20 63 6f 6d 6d     UARTConnect comm
    9afd:	61 6e 64 73 20 61 6e 64 20 69 6e 64 65 78 20 69     ands and index i
    9b0d:	64 00                                               d.

00009b0f <uartConnectCLIDictName>:
    9b0f:	55 41 52 54 43 6f 6e 6e 65 63 74 20 4d 6f 64 75     UARTConnect Modu
    9b1f:	6c 65 20 43 6f 6d 6d 61 6e 64 73 00                 le Commands.

00009b2b <connectMstCLIDict_DescEntry>:
    9b2b:	53 65 74 73 20 74 68 65 20 64 65 76 69 63 65 20     Sets the device 
    9b3b:	61 73 20 6d 61 73 74 65 72 2e 20 55 73 65 20 61     as master. Use a
    9b4b:	72 67 75 6d 65 6e 74 20 6f 66 20 73 20 74 6f 20     rgument of s to 
    9b5b:	73 65 74 20 61 73 20 73 6c 61 76 65 2e 00           set as slave..

00009b69 <connectCmdCLIDict_DescEntry>:
    9b69:	53 65 6e 64 73 20 61 20 63 6f 6d 6d 61 6e 64 20     Sends a command 
    9b79:	76 69 61 20 55 41 52 54 20 43 6f 6e 6e 65 63 74     via UART Connect
    9b89:	2c 20 66 69 72 73 74 20 61 72 67 20 69 73 20 77     , first arg is w
    9b99:	68 69 63 68 20 75 61 72 74 2c 20 6e 65 78 74 20     hich uart, next 
    9ba9:	61 72 67 20 69 73 20 74 68 65 20 63 6f 6d 6d 61     arg is the comma
    9bb9:	6e 64 2c 20 72 65 73 74 20 61 72 65 20 74 68 65     nd, rest are the
    9bc9:	20 61 72 67 75 6d 65 6e 74 73 2e 00                  arguments..

00009bd5 <connectRstCLIDict_DescEntry>:
    9bd5:	52 65 73 65 74 73 20 62 6f 74 68 20 52 78 20 61     Resets both Rx a
    9be5:	6e 64 20 54 78 20 63 6f 6e 6e 65 63 74 20 62 75     nd Tx connect bu
    9bf5:	66 66 65 72 73 20 61 6e 64 20 73 74 61 74 65 20     ffers and state 
    9c05:	76 61 72 69 61 62 6c 65 73 2e 00                    variables..

00009c10 <connectIdlCLIDict_DescEntry>:
    9c10:	53 65 6e 64 73 20 4e 20 6e 75 6d 62 65 72 20 6f     Sends N number o
    9c20:	66 20 49 64 6c 65 20 63 6f 6d 6d 61 6e 64 73 2c     f Idle commands,
    9c30:	20 32 20 69 73 20 74 68 65 20 64 65 66 61 75 6c      2 is the defaul
    9c40:	74 20 76 61 6c 75 65 2c 20 61 6e 64 20 73 68 6f     t value, and sho
    9c50:	75 6c 64 20 62 65 20 73 75 66 66 69 63 69 65 6e     uld be sufficien
    9c60:	74 20 69 6e 20 6d 6f 73 74 20 63 61 73 65 73 2e     t in most cases.
    9c70:	00 00 00 00                                         ....

00009c74 <default_tl_0x2B>:
    9c74:	01 00 00 00 24 00 00 00                             ....$...

00009c7c <default_tl_0x2C>:
    9c7c:	01 00 00 00 25 00 00 00                             ....%...

00009c84 <default_tl_0x2D>:
    9c84:	00 00 00 00                                         ....

00009c88 <default_tl_0x2E>:
    9c88:	00 00 00 00                                         ....

00009c8c <default_tl_0x2F>:
    9c8c:	01 00 00 00 26 00 00 00                             ....&...

00009c94 <tm11_guide>:
    9c94:	01 00 01 0f 00                                      .....

00009c99 <rm40_guide>:
    9c99:	01 0f 24 00                                         ..$.

00009c9d <rm92_guide>:
    9c9d:	01 08 e9 00 00 00 00                                .......

00009ca4 <default_tl_0x41>:
    9ca4:	00 00 00 00                                         ....

00009ca8 <rm64_guide>:
    9ca8:	01 0f 38 00                                         ..8.

00009cac <default_tl_0x43>:
    9cac:	01 00 00 00 35 00 00 00                             ....5...

00009cb4 <rm36_guide>:
    9cb4:	01 0f 35 00                                         ..5.

00009cb8 <default_tl_0x44>:
    9cb8:	01 00 00 00 36 00 00 00                             ....6...

00009cc0 <default_tl_0x45>:
    9cc0:	01 00 00 00 37 00 00 00                             ....7...

00009cc8 <default_tl_0x46>:
    9cc8:	01 00 00 00 38 00 00 00                             ....8...

00009cd0 <default_tl_0x47>:
    9cd0:	01 00 00 00 39 00 00 00                             ....9...

00009cd8 <macroCLIDictName>:
    9cd8:	4d 61 63 72 6f 20 4d 6f 64 75 6c 65 20 43 6f 6d     Macro Module Com
    9ce8:	6d 61 6e 64 73 00                                   mands.

00009cee <tm41_guide>:
    9cee:	01 00 01 32 00                                      ...2.

00009cf3 <tm93_guide>:
    9cf3:	01 00 01 34 00                                      ...4.

00009cf8 <keyReleaseCLIDict_DescEntry>:
    9cf8:	53 65 6e 64 20 6b 65 79 2d 72 65 6c 65 61 73 65     Send key-release
    9d08:	20 65 76 65 6e 74 20 74 6f 20 6d 61 63 72 6f 20      event to macro 
    9d18:	6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69 63 61 74     module. Duplicat
    9d28:	65 73 20 68 61 76 65 20 75 6e 64 65 66 69 6e 65     es have undefine
    9d38:	64 20 62 65 68 61 76 69 6f 75 72 2e 0d 0a 09 09     d behaviour.....
    9d48:	1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20 53 63 61     .[35mS10.[0m Sca
    9d58:	6e 63 6f 64 65 20 30 78 30 41 00                    ncode 0x0A.

00009d63 <tm65_guide>:
    9d63:	01 00 01 4f 00                                      ...O.

00009d68 <tm2_guide>:
    9d68:	01 00 01 04 00                                      .....

00009d6d <tm37_guide>:
    9d6d:	01 00 01 2c 00 00 00                                ...,...

00009d74 <default_tl_0x30>:
    9d74:	01 00 00 00 27 00 00 00                             ....'...

00009d7c <default_tl_0x31>:
    9d7c:	01 00 00 00 28 00 00 00                             ....(...

00009d84 <default_tl_0x32>:
    9d84:	01 00 00 00 29 00 00 00                             ....)...

00009d8c <default_tl_0x33>:
    9d8c:	01 00 00 00 2a 00 00 00                             ....*...

00009d94 <default_tl_0x34>:
    9d94:	01 00 00 00 2b 00 00 00                             ....+...

00009d9c <default_tl_0x35>:
    9d9c:	01 00 00 00 2c 00 00 00                             ....,...

00009da4 <default_tl_0x36>:
    9da4:	00 00 00 00                                         ....

00009da8 <default_tl_0x37>:
    9da8:	00 00 00 00                                         ....

00009dac <default_tl_0x38>:
    9dac:	01 00 00 00 2d 00 00 00                             ....-...

00009db4 <default_tl_0x39>:
    9db4:	01 00 00 00 2e 00 00 00                             ........

00009dbc <default_tl_0x4E>:
    9dbc:	01 00 00 00 40 00 00 00                             ....@...

00009dc4 <default_tl_0x3A>:
    9dc4:	01 00 00 00 2f 00 00 00                             ..../...

00009dcc <default_tl_0x3B>:
    9dcc:	01 00 00 00 30 00 00 00                             ....0...

00009dd4 <default_tl_0x3C>:
    9dd4:	01 00 00 00 31 00 00 00                             ....1...

00009ddc <default_tl_0x3D>:
    9ddc:	01 00 00 00 32 00 00 00                             ....2...

00009de4 <default_tl_0x3E>:
    9de4:	01 00 00 00 33 00 00 00                             ....3...

00009dec <default_tl_0x3F>:
    9dec:	00 00 00 00                                         ....

00009df0 <rm81_guide>:
    9df0:	01 0f 3f 00                                         ..?.

00009df4 <macroStepCLIDict_DescEntry>:
    9df4:	44 6f 20 4e 20 6d 61 63 72 6f 20 70 72 6f 63 65     Do N macro proce
    9e04:	73 73 69 6e 67 20 73 74 65 70 73 2e 20 44 65 66     ssing steps. Def
    9e14:	61 75 6c 74 73 20 74 6f 20 31 2e 00                 aults to 1..

00009e20 <rm53_guide>:
    9e20:	01 0f 0e 00                                         ....

00009e24 <rm25_guide>:
    9e24:	01 0f 06 00                                         ....

00009e28 <tm3_guide>:
    9e28:	01 00 01 05 00                                      .....

00009e2d <rm21_guide>:
    9e2d:	01 0f e0 00                                         ....

00009e31 <capSelectCLIDict_DescEntry>:
    9e31:	54 72 69 67 67 65 72 73 20 74 68 65 20 73 70 65     Triggers the spe
    9e41:	63 69 66 69 65 64 20 63 61 70 61 62 69 6c 69 74     cified capabilit
    9e51:	69 65 73 2e 20 46 69 72 73 74 20 74 77 6f 20 61     ies. First two a
    9e61:	72 67 73 20 61 72 65 20 73 74 61 74 65 20 61 6e     rgs are state an
    9e71:	64 20 73 74 61 74 65 54 79 70 65 2e 0d 0a 09 09     d stateType.....
    9e81:	1b 5b 33 35 6d 4b 31 31 1b 5b 30 6d 20 4b 65 79     .[35mK11.[0m Key
    9e91:	62 6f 61 72 64 20 43 61 70 61 62 69 6c 69 74 79     board Capability
    9ea1:	20 30 78 30 42 00                                    0x0B.

00009ea7 <rm77_guide>:
    9ea7:	01 0f 3c 00                                         ..<.

00009eab <InterconnectOffsetList>:
    9eab:	2d 59                                               -Y

00009ead <tm76_guide>:
    9ead:	01 00 01 02 00                                      .....

00009eb2 <rm49_guide>:
    9eb2:	01 0f 12 00 00 00                                   ......

00009eb8 <layer1_tl_0x02>:
    9eb8:	01 00 00 00 4c 00 00 00                             ....L...

00009ec0 <layer1_tl_0x03>:
    9ec0:	01 00 00 00 4d 00 00 00                             ....M...

00009ec8 <layer1_tl_0x04>:
    9ec8:	01 00 00 00 4e 00 00 00                             ....N...

00009ed0 <layer1_tl_0x05>:
    9ed0:	01 00 00 00 4f 00 00 00                             ....O...

00009ed8 <layer1_tl_0x06>:
    9ed8:	01 00 00 00 50 00 00 00                             ....P...

00009ee0 <layer1_tl_0x07>:
    9ee0:	01 00 00 00 51 00 00 00                             ....Q...

00009ee8 <layer1_tl_0x08>:
    9ee8:	00 00 00 00                                         ....

00009eec <layer1_tl_0x09>:
    9eec:	00 00 00 00                                         ....

00009ef0 <tm78_guide>:
    9ef0:	01 00 01 04 00 00 00 00                             ........

00009ef8 <macroCLIDict>:
    9ef8:	fc b2 00 00 59 aa 00 00 11 4d 00 00 04 b3 00 00     ....Y....M......
    9f08:	31 9e 00 00 91 4d 00 00 0e b3 00 00 2c a8 00 00     1....M......,...
    9f18:	d1 55 00 00 16 b3 00 00 30 a3 00 00 01 56 00 00     .U......0....V..
    9f28:	1f b3 00 00 f8 9c 00 00 31 56 00 00 2a b3 00 00     ........1V..*...
    9f38:	bc a8 00 00 99 4e 00 00 35 b3 00 00 9d ac 00 00     .....N..5.......
    9f48:	99 4f 00 00 3f b3 00 00 b4 ab 00 00 c9 4e 00 00     .O..?........N..
    9f58:	4a b3 00 00 f8 a3 00 00 39 4f 00 00 55 b3 00 00     J.......9O..U...
    9f68:	83 ab 00 00 2d 50 00 00 5f b3 00 00 41 a9 00 00     ....-P.._...A...
    9f78:	69 4f 00 00 69 b3 00 00 de b3 00 00 c5 5a 00 00     iO..i........Z..
    9f88:	73 b3 00 00 f4 9d 00 00 69 4d 00 00 00 00 00 00     s.......iM......
    9f98:	00 00 00 00 00 00 00 00                             ........

00009fa0 <default_tl_0x40>:
    9fa0:	00 00 00 00                                         ....

00009fa4 <rm79_guide>:
    9fa4:	01 0f 3a 00                                         ..:.

00009fa8 <layer1_tl_0x0A>:
    9fa8:	00 00 00 00                                         ....

00009fac <layer1_tl_0x0B>:
    9fac:	00 00 00 00                                         ....

00009fb0 <layer1_tl_0x0C>:
    9fb0:	00 00 00 00                                         ....

00009fb4 <layer1_tl_0x0D>:
    9fb4:	00 00 00 00                                         ....

00009fb8 <layer1_tl_0x0E>:
    9fb8:	00 00 00 00                                         ....

00009fbc <layer1_tl_0x0F>:
    9fbc:	00 00 00 00                                         ....

00009fc0 <default_tl_0x48>:
    9fc0:	01 00 00 00 3a 00 00 00                             ....:...

00009fc8 <default_tl_0x49>:
    9fc8:	01 00 00 00 3b 00 00 00                             ....;...

00009fd0 <default_tl_0x57>:
    9fd0:	01 00 00 00 49 00 00 00                             ....I...

00009fd8 <rm12_guide>:
    9fd8:	01 0f 14 00                                         ....

00009fdc <default_tl_0x4A>:
    9fdc:	01 00 00 00 3c 00 00 00                             ....<...

00009fe4 <default_tl_0x4B>:
    9fe4:	01 00 00 00 3d 00 00 00                             ....=...

00009fec <default_tl_0x4C>:
    9fec:	01 00 00 00 3e 00 00 00                             ....>...

00009ff4 <default_tl_0x4D>:
    9ff4:	01 00 00 00 3f 00 00 00                             ....?...

00009ffc <default_tl_0x4F>:
    9ffc:	01 00 00 00 41 00 00 00                             ....A...

0000a004 <default_tl_0x55>:
    a004:	01 00 00 00 47 00 00 00                             ....G...

0000a00c <rm70_guide>:
    a00c:	01 0f 51 00                                         ..Q.

0000a010 <tm13_guide>:
    a010:	01 00 01 11 00                                      .....

0000a015 <rm42_guide>:
    a015:	01 0f 26 00                                         ..&.

0000a019 <rm46_guide>:
    a019:	01 0f 1c 00 00 00 00                                .......

0000a020 <ResultMacroList>:
    a020:	2c aa 00 00 7f ab 00 00 41 ab 00 00 ee aa 00 00     ,.......A.......
    a030:	a4 aa 00 00 b9 a1 00 00 19 ab 00 00 b8 a3 00 00     ................
    a040:	c4 aa 00 00 db a7 00 00 c1 b4 00 00 b0 a9 00 00     ................
    a050:	d8 9f 00 00 e8 aa 00 00 58 a4 00 00 ff aa 00 00     ........X.......
    a060:	ab a3 00 00 43 ac 00 00 88 a7 00 00 da b3 00 00     ....C...........
    a070:	8c a7 00 00 2d 9e 00 00 a8 a7 00 00 ce b3 00 00     ....-...........
    a080:	68 a9 00 00 24 9e 00 00 bc aa 00 00 4e a2 00 00     h...$.......N...
    a090:	5a ab 00 00 64 a4 00 00 b0 aa 00 00 42 a2 00 00     Z...d.......B...
    a0a0:	4e ab 00 00 52 a4 00 00 e9 ac 00 00 28 a8 00 00     N...R.......(...
    a0b0:	b4 9c 00 00 20 aa 00 00 ed a3 00 00 10 ab 00 00     .... ...........
    a0c0:	99 9c 00 00 e7 a9 00 00 15 a0 00 00 fb aa 00 00     ................
    a0d0:	a7 a3 00 00 3f ac 00 00 19 a0 00 00 d6 b3 00 00     ....?...........
    a0e0:	78 a9 00 00 b2 9e 00 00 95 a7 00 00 ca b3 00 00     x...............
    a0f0:	9e a9 00 00 20 9e 00 00 b8 aa 00 00 4a a2 00 00     .... .......J...
    a100:	56 ab 00 00 60 a4 00 00 ef ac 00 00 95 aa 00 00     V...`...........
    a110:	4a ab 00 00 4e a4 00 00 e5 ac 00 00 20 a8 00 00     J...N....... ...
    a120:	a8 9c 00 00 1c aa 00 00 94 a1 00 00 08 ab 00 00     ................
    a130:	af a3 00 00 50 ac 00 00 0c a0 00 00 f2 aa 00 00     ....P...........
    a140:	9e a3 00 00 3b ac 00 00 ad a7 00 00 d2 b3 00 00     ....;...........
    a150:	74 a9 00 00 a7 9e 00 00 ac a9 00 00 a4 9f 00 00     t...............
    a160:	34 a9 00 00 f0 9d 00 00 b4 aa 00 00 46 a2 00 00     4...........F...
    a170:	52 ab 00 00 5c a4 00 00 77 ab 00 00 83 a7 00 00     R...\...w.......
    a180:	68 ab 00 00 14 a9 00 00 e0 ac 00 00 10 a8 00 00     h...............
    a190:	9d 9c 00 00                                         ....

0000a194 <rm66_guide>:
    a194:	03 0f e6 0f e4 0f 1a 00                             ........

0000a19c <default_tl_0x52>:
    a19c:	01 00 00 00 44 00 00 00                             ....D...

0000a1a4 <default_tl_0x53>:
    a1a4:	01 00 00 00 45 00 00 00                             ....E...

0000a1ac <default_tl_0x54>:
    a1ac:	01 00 00 00 46 00 00 00                             ....F...

0000a1b4 <tm71_guide>:
    a1b4:	01 00 01 55 00                                      ...U.

0000a1b9 <rm5_guide>:
    a1b9:	01 0f 1e 00 00 00 00                                .......

0000a1c0 <default_tl_0x56>:
    a1c0:	01 00 00 00 48 00 00 00                             ....H...

0000a1c8 <tm43_guide>:
    a1c8:	01 00 01 34 00 00 00 00                             ...4....

0000a1d0 <layer1_tl_0x11>:
    a1d0:	00 00 00 00                                         ....

0000a1d4 <layer1_tl_0x12>:
    a1d4:	00 00 00 00                                         ....

0000a1d8 <layer1_tl_0x13>:
    a1d8:	00 00 00 00                                         ....

0000a1dc <layer1_tl_0x14>:
    a1dc:	00 00 00 00                                         ....

0000a1e0 <layer1_tl_0x15>:
    a1e0:	00 00 00 00                                         ....

0000a1e4 <layer1_tl_0x16>:
    a1e4:	00 00 00 00                                         ....

0000a1e8 <layer1_tl_0x17>:
    a1e8:	00 00 00 00                                         ....

0000a1ec <tm4_guide>:
    a1ec:	01 00 01 06 00 00 00 00                             ........

0000a1f4 <layer1_tl_0x19>:
    a1f4:	00 00 00 00                                         ....

0000a1f8 <tm39_guide>:
    a1f8:	01 00 01 30 00 00 00 00                             ...0....

0000a200 <default_tl_0x50>:
    a200:	01 00 00 00 42 00 00 00                             ....B...

0000a208 <default_tl_0x51>:
    a208:	01 00 00 00 43 00 00 00                             ....C...

0000a210 <layer1_tl_0x1A>:
    a210:	00 00 00 00                                         ....

0000a214 <layer1_tl_0x1B>:
    a214:	00 00 00 00                                         ....

0000a218 <layer1_tl_0x1C>:
    a218:	00 00 00 00                                         ....

0000a21c <layer1_tl_0x1D>:
    a21c:	00 00 00 00                                         ....

0000a220 <layer1_tl_0x1E>:
    a220:	00 00 00 00                                         ....

0000a224 <layer1_tl_0x1F>:
    a224:	00 00 00 00                                         ....

0000a228 <default_tl_0x58>:
    a228:	01 00 00 00 4a 00 00 00                             ....J...

0000a230 <default_tl_0x59>:
    a230:	01 00 00 00 4b 00 00 00                             ....K...

0000a238 <tm18_guide>:
    a238:	01 00 01 19 00                                      .....

0000a23d <tm30_guide>:
    a23d:	01 00 01 25 00                                      ...%.

0000a242 <rm31_guide>:
    a242:	01 0f 4c 00                                         ..L.

0000a246 <rm83_guide>:
    a246:	01 0f 41 00                                         ..A.

0000a24a <rm55_guide>:
    a24a:	01 0f 33 00                                         ..3.

0000a24e <rm27_guide>:
    a24e:	01 0f 1d 00                                         ....

0000a252 <tm60_guide>:
    a252:	01 00 01 4a 00                                      ...J.

0000a257 <tm84_guide>:
    a257:	01 00 01 31 00                                      ...1.

0000a25c <layer1_tl_0x20>:
    a25c:	00 00 00 00                                         ....

0000a260 <layer1_tl_0x21>:
    a260:	00 00 00 00                                         ....

0000a264 <tm56_guide>:
    a264:	01 00 01 46 00 00 00 00                             ...F....

0000a26c <layer1_tl_0x23>:
    a26c:	00 00 00 00                                         ....

0000a270 <layer1_tl_0x24>:
    a270:	00 00 00 00                                         ....

0000a274 <tm28_guide>:
    a274:	01 00 01 23 00 00 00 00                             ...#....

0000a27c <layer1_tl_0x26>:
    a27c:	00 00 00 00                                         ....

0000a280 <layer1_tl_0x27>:
    a280:	00 00 00 00                                         ....

0000a284 <layer1_tl_0x28>:
    a284:	00 00 00 00                                         ....

0000a288 <layer1_tl_0x29>:
    a288:	00 00 00 00                                         ....

0000a28c <layer1_tl_0x2A>:
    a28c:	00 00 00 00                                         ....

0000a290 <layer1_tl_0x2B>:
    a290:	00 00 00 00                                         ....

0000a294 <layer1_tl_0x2C>:
    a294:	00 00 00 00                                         ....

0000a298 <layer1_tl_0x2D>:
    a298:	00 00 00 00                                         ....

0000a29c <layer1_tl_0x2E>:
    a29c:	00 00 00 00                                         ....

0000a2a0 <layer1_tl_0x2F>:
    a2a0:	01 00 00 00 52 00 00 00                             ....R...

0000a2a8 <CapabilitiesList>:
    a2a8:	95 39 00 00 09 00 00 00 b9 3a 00 00 00 00 00 00     .9.......:......
    a2b8:	f1 2e 00 00 04 00 00 00 89 52 00 00 02 00 00 00     .........R......
    a2c8:	b1 52 00 00 02 00 00 00 15 53 00 00 01 00 00 00     .R.......S......
    a2d8:	d9 52 00 00 02 00 00 00 61 52 00 00 03 00 00 00     .R......aR......
    a2e8:	11 61 00 00 02 00 00 00 ad 61 00 00 00 00 00 00     .a.......a......
    a2f8:	89 62 00 00 00 00 00 00 b9 62 00 00 00 00 00 00     .b.......b......
    a308:	55 61 00 00 00 00 00 00 69 61 00 00 01 00 00 00     Ua......ia......
    a318:	ed 62 00 00 00 00 00 00 21 63 00 00 01 00 00 00     .b......!c......
    a328:	c5 61 00 00 06 00 00 00                             .a......

0000a330 <keyPressCLIDict_DescEntry>:
    a330:	53 65 6e 64 20 6b 65 79 2d 70 72 65 73 73 20 65     Send key-press e
    a340:	76 65 6e 74 73 20 74 6f 20 74 68 65 20 6d 61 63     vents to the mac
    a350:	72 6f 20 6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69     ro module. Dupli
    a360:	63 61 74 65 73 20 68 61 76 65 20 75 6e 64 65 66     cates have undef
    a370:	69 6e 65 64 20 62 65 68 61 76 69 6f 75 72 2e 0d     ined behaviour..
    a380:	0a 09 09 1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20     ....[35mS10.[0m 
    a390:	53 63 61 6e 63 6f 64 65 20 30 78 30 41 00           Scancode 0x0A.

0000a39e <rm72_guide>:
    a39e:	01 0f 4f 00                                         ..O.

0000a3a2 <tm15_guide>:
    a3a2:	01 00 01 16 00                                      .....

0000a3a7 <rm44_guide>:
    a3a7:	01 0f 2d 00                                         ..-.

0000a3ab <rm16_guide>:
    a3ab:	01 0f 07 00                                         ....

0000a3af <rm68_guide>:
    a3af:	01 0f 2c 00                                         ..,.

0000a3b3 <tm73_guide>:
    a3b3:	01 00 01 57 00                                      ...W.

0000a3b8 <rm7_guide>:
    a3b8:	01 0f 2f 00                                         ../.

0000a3bc <tm45_guide>:
    a3bc:	01 00 01 38 00                                      ...8.

0000a3c1 <tm17_guide>:
    a3c1:	01 00 01 18 00 00 00                                .......

0000a3c8 <layer1_tl_0x31>:
    a3c8:	01 00 00 00 54 00 00 00                             ....T...

0000a3d0 <layer1_tl_0x32>:
    a3d0:	01 00 00 00 55 00 00 00                             ....U...

0000a3d8 <layer1_tl_0x33>:
    a3d8:	01 00 00 00 56 00 00 00                             ....V...

0000a3e0 <layer1_tl_0x34>:
    a3e0:	01 00 00 00 57 00 00 00                             ....W...

0000a3e8 <tm6_guide>:
    a3e8:	01 00 01 08 00                                      .....

0000a3ed <rm38_guide>:
    a3ed:	02 06 02 00 01 00                                   ......

0000a3f3 <tm48_guide>:
    a3f3:	01 00 01 3b 00                                      ...;.

0000a3f8 <macroDebugCLIDict_DescEntry>:
    a3f8:	44 69 73 61 62 6c 65 73 2f 45 6e 61 62 6c 65 73     Disables/Enables
    a408:	20 73 65 6e 64 69 6e 67 20 55 53 42 20 6b 65 79      sending USB key
    a418:	63 6f 64 65 73 20 74 6f 20 74 68 65 20 4f 75 74     codes to the Out
    a428:	70 75 74 20 4d 6f 64 75 6c 65 20 61 6e 64 20 70     put Module and p
    a438:	72 69 6e 74 73 20 55 2f 4b 20 63 6f 64 65 73 2e     rints U/K codes.
    a448:	00                                                  .

0000a449 <tm32_guide>:
    a449:	01 00 01 27 00                                      ...'.

0000a44e <rm61_guide>:
    a44e:	01 0f 10 00                                         ....

0000a452 <rm33_guide>:
    a452:	02 0f e0 0f 4f 00                                   ....O.

0000a458 <rm14_guide>:
    a458:	01 0f 0a 00                                         ....

0000a45c <rm85_guide>:
    a45c:	01 0f 43 00                                         ..C.

0000a460 <rm57_guide>:
    a460:	01 0f e6 00                                         ....

0000a464 <rm29_guide>:
    a464:	02 0f e0 0f 52 00 00 00                             ....R...

0000a46c <layer1_tl_0x10>:
    a46c:	00 00 00 00                                         ....

0000a470 <tm90_guide>:
    a470:	01 00 01 31 00                                      ...1.

0000a475 <tm62_guide>:
    a475:	01 00 01 4c 00 00 00                                ...L...

0000a47c <TriggerMacroList>:
    a47c:	cc a7 00 00 00 00 00 00 fb a8 00 00 01 00 00 00     ................
    a48c:	68 9d 00 00 02 00 00 00 28 9e 00 00 03 00 00 00     h.......(.......
    a49c:	ec a1 00 00 04 00 00 00 31 ab 00 00 05 00 00 00     ........1.......
    a4ac:	e8 a3 00 00 06 00 00 00 98 ac 00 00 07 00 00 00     ................
    a4bc:	ee a7 00 00 08 00 00 00 bc b4 00 00 09 00 00 00     ................
    a4cc:	f8 a7 00 00 0a 00 00 00 94 9c 00 00 0b 00 00 00     ................
    a4dc:	e2 a9 00 00 0c 00 00 00 10 a0 00 00 0d 00 00 00     ................
    a4ec:	f6 aa 00 00 0e 00 00 00 a2 a3 00 00 0f 00 00 00     ................
    a4fc:	22 ab 00 00 10 00 00 00 c1 a3 00 00 11 00 00 00     "...............
    a50c:	38 a2 00 00 12 00 00 00 e9 a7 00 00 13 00 00 00     8...............
    a51c:	af ab 00 00 14 00 00 00 90 a7 00 00 15 00 00 00     ................
    a52c:	c5 b3 00 00 16 00 00 00 3c a9 00 00 17 00 00 00     ........<.......
    a53c:	79 ad 00 00 18 00 00 00 99 a9 00 00 19 00 00 00     y...............
    a54c:	35 aa 00 00 1a 00 00 00 d8 aa 00 00 1b 00 00 00     5...............
    a55c:	74 a2 00 00 1c 00 00 00 7a ab 00 00 1d 00 00 00     t.......z.......
    a56c:	3d a2 00 00 1e 00 00 00 45 ab 00 00 1f 00 00 00     =.......E.......
    a57c:	49 a4 00 00 20 00 00 00 63 ab 00 00 21 00 00 00     I... ...c...!...
    a58c:	74 a7 00 00 22 00 00 00 08 ad 00 00 23 00 00 00     t...".......#...
    a59c:	04 a9 00 00 24 00 00 00 6d 9d 00 00 25 00 00 00     ....$...m...%...
    a5ac:	54 aa 00 00 26 00 00 00 f8 a1 00 00 27 00 00 00     T...&.......'...
    a5bc:	dd a9 00 00 28 00 00 00 ee 9c 00 00 29 00 00 00     ....(.......)...
    a5cc:	3a aa 00 00 2a 00 00 00 c8 a1 00 00 2b 00 00 00     :...*.......+...
    a5dc:	1d ab 00 00 2c 00 00 00 bc a3 00 00 2d 00 00 00     ....,.......-...
    a5ec:	3c ab 00 00 2e 00 00 00 e4 a7 00 00 2f 00 00 00     <.........../...
    a5fc:	f3 a3 00 00 30 00 00 00 a7 a9 00 00 31 00 00 00     ....0.......1...
    a60c:	54 ac 00 00 32 00 00 00 d1 a7 00 00 23 00 00 00     T...2.......#...
    a61c:	67 b4 00 00 33 00 00 00 94 a9 00 00 34 00 00 00     g...3.......4...
    a62c:	03 ab 00 00 35 00 00 00 b0 a8 00 00 36 00 00 00     ....5.......6...
    a63c:	64 a2 00 00 37 00 00 00 72 ab 00 00 38 00 00 00     d...7...r...8...
    a64c:	7e a7 00 00 39 00 00 00 28 a9 00 00 3a 00 00 00     ~...9...(...:...
    a65c:	52 a2 00 00 3b 00 00 00 5e ab 00 00 3c 00 00 00     R...;...^...<...
    a66c:	75 a4 00 00 3d 00 00 00 f8 ac 00 00 3e 00 00 00     u...=.......>...
    a67c:	f6 a8 00 00 3f 00 00 00 63 9d 00 00 40 00 00 00     ....?...c...@...
    a68c:	44 aa 00 00 41 00 00 00 df a7 00 00 42 00 00 00     D...A.......B...
    a69c:	2c ab 00 00 43 00 00 00 64 ad 00 00 1e 00 00 00     ,...C...d.......
    a6ac:	30 aa 00 00 44 00 00 00 b4 a1 00 00 45 00 00 00     0...D.......E...
    a6bc:	14 ab 00 00 46 00 00 00 b3 a3 00 00 47 00 00 00     ....F.......G...
    a6cc:	d8 a9 00 00 48 00 00 00 d6 a7 00 00 49 00 00 00     ....H.......I...
    a6dc:	ad 9e 00 00 4a 00 00 00 a2 a9 00 00 4b 00 00 00     ....J.......K...
    a6ec:	f0 9e 00 00 4c 00 00 00 dd aa 00 00 4d 00 00 00     ....L.......M...
    a6fc:	62 b4 00 00 4e 00 00 00 27 ab 00 00 4f 00 00 00     b...N...'...O...
    a70c:	19 a9 00 00 50 00 00 00 c8 aa 00 00 51 00 00 00     ....P.......Q...
    a71c:	57 a2 00 00 52 00 00 00 6d ab 00 00 53 00 00 00     W...R...m...S...
    a72c:	79 a7 00 00 54 00 00 00 1c ad 00 00 55 00 00 00     y...T.......U...
    a73c:	09 a9 00 00 56 00 00 00 74 ad 00 00 57 00 00 00     ....V...t...W...
    a74c:	70 a4 00 00 58 00 00 00 f3 ac 00 00 59 00 00 00     p...X.......Y...
    a75c:	f1 a8 00 00 5a 00 00 00 f3 9c 00 00 5b 00 00 00     ....Z.......[...
    a76c:	3f aa 00 00 5c 00 00 00                             ?...\...

0000a774 <tm34_guide>:
    a774:	01 00 01 29 00                                      ...).

0000a779 <tm86_guide>:
    a779:	01 00 01 33 00                                      ...3.

0000a77e <tm58_guide>:
    a77e:	01 00 01 48 00                                      ...H.

0000a783 <rm87_guide>:
    a783:	01 08 b6 00 00                                      .....

0000a788 <rm18_guide>:
    a788:	01 0f 04 00                                         ....

0000a78c <rm20_guide>:
    a78c:	01 0f e2 00                                         ....

0000a790 <tm21_guide>:
    a790:	01 00 01 1c 00                                      .....

0000a795 <rm50_guide>:
    a795:	01 0f 13 00 00 00 00                                .......

0000a79c <layer2_tl_0x08>:
    a79c:	01 00 00 00 58 00 00 00                             ....X...

0000a7a4 <layer2_tl_0x09>:
    a7a4:	00 00 00 00                                         ....

0000a7a8 <rm22_guide>:
    a7a8:	02 05 01 01 00                                      .....

0000a7ad <rm74_guide>:
    a7ad:	01 0f 44 00 00 00 00                                ..D....

0000a7b4 <layer2_tl_0x0A>:
    a7b4:	00 00 00 00                                         ....

0000a7b8 <layer2_tl_0x0B>:
    a7b8:	00 00 00 00                                         ....

0000a7bc <layer2_tl_0x0C>:
    a7bc:	00 00 00 00                                         ....

0000a7c0 <layer2_tl_0x0D>:
    a7c0:	00 00 00 00                                         ....

0000a7c4 <layer2_tl_0x0E>:
    a7c4:	00 00 00 00                                         ....

0000a7c8 <layer2_tl_0x0F>:
    a7c8:	00 00 00 00                                         ....

0000a7cc <tm0_guide>:
    a7cc:	01 00 01 02 00                                      .....

0000a7d1 <tm51_guide>:
    a7d1:	01 00 01 3e 00                                      ...>.

0000a7d6 <tm75_guide>:
    a7d6:	01 00 01 59 00                                      ...Y.

0000a7db <rm9_guide>:
    a7db:	01 0f 15 00                                         ....

0000a7df <tm67_guide>:
    a7df:	01 00 01 51 00                                      ...Q.

0000a7e4 <tm47_guide>:
    a7e4:	01 00 01 3a 00                                      ...:.

0000a7e9 <tm19_guide>:
    a7e9:	01 00 01 1a 00                                      .....

0000a7ee <tm8_guide>:
    a7ee:	01 00 01 0c 00 00                                   ......

0000a7f4 <layer2_tl_0x10>:
    a7f4:	00 00 00 00                                         ....

0000a7f8 <tm10_guide>:
    a7f8:	01 00 01 0e 00 00 00 00                             ........

0000a800 <layer2_tl_0x12>:
    a800:	00 00 00 00                                         ....

0000a804 <layer2_tl_0x13>:
    a804:	00 00 00 00                                         ....

0000a808 <layer2_tl_0x14>:
    a808:	00 00 00 00                                         ....

0000a80c <layer2_tl_0x15>:
    a80c:	00 00 00 00                                         ....

0000a810 <rm91_guide>:
    a810:	01 08 ea 00 00 00 00 00                             ........

0000a818 <layer2_tl_0x17>:
    a818:	00 00 00 00                                         ....

0000a81c <layer2_tl_0x18>:
    a81c:	00 00 00 00                                         ....

0000a820 <rm63_guide>:
    a820:	01 0f 37 00                                         ..7.

0000a824 <layer2_tl_0x11>:
    a824:	00 00 00 00                                         ....

0000a828 <rm35_guide>:
    a828:	01 0f 31 00                                         ..1.

0000a82c <keyHoldCLIDict_DescEntry>:
    a82c:	53 65 6e 64 20 6b 65 79 2d 68 6f 6c 64 20 65 76     Send key-hold ev
    a83c:	65 6e 74 73 20 74 6f 20 74 68 65 20 6d 61 63 72     ents to the macr
    a84c:	6f 20 6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69 63     o module. Duplic
    a85c:	61 74 65 73 20 68 61 76 65 20 75 6e 64 65 66 69     ates have undefi
    a86c:	6e 65 64 20 62 65 68 61 76 69 6f 75 72 2e 0d 0a     ned behaviour...
    a87c:	09 09 1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20 53     ...[35mS10.[0m S
    a88c:	63 61 6e 63 6f 64 65 20 30 78 30 41 00 00 00 00     cancode 0x0A....

0000a89c <layer2_tl_0x16>:
    a89c:	00 00 00 00                                         ....

0000a8a0 <layer2_tl_0x1A>:
    a8a0:	00 00 00 00                                         ....

0000a8a4 <layer2_tl_0x1B>:
    a8a4:	00 00 00 00                                         ....

0000a8a8 <layer2_tl_0x1C>:
    a8a8:	00 00 00 00                                         ....

0000a8ac <layer2_tl_0x1D>:
    a8ac:	00 00 00 00                                         ....

0000a8b0 <tm55_guide>:
    a8b0:	01 00 01 45 00 00 00 00                             ...E....

0000a8b8 <layer2_tl_0x19>:
    a8b8:	00 00 00 00                                         ....

0000a8bc <layerDebugCLIDict_DescEntry>:
    a8bc:	4c 61 79 65 72 20 64 65 62 75 67 20 6d 6f 64 65     Layer debug mode
    a8cc:	2e 20 53 68 6f 77 73 20 6c 61 79 65 72 20 73 74     . Shows layer st
    a8dc:	61 63 6b 20 61 6e 64 20 61 6e 79 20 63 68 61 6e     ack and any chan
    a8ec:	67 65 73 2e 00                                      ges..

0000a8f1 <tm92_guide>:
    a8f1:	01 00 01 33 00                                      ...3.

0000a8f6 <tm64_guide>:
    a8f6:	01 00 01 4e 00                                      ...N.

0000a8fb <tm1_guide>:
    a8fb:	01 00 01 03 00                                      .....

0000a900 <layer1_tl_0x22>:
    a900:	00 00 00 00                                         ....

0000a904 <tm36_guide>:
    a904:	01 00 01 2b 00                                      ...+.

0000a909 <tm88_guide>:
    a909:	01 00 01 08 00 00 00                                .......

0000a910 <layer1_tl_0x25>:
    a910:	00 00 00 00                                         ....

0000a914 <rm89_guide>:
    a914:	01 08 b5 00 00                                      .....

0000a919 <tm82_guide>:
    a919:	01 00 01 2f 00 00 00                                .../...

0000a920 <layer2_tl_0x1E>:
    a920:	00 00 00 00                                         ....

0000a924 <layer2_tl_0x1F>:
    a924:	00 00 00 00                                         ....

0000a928 <tm59_guide>:
    a928:	01 00 01 49 00 00 00 00                             ...I....

0000a930 <layer2_tl_0x20>:
    a930:	00 00 00 00                                         ....

0000a934 <rm80_guide>:
    a934:	01 0f 45 00                                         ..E.

0000a938 <layer2_tl_0x22>:
    a938:	00 00 00 00                                         ....

0000a93c <tm23_guide>:
    a93c:	01 00 01 1e 00                                      .....

0000a941 <macroProcCLIDict_DescEntry>:
    a941:	50 61 75 73 65 2f 52 65 73 75 6d 65 20 6d 61 63     Pause/Resume mac
    a951:	72 6f 20 70 72 6f 63 65 73 73 69 6e 67 2e 00        ro processing..

0000a960 <layer2_tl_0x25>:
    a960:	00 00 00 00                                         ....

0000a964 <layer2_tl_0x26>:
    a964:	00 00 00 00                                         ....

0000a968 <rm24_guide>:
    a968:	01 0f 19 00                                         ....

0000a96c <layer2_tl_0x28>:
    a96c:	00 00 00 00                                         ....

0000a970 <layer2_tl_0x29>:
    a970:	00 00 00 00                                         ....

0000a974 <rm76_guide>:
    a974:	01 0f 3d 00                                         ..=.

0000a978 <rm48_guide>:
    a978:	01 0f 0c 00                                         ....

0000a97c <layer2_tl_0x2A>:
    a97c:	00 00 00 00                                         ....

0000a980 <layer2_tl_0x2B>:
    a980:	00 00 00 00                                         ....

0000a984 <layer2_tl_0x2C>:
    a984:	00 00 00 00                                         ....

0000a988 <layer2_tl_0x2D>:
    a988:	00 00 00 00                                         ....

0000a98c <layer2_tl_0x2E>:
    a98c:	00 00 00 00                                         ....

0000a990 <layer2_tl_0x2F>:
    a990:	00 00 00 00                                         ....

0000a994 <tm53_guide>:
    a994:	01 00 01 43 00                                      ...C.

0000a999 <tm25_guide>:
    a999:	01 00 01 20 00                                      ... .

0000a99e <rm52_guide>:
    a99e:	01 0f 0d 00                                         ....

0000a9a2 <tm77_guide>:
    a9a2:	01 00 01 03 00                                      .....

0000a9a7 <tm49_guide>:
    a9a7:	01 00 01 3c 00                                      ...<.

0000a9ac <rm78_guide>:
    a9ac:	01 0f 3b 00                                         ..;.

0000a9b0 <rm11_guide>:
    a9b0:	01 0f 1a 00                                         ....

0000a9b4 <LayerIndex>:
    a9b4:	f0 8a ff 1f 7d b3 00 00 02 59 00 00 24 8a ff 1f     ....}....Y..$...
    a9c4:	95 b3 00 00 02 34 00 00 50 8c ff 1f ad b3 00 00     .....4..P.......
    a9d4:	08 35 00 00                                         .5..

0000a9d8 <tm74_guide>:
    a9d8:	01 00 01 58 00                                      ...X.

0000a9dd <tm40_guide>:
    a9dd:	01 00 01 31 00                                      ...1.

0000a9e2 <tm12_guide>:
    a9e2:	01 00 01 10 00                                      .....

0000a9e7 <rm41_guide>:
    a9e7:	01 0f 25 00 00                                      ..%..

0000a9ec <layer2_tl_0x30>:
    a9ec:	01 00 00 00 59 00 00 00                             ....Y...

0000a9f4 <layer2_tl_0x31>:
    a9f4:	01 00 00 00 5a 00 00 00                             ....Z...

0000a9fc <layer2_tl_0x32>:
    a9fc:	01 00 00 00 5b 00 00 00                             ....[...

0000aa04 <layer2_tl_0x33>:
    aa04:	01 00 00 00 5c 00 00 00                             ....\...

0000aa0c <layer2_tl_0x34>:
    aa0c:	01 00 00 00 5d 00 00 00                             ....]...

0000aa14 <layer2_tl_0x35>:
    aa14:	01 00 00 00 5e 00 00 00                             ....^...

0000aa1c <rm65_guide>:
    aa1c:	01 0f e5 00                                         ....

0000aa20 <rm37_guide>:
    aa20:	01 0f e3 00                                         ....

0000aa24 <layer2_tl_0x23>:
    aa24:	00 00 00 00                                         ....

0000aa28 <layer2_tl_0x24>:
    aa28:	00 00 00 00                                         ....

0000aa2c <rm0_guide>:
    aa2c:	01 0f 29 00                                         ..).

0000aa30 <tm70_guide>:
    aa30:	01 00 01 54 00                                      ...T.

0000aa35 <tm26_guide>:
    aa35:	01 00 01 21 00                                      ...!.

0000aa3a <tm42_guide>:
    aa3a:	01 00 01 33 00                                      ...3.

0000aa3f <tm94_guide>:
    aa3f:	01 00 01 35 00                                      ...5.

0000aa44 <tm66_guide>:
    aa44:	01 00 01 50 00 00 00 00                             ...P....

0000aa4c <layer1_tl_0x30>:
    aa4c:	01 00 00 00 53 00 00 00                             ....S...

0000aa54 <tm38_guide>:
    aa54:	01 00 01 2f 00                                      .../.

0000aa59 <capListCLIDict_DescEntry>:
    aa59:	50 72 69 6e 74 73 20 61 6e 20 69 6e 64 65 78 65     Prints an indexe
    aa69:	64 20 6c 69 73 74 20 6f 66 20 61 6c 6c 20 6e 6f     d list of all no
    aa79:	6e 20 55 53 42 20 6b 65 79 63 6f 64 65 20 63 61     n USB keycode ca
    aa89:	70 61 62 69 6c 69 74 69 65 73 2e 00                 pabilities..

0000aa95 <rm59_guide>:
    aa95:	02 05 00 01 00 00 00                                .......

0000aa9c <default_tl_0x11>:
    aa9c:	01 00 00 00 0d 00 00 00                             ........

0000aaa4 <rm4_guide>:
    aaa4:	01 0f 1f 00                                         ....

0000aaa8 <default_tl_0x15>:
    aaa8:	01 00 00 00 0e 00 00 00                             ........

0000aab0 <rm30_guide>:
    aab0:	01 0f 28 00                                         ..(.

0000aab4 <rm82_guide>:
    aab4:	01 0f 40 00                                         ..@.

0000aab8 <rm54_guide>:
    aab8:	01 0f 0f 00                                         ....

0000aabc <rm26_guide>:
    aabc:	01 0f 1b 00                                         ....

0000aac0 <layer2_tl_0x21>:
    aac0:	00 00 00 00                                         ....

0000aac4 <rm8_guide>:
    aac4:	01 0f 17 00                                         ....

0000aac8 <tm83_guide>:
    aac8:	01 00 01 30 00 00 00 00                             ...0....

0000aad0 <default_tl_0x1E>:
    aad0:	01 00 00 00 17 00 00 00                             ........

0000aad8 <tm27_guide>:
    aad8:	01 00 01 22 00                                      ...".

0000aadd <tm79_guide>:
    aadd:	01 00 01 05 00 00 00                                .......

0000aae4 <layer2_tl_0x27>:
    aae4:	00 00 00 00                                         ....

0000aae8 <rm13_guide>:
    aae8:	02 0f e3 0f 29 00                                   ....).

0000aaee <rm3_guide>:
    aaee:	01 0f 20 00                                         .. .

0000aaf2 <rm71_guide>:
    aaf2:	01 0f 52 00                                         ..R.

0000aaf6 <tm14_guide>:
    aaf6:	01 00 01 15 00                                      .....

0000aafb <rm43_guide>:
    aafb:	01 0f 27 00                                         ..'.

0000aaff <rm15_guide>:
    aaff:	01 0f 09 00                                         ....

0000ab03 <tm54_guide>:
    ab03:	01 00 01 44 00                                      ...D.

0000ab08 <rm67_guide>:
    ab08:	03 0f e6 0f e4 0f 07 00                             ........

0000ab10 <rm39_guide>:
    ab10:	01 0f 23 00                                         ..#.

0000ab14 <tm72_guide>:
    ab14:	01 00 01 56 00                                      ...V.

0000ab19 <rm6_guide>:
    ab19:	01 0f 2e 00                                         ....

0000ab1d <tm44_guide>:
    ab1d:	01 00 01 35 00                                      ...5.

0000ab22 <tm16_guide>:
    ab22:	01 00 01 17 00                                      .....

0000ab27 <tm81_guide>:
    ab27:	01 00 01 07 00                                      .....

0000ab2c <tm68_guide>:
    ab2c:	01 00 01 52 00                                      ...R.

0000ab31 <tm5_guide>:
    ab31:	01 00 01 07 00 00 00                                .......

0000ab38 <layer1_tl_0x18>:
    ab38:	00 00 00 00                                         ....

0000ab3c <tm46_guide>:
    ab3c:	01 00 01 39 00                                      ...9.

0000ab41 <rm2_guide>:
    ab41:	01 0f 21 00                                         ..!.

0000ab45 <tm31_guide>:
    ab45:	01 00 01 26 00                                      ...&.

0000ab4a <rm60_guide>:
    ab4a:	01 0f 11 00                                         ....

0000ab4e <rm32_guide>:
    ab4e:	01 0f 2a 00                                         ..*.

0000ab52 <rm84_guide>:
    ab52:	01 0f 42 00                                         ..B.

0000ab56 <rm56_guide>:
    ab56:	01 0f 34 00                                         ..4.

0000ab5a <rm28_guide>:
    ab5a:	01 0f e1 00                                         ....

0000ab5e <tm61_guide>:
    ab5e:	01 00 01 4b 00                                      ...K.

0000ab63 <tm33_guide>:
    ab63:	01 00 01 28 00                                      ...(.

0000ab68 <rm88_guide>:
    ab68:	01 08 cd 00 00                                      .....

0000ab6d <tm85_guide>:
    ab6d:	01 00 01 32 00                                      ...2.

0000ab72 <tm57_guide>:
    ab72:	01 00 01 47 00                                      ...G.

0000ab77 <rm86_guide>:
    ab77:	01 09 00                                            ...

0000ab7a <tm29_guide>:
    ab7a:	01 00 01 24 00                                      ...$.

0000ab7f <rm1_guide>:
    ab7f:	01 0f 22 00                                         ..".

0000ab83 <macroListCLIDict_DescEntry>:
    ab83:	4c 69 73 74 20 74 68 65 20 64 65 66 69 6e 65 64     List the defined
    ab93:	20 74 72 69 67 67 65 72 20 61 6e 64 20 72 65 73      trigger and res
    aba3:	75 6c 74 20 6d 61 63 72 6f 73 2e 00                 ult macros..

0000abaf <tm20_guide>:
    abaf:	01 00 01 1b 00                                      .....

0000abb4 <layerStateCLIDict_DescEntry>:
    abb4:	4d 6f 64 69 66 79 20 73 70 65 63 69 66 69 65 64     Modify specified
    abc4:	20 69 6e 64 65 78 65 64 20 6c 61 79 65 72 20 73      indexed layer s
    abd4:	74 61 74 65 20 3c 6c 61 79 65 72 3e 20 3c 73 74     tate <layer> <st
    abe4:	61 74 65 20 62 79 74 65 3e 2e 0d 0a 09 09 1b 5b     ate byte>......[
    abf4:	33 35 6d 4c 32 1b 5b 30 6d 20 49 6e 64 65 78 65     35mL2.[0m Indexe
    ac04:	64 20 4c 61 79 65 72 20 30 78 30 32 0d 0a 09 09     d Layer 0x02....
    ac14:	30 20 4f 66 66 2c 20 31 20 53 68 69 66 74 2c 20     0 Off, 1 Shift, 
    ac24:	32 20 4c 61 74 63 68 2c 20 34 20 4c 6f 63 6b 20     2 Latch, 4 Lock 
    ac34:	53 74 61 74 65 73 00                                States.

0000ac3b <rm73_guide>:
    ac3b:	01 0f e7 00                                         ....

0000ac3f <rm45_guide>:
    ac3f:	01 0f 30 00                                         ..0.

0000ac43 <rm17_guide>:
    ac43:	01 0f 16 00 00                                      .....

0000ac48 <default_tl_0x42>:
    ac48:	01 00 00 00 34 00 00 00                             ....4...

0000ac50 <rm69_guide>:
    ac50:	01 0f 50 00                                         ..P.

0000ac54 <tm50_guide>:
    ac54:	01 00 01 3d 00 00 00 00                             ...=....

0000ac5c <default_tl_0x02>:
    ac5c:	01 00 00 00 00 00 00 00                             ........

0000ac64 <default_tl_0x03>:
    ac64:	01 00 00 00 01 00 00 00                             ........

0000ac6c <default_tl_0x04>:
    ac6c:	01 00 00 00 02 00 00 00                             ........

0000ac74 <default_tl_0x05>:
    ac74:	01 00 00 00 03 00 00 00                             ........

0000ac7c <default_tl_0x06>:
    ac7c:	01 00 00 00 04 00 00 00                             ........

0000ac84 <default_tl_0x07>:
    ac84:	01 00 00 00 05 00 00 00                             ........

0000ac8c <default_tl_0x08>:
    ac8c:	01 00 00 00 06 00 00 00                             ........

0000ac94 <default_tl_0x09>:
    ac94:	00 00 00 00                                         ....

0000ac98 <tm7_guide>:
    ac98:	01 00 01 0b 00                                      .....

0000ac9d <layerListCLIDict_DescEntry>:
    ac9d:	4c 69 73 74 20 61 76 61 69 6c 61 62 6c 65 20 6c     List available l
    acad:	61 79 65 72 73 2e 00                                ayers..

0000acb4 <default_tl_0x0A>:
    acb4:	00 00 00 00                                         ....

0000acb8 <default_tl_0x0B>:
    acb8:	01 00 00 00 07 00 00 00                             ........

0000acc0 <default_tl_0x0C>:
    acc0:	01 00 00 00 08 00 00 00                             ........

0000acc8 <default_tl_0x0D>:
    acc8:	01 00 00 00 09 00 00 00                             ........

0000acd0 <default_tl_0x0E>:
    acd0:	01 00 00 00 0a 00 00 00                             ........

0000acd8 <default_tl_0x0F>:
    acd8:	01 00 00 00 0b 00 00 00                             ........

0000ace0 <rm90_guide>:
    ace0:	01 08 e2 00 00                                      .....

0000ace5 <rm62_guide>:
    ace5:	01 0f 36 00                                         ..6.

0000ace9 <rm34_guide>:
    ace9:	02 0f e0 0f 50 00                                   ....P.

0000acef <rm58_guide>:
    acef:	01 0f e4 00                                         ....

0000acf3 <tm91_guide>:
    acf3:	01 00 01 32 00                                      ...2.

0000acf8 <tm63_guide>:
    acf8:	01 00 01 4d 00 00 00 00                             ...M....

0000ad00 <default_tl_0x10>:
    ad00:	01 00 00 00 0c 00 00 00                             ........

0000ad08 <tm35_guide>:
    ad08:	01 00 01 2a 00 00 00 00                             ...*....

0000ad10 <default_tl_0x12>:
    ad10:	00 00 00 00                                         ....

0000ad14 <default_tl_0x13>:
    ad14:	00 00 00 00                                         ....

0000ad18 <default_tl_0x14>:
    ad18:	00 00 00 00                                         ....

0000ad1c <tm87_guide>:
    ad1c:	01 00 01 34 00 00 00 00                             ...4....

0000ad24 <default_tl_0x16>:
    ad24:	01 00 00 00 0f 00 00 00                             ........

0000ad2c <default_tl_0x17>:
    ad2c:	01 00 00 00 10 00 00 00                             ........

0000ad34 <default_tl_0x18>:
    ad34:	01 00 00 00 11 00 00 00                             ........

0000ad3c <default_tl_0x19>:
    ad3c:	01 00 00 00 12 00 00 00                             ........

0000ad44 <default_tl_0x1A>:
    ad44:	01 00 00 00 13 00 00 00                             ........

0000ad4c <default_tl_0x1B>:
    ad4c:	01 00 00 00 14 00 00 00                             ........

0000ad54 <default_tl_0x1C>:
    ad54:	01 00 00 00 15 00 00 00                             ........

0000ad5c <default_tl_0x1D>:
    ad5c:	01 00 00 00 16 00 00 00                             ........

0000ad64 <tm69_guide>:
    ad64:	01 00 01 53 00 00 00 00                             ...S....

0000ad6c <default_tl_0x1F>:
    ad6c:	01 00 00 00 18 00 00 00                             ........

0000ad74 <tm89_guide>:
    ad74:	01 00 01 30 00                                      ...0.

0000ad79 <tm24_guide>:
    ad79:	01 00 01 1f 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     ......[1;32mINFO
    ad89:	1b 5b 30 6d 20 2d 20 43 61 70 61 62 69 6c 69 74     .[0m - Capabilit
    ad99:	69 65 73 20 4c 69 73 74 20 00 0d 0a 09 00 1b 5b     ies List ......[
    ada9:	31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20     1;32mINFO.[0m - 
    adb9:	4b 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47     K..[1;33mWARNING
    adc9:	1b 5b 30 6d 20 2d 20 66 6c 61 73 68 4d 6f 64 65     .[0m - flashMode
    add9:	45 6e 61 62 6c 65 64 20 6e 6f 74 20 73 65 74 2c     Enabled not set,
    ade9:	20 63 61 6e 63 65 6c 6c 69 6e 67 20 66 69 72 6d      cancelling firm
    adf9:	77 61 72 65 20 72 65 6c 6f 61 64 2e 2e 2e 0d 0a     ware reload.....
    ae09:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    ae19:	20 2d 20 53 65 74 20 66 6c 61 73 68 4d 6f 64 65      - Set flashMode
    ae29:	45 6e 61 62 6c 65 64 20 74 6f 20 31 20 69 6e 20     Enabled to 1 in 
    ae39:	79 6f 75 72 20 6b 6c 6c 20 63 6f 6e 66 69 67 75     your kll configu
    ae49:	72 61 74 69 6f 6e 2e 00 1b 5b 31 3b 33 32 6d 49     ration...[1;32mI
    ae59:	4e 46 4f 1b 5b 30 6d 20 2d 20 4c 61 79 65 72 20     NFO.[0m - Layer 
    ae69:	44 65 62 75 67 20 4d 6f 64 65 3a 20 00 1b 5b 31     Debug Mode: ..[1
    ae79:	3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 53     ;32mINFO.[0m - S
    ae89:	65 74 74 69 6e 67 20 4c 61 79 65 72 20 4c 00 20     etting Layer L. 
    ae99:	74 6f 20 2d 20 00 1b 5b 31 3b 33 32 6d 49 4e 46     to - ..[1;32mINF
    aea9:	4f 1b 5b 30 6d 20 2d 20 4d 61 63 72 6f 20 44 65     O.[0m - Macro De
    aeb9:	62 75 67 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b 33     bug Mode: ..[1;3
    aec9:	32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 4d 61 63     2mINFO.[0m - Mac
    aed9:	72 6f 20 50 72 6f 63 65 73 73 69 6e 67 20 4d 6f     ro Processing Mo
    aee9:	64 65 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     de: ..[1;32mINFO
    aef9:	1b 5b 30 6d 20 2d 20 4c 61 79 65 72 20 4c 69 73     .[0m - Layer Lis
    af09:	74 00 20 1b 5b 31 6d 28 64 65 66 61 75 6c 74 29     t. .[1m(default)
    af19:	1b 5b 30 6d 00 0d 0a 09 09 20 4c 61 79 65 72 20     .[0m..... Layer 
    af29:	53 74 61 74 65 3a 20 00 20 46 69 72 73 74 20 2d     State: . First -
    af39:	3e 20 4c 61 73 74 20 49 6e 64 69 63 65 73 3a 20     > Last Indices: 
    af49:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    af59:	20 2d 20 50 65 6e 64 69 6e 67 20 4b 65 79 20 45      - Pending Key E
    af69:	76 65 6e 74 73 3a 20 00 20 3a 20 00 1b 5b 31 3b     vents: . : ..[1;
    af79:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 50 65     32mINFO.[0m - Pe
    af89:	6e 64 69 6e 67 20 54 72 69 67 67 65 72 20 4d 61     nding Trigger Ma
    af99:	63 72 6f 73 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e     cros: ..[1;32mIN
    afa9:	46 4f 1b 5b 30 6d 20 2d 20 50 65 6e 64 69 6e 67     FO.[0m - Pending
    afb9:	20 52 65 73 75 6c 74 20 4d 61 63 72 6f 73 3a 20      Result Macros: 
    afc9:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    afd9:	20 2d 20 54 72 69 67 67 65 72 20 4d 61 63 72 6f      - Trigger Macro
    afe9:	73 20 52 61 6e 67 65 3a 20 54 30 20 2d 3e 20 54     s Range: T0 -> T
    aff9:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    b009:	20 2d 20 52 65 73 75 6c 74 20 20 4d 61 63 72 6f      - Result  Macro
    b019:	73 20 52 61 6e 67 65 3a 20 52 30 20 2d 3e 20 52     s Range: R0 -> R
    b029:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    b039:	20 2d 20 54 72 69 67 67 65 72 20 3a 20 52 65 73      - Trigger : Res
    b049:	75 6c 74 20 4d 61 63 72 6f 20 50 61 69 72 73 00     ult Macro Pairs.
    b059:	09 54 00 20 3a 20 52 00 1b 5b 31 3b 33 35 6d 44     .T. : R..[1;35mD
    b069:	45 42 55 47 1b 5b 30 6d 20 2d 20 4c 61 79 65 72     EBUG.[0m - Layer
    b079:	20 00 20 30 00 4d 61 63 72 6f 5f 6c 61 79 65 72      . 0.Macro_layer
    b089:	53 74 61 74 65 28 6c 61 79 65 72 49 6e 64 65 78     State(layerIndex
    b099:	2c 6c 61 79 65 72 53 74 61 74 65 29 00 4d 61 63     ,layerState).Mac
    b0a9:	72 6f 5f 6c 61 79 65 72 4c 61 74 63 68 28 6c 61     ro_layerLatch(la
    b0b9:	79 65 72 49 6e 64 65 78 29 00 4d 61 63 72 6f 5f     yerIndex).Macro_
    b0c9:	6c 61 79 65 72 4c 6f 63 6b 28 6c 61 79 65 72 49     layerLock(layerI
    b0d9:	6e 64 65 78 29 00 4d 61 63 72 6f 5f 6c 61 79 65     ndex).Macro_laye
    b0e9:	72 53 68 69 66 74 28 6c 61 79 65 72 49 6e 64 65     rShift(layerInde
    b0f9:	78 29 00 4d 61 63 72 6f 5f 6c 61 79 65 72 52 6f     x).Macro_layerRo
    b109:	74 61 74 65 28 70 72 65 76 69 6f 75 73 29 00 1b     tate(previous)..
    b119:	5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30     [1;5;31mERROR.[0
    b129:	6d 20 2d 20 53 63 61 6e 20 43 6f 64 65 20 68 61     m - Scan Code ha
    b139:	73 20 6e 6f 20 64 65 66 69 6e 65 64 20 54 72 69     s no defined Tri
    b149:	67 67 65 72 20 4d 61 63 72 6f 3a 20 00 1b 5b 31     gger Macro: ..[1
    b159:	3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20     ;5;31mERROR.[0m 
    b169:	2d 20 49 6e 76 61 6c 69 64 20 6b 65 79 20 73 74     - Invalid key st
    b179:	61 74 65 20 2d 20 00 1b 5b 31 3b 35 3b 33 31 6d     ate - ..[1;5;31m
    b189:	45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76 61     ERROR.[0m - Inva
    b199:	6c 69 64 20 74 79 70 65 20 2d 20 00 1b 5b 31 3b     lid type - ..[1;
    b1a9:	33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d     33mWARNING.[0m -
    b1b9:	20 53 63 61 6e 43 6f 64 65 20 69 73 20 6f 75 74      ScanCode is out
    b1c9:	20 6f 66 20 72 61 6e 67 65 2f 6e 6f 74 20 64 65      of range/not de
    b1d9:	66 69 6e 65 64 20 2d 20 00 1b 5b 31 3b 33 33 6d     fined - ..[1;33m
    b1e9:	57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 53 63     WARNING.[0m - Sc
    b1f9:	61 6e 43 6f 64 65 20 69 73 20 6f 75 74 20 6f 66     anCode is out of
    b209:	20 72 61 6e 67 65 2f 6e 6f 74 20 64 65 66 69 6e      range/not defin
    b219:	65 64 3a 20 00 1b 5b 31 3b 33 35 6d 44 45 42 55     ed: ..[1;35mDEBU
    b229:	47 1b 5b 30 6d 20 2d 20 4d 61 63 72 6f 20 53 74     G.[0m - Macro St
    b239:	65 70 0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     ep....[1;32mINFO
    b249:	1b 5b 30 6d 20 2d 20 54 72 69 67 67 65 72 20 4d     .[0m - Trigger M
    b259:	61 63 72 6f 20 49 6e 64 65 78 3a 20 00 7c 00 3b     acro Index: .|.;
    b269:	00 0d 0a 50 6f 73 69 74 69 6f 6e 3a 20 00 0d 0a     ...Position: ...
    b279:	52 65 73 75 6c 74 20 4d 61 63 72 6f 20 49 6e 64     Result Macro Ind
    b289:	65 78 3a 20 00 0d 0a 54 72 69 67 67 65 72 20 4d     ex: ...Trigger M
    b299:	61 63 72 6f 20 53 74 61 74 65 3a 20 00 57 61 69     acro State: .Wai
    b2a9:	74 69 6e 67 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     ting..[1;32mINFO
    b2b9:	1b 5b 30 6d 20 2d 20 52 65 73 75 6c 74 20 4d 61     .[0m - Result Ma
    b2c9:	63 72 6f 20 49 6e 64 65 78 3a 20 00 2c 00 0d 0a     cro Index: .,...
    b2d9:	46 69 6e 61 6c 20 54 72 69 67 67 65 72 20 53 74     Final Trigger St
    b2e9:	61 74 65 20 28 53 74 61 74 65 2f 54 79 70 65 29     ate (State/Type)
    b2f9:	3a 20 00 63 61 70 4c 69 73 74 00 63 61 70 53 65     : .capList.capSe
    b309:	6c 65 63 74 00 6b 65 79 48 6f 6c 64 00 6b 65 79     lect.keyHold.key
    b319:	50 72 65 73 73 00 6b 65 79 52 65 6c 65 61 73 65     Press.keyRelease
    b329:	00 6c 61 79 65 72 44 65 62 75 67 00 6c 61 79 65     .layerDebug.laye
    b339:	72 4c 69 73 74 00 6c 61 79 65 72 53 74 61 74 65     rList.layerState
    b349:	00 6d 61 63 72 6f 44 65 62 75 67 00 6d 61 63 72     .macroDebug.macr
    b359:	6f 4c 69 73 74 00 6d 61 63 72 6f 50 72 6f 63 00     oList.macroProc.
    b369:	6d 61 63 72 6f 53 68 6f 77 00 6d 61 63 72 6f 53     macroShow.macroS
    b379:	74 65 70 00 44 3a 20 4d 44 45 72 67 6f 31 20 2b     tep.D: MDErgo1 +
    b389:	20 6c 63 64 46 75 6e 63 4d 61 70 00 31 3a 20 4d      lcdFuncMap.1: M
    b399:	44 45 72 67 6f 31 20 2b 20 6c 63 64 46 75 6e 63     DErgo1 + lcdFunc
    b3a9:	4d 61 70 00 32 3a 20 4d 44 45 72 67 6f 31 20 2b     Map.2: MDErgo1 +
    b3b9:	20 6c 63 64 46 75 6e 63 4d 61 70 00                  lcdFuncMap.

0000b3c5 <tm22_guide>:
    b3c5:	01 00 01 1d 00                                      .....

0000b3ca <rm51_guide>:
    b3ca:	01 0f 0b 00                                         ....

0000b3ce <rm23_guide>:
    b3ce:	01 0f 05 00                                         ....

0000b3d2 <rm75_guide>:
    b3d2:	01 0f 3e 00                                         ..>.

0000b3d6 <rm47_guide>:
    b3d6:	01 0f 18 00                                         ....

0000b3da <rm19_guide>:
    b3da:	01 0f 2b 00                                         ..+.

0000b3de <macroShowCLIDict_DescEntry>:
    b3de:	53 68 6f 77 20 74 68 65 20 6d 61 63 72 6f 20 63     Show the macro c
    b3ee:	6f 72 72 65 73 70 6f 6e 64 69 6e 67 20 74 6f 20     orresponding to 
    b3fe:	74 68 65 20 67 69 76 65 6e 20 69 6e 64 65 78 2e     the given index.
    b40e:	0d 0a 09 09 1b 5b 33 35 6d 54 31 36 1b 5b 30 6d     .....[35mT16.[0m
    b41e:	20 49 6e 64 65 78 65 64 20 54 72 69 67 67 65 72      Indexed Trigger
    b42e:	20 4d 61 63 72 6f 20 30 78 31 30 2c 20 1b 5b 33      Macro 0x10, .[3
    b43e:	35 6d 52 31 32 1b 5b 30 6d 20 49 6e 64 65 78 65     5mR12.[0m Indexe
    b44e:	64 20 52 65 73 75 6c 74 20 4d 61 63 72 6f 20 30     d Result Macro 0
    b45e:	78 30 43 00                                         x0C.

0000b462 <tm80_guide>:
    b462:	01 00 01 06 00                                      .....

0000b467 <tm52_guide>:
    b467:	01 00 01 42 00                                      ...B.

0000b46c <default_tl_0x20>:
    b46c:	01 00 00 00 19 00 00 00                             ........

0000b474 <default_tl_0x21>:
    b474:	01 00 00 00 1a 00 00 00                             ........

0000b47c <default_tl_0x22>:
    b47c:	01 00 00 00 1b 00 00 00                             ........

0000b484 <default_tl_0x23>:
    b484:	01 00 00 00 1c 00 00 00                             ........

0000b48c <default_tl_0x24>:
    b48c:	01 00 00 00 1d 00 00 00                             ........

0000b494 <default_tl_0x25>:
    b494:	01 00 00 00 1e 00 00 00                             ........

0000b49c <default_tl_0x26>:
    b49c:	01 00 00 00 1f 00 00 00                             ........

0000b4a4 <default_tl_0x27>:
    b4a4:	01 00 00 00 20 00 00 00                             .... ...

0000b4ac <default_tl_0x28>:
    b4ac:	01 00 00 00 21 00 00 00                             ....!...

0000b4b4 <default_tl_0x29>:
    b4b4:	01 00 00 00 22 00 00 00                             ...."...

0000b4bc <tm9_guide>:
    b4bc:	01 00 01 0d 00                                      .....

0000b4c1 <rm10_guide>:
    b4c1:	01 0f 08 00 00 00 00                                .......

0000b4c8 <default_tl_0x2A>:
    b4c8:	01 00 00 00 23 00 00 00 1b 5b 31 3b 35 3b 33 31     ....#....[1;5;31
    b4d8:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 4c 45 44     mERROR.[0m - LED
    b4e8:	20 53 74 61 74 65 20 54 79 70 65 20 2d 20 4e 6f      State Type - No
    b4f8:	74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 2e 2e 2e     t implemented...
    b508:	0d 0a 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f     ....[1;5;31mERRO
    b518:	52 1b 5b 30 6d 20 2d 20 41 6e 61 6c 6f 67 20 53     R.[0m - Analog S
    b528:	74 61 74 65 20 54 79 70 65 20 2d 20 4e 6f 74 20     tate Type - Not 
    b538:	69 6d 70 6c 65 6d 65 6e 74 65 64 2e 2e 2e 0d 0a     implemented.....
    b548:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    b558:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 53 74     [0m - Invalid St
    b568:	61 74 65 20 54 79 70 65 2e 20 54 68 69 73 20 69     ate Type. This i
    b578:	73 20 61 20 62 75 67 2e 0d 0a 00                    s a bug....

0000b583 <kbdProtocolCLIDict_DescEntry>:
    b583:	4b 65 79 62 6f 61 72 64 20 50 72 6f 74 6f 63 6f     Keyboard Protoco
    b593:	6c 20 4d 6f 64 65 3a 20 30 20 2d 20 42 6f 6f 74     l Mode: 0 - Boot
    b5a3:	2c 20 31 20 2d 20 4f 53 2f 4e 4b 52 4f 20 4d 6f     , 1 - OS/NKRO Mo
    b5b3:	64 65 00                                            de.

0000b5b6 <setKeysCLIDict_DescEntry>:
    b5b6:	50 72 65 70 61 72 65 20 61 20 73 70 61 63 65 20     Prepare a space 
    b5c6:	73 65 70 61 72 61 74 65 64 20 6c 69 73 74 20 6f     separated list o
    b5d6:	66 20 55 53 42 20 63 6f 64 65 73 20 28 64 65 63     f USB codes (dec
    b5e6:	69 6d 61 6c 29 2e 20 57 61 69 74 73 20 75 6e 74     imal). Waits unt
    b5f6:	69 6c 20 1b 5b 33 35 6d 73 65 6e 64 4b 65 79 73     il .[35msendKeys
    b606:	1b 5b 30 6d 2e 00                                   .[0m..

0000b60c <outputCLIDictName>:
    b60c:	55 53 42 20 4d 6f 64 75 6c 65 20 43 6f 6d 6d 61     USB Module Comma
    b61c:	6e 64 73 00                                         nds.

0000b620 <CSWTCH.90>:
    b620:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b630:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b640:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b650:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b660:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b670:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b680:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................

0000b690 <CSWTCH.87>:
    b690:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 02     ................
    b6a0:	02 02 02 02 02 02 02 03 03 03 03 03 03 03 03 04     ................
    b6b0:	04 04 04 04 04 04 04 05 05 05 05 05 05 05 05        ...............

0000b6bf <outputDebugCLIDict_DescEntry>:
    b6bf:	54 6f 67 67 6c 65 20 4f 75 74 70 75 74 20 44 65     Toggle Output De
    b6cf:	62 75 67 20 6d 6f 64 65 2e 00 00 00 00              bug mode.....

0000b6dc <outputCLIDict>:
    b6dc:	46 ba 00 00 83 b5 00 00 bd 60 00 00 52 ba 00 00     F........`..R...
    b6ec:	bf b6 00 00 fd 5f 00 00 5e ba 00 00 45 bb 00 00     ....._..^...E...
    b6fc:	41 60 00 00 67 ba 00 00 14 bc 00 00 a1 5f 00 00     A`..g........_..
    b70c:	70 ba 00 00 b6 b5 00 00 c5 5f 00 00 78 ba 00 00     p........_..x...
    b71c:	3c b7 00 00 21 60 00 00 7f ba 00 00 8b ba 00 00     <...!`..........
    b72c:	69 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00     i`..............

0000b73c <setModCLIDict_DescEntry>:
    b73c:	53 65 74 20 74 68 65 20 6d 6f 64 66 69 65 72 20     Set the modfier 
    b74c:	62 79 74 65 3a 0d 0a 09 09 31 20 4c 43 74 72 6c     byte:....1 LCtrl
    b75c:	2c 20 32 20 4c 53 68 66 74 2c 20 34 20 4c 41 6c     , 2 LShft, 4 LAl
    b76c:	74 2c 20 38 20 4c 47 55 49 2c 20 31 36 20 52 43     t, 8 LGUI, 16 RC
    b77c:	74 72 6c 2c 20 33 32 20 52 53 68 66 74 2c 20 36     trl, 32 RShft, 6
    b78c:	34 20 52 41 6c 74 2c 20 31 32 38 20 52 47 55 49     4 RAlt, 128 RGUI
    b79c:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    b7ac:	20 2d 20 4c 45 44 20 53 74 61 74 65 3a 20 00 1b      - LED State: ..
    b7bc:	5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d     [1;32mINFO.[0m -
    b7cc:	20 55 53 42 20 49 6e 69 74 20 54 69 6d 65 3a 20      USB Init Time: 
    b7dc:	00 20 6d 73 20 2d 20 00 20 74 69 63 6b 73 00 1b     . ms - . ticks..
    b7ec:	5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d     [1;32mINFO.[0m -
    b7fc:	20 53 65 74 74 69 6e 67 20 4b 65 79 62 6f 61 72      Setting Keyboar
    b80c:	64 20 50 72 6f 74 6f 63 6f 6c 20 74 6f 3a 20 00     d Protocol to: .
    b81c:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    b82c:	2d 20 4b 65 79 62 6f 61 72 64 20 50 72 6f 74 6f     - Keyboard Proto
    b83c:	63 6f 6c 3a 20 00 4f 75 74 70 75 74 5f 63 6f 6e     col: .Output_con
    b84c:	73 43 74 72 6c 53 65 6e 64 28 63 6f 6e 73 43 6f     sCtrlSend(consCo
    b85c:	64 65 29 00 4f 75 74 70 75 74 5f 6e 6f 6e 65 53     de).Output_noneS
    b86c:	65 6e 64 28 29 00 4f 75 74 70 75 74 5f 73 79 73     end().Output_sys
    b87c:	43 74 72 6c 53 65 6e 64 28 73 79 73 43 6f 64 65     CtrlSend(sysCode
    b88c:	29 00 4f 75 74 70 75 74 5f 66 6c 61 73 68 4d 6f     ).Output_flashMo
    b89c:	64 65 28 29 00 4f 75 74 70 75 74 5f 75 73 62 4d     de().Output_usbM
    b8ac:	6f 75 73 65 28 6d 6f 75 73 65 42 75 74 74 6f 6e     ouse(mouseButton
    b8bc:	2c 72 65 6c 58 2c 72 65 6c 59 29 00 4f 75 74 70     ,relX,relY).Outp
    b8cc:	75 74 5f 6b 62 64 50 72 6f 74 6f 63 6f 6c 42 6f     ut_kbdProtocolBo
    b8dc:	6f 74 28 29 00 4f 75 74 70 75 74 5f 6b 62 64 50     ot().Output_kbdP
    b8ec:	72 6f 74 6f 63 6f 6c 4e 4b 52 4f 28 29 00 4f 75     rotocolNKRO().Ou
    b8fc:	74 70 75 74 5f 74 6f 67 67 6c 65 4b 62 64 50 72     tput_toggleKbdPr
    b90c:	6f 74 6f 63 6f 6c 28 29 00 4f 75 74 70 75 74 5f     otocol().Output_
    b91c:	75 73 62 43 6f 64 65 53 65 6e 64 28 75 73 62 43     usbCodeSend(usbC
    b92c:	6f 64 65 29 00 1b 5b 31 3b 33 33 6d 57 41 52 4e     ode)..[1;33mWARN
    b93c:	49 4e 47 1b 5b 30 6d 20 2d 20 55 53 42 20 4b 65     ING.[0m - USB Ke
    b94c:	79 20 6c 69 6d 69 74 20 72 65 61 63 68 65 64 0d     y limit reached.
    b95c:	0a 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47     ...[1;33mWARNING
    b96c:	1b 5b 30 6d 20 2d 20 55 53 42 20 43 6f 64 65 20     .[0m - USB Code 
    b97c:	6e 6f 74 20 77 69 74 68 69 6e 20 34 2d 34 39 20     not within 4-49 
    b98c:	28 30 78 34 2d 30 78 33 31 29 2c 20 35 31 2d 31     (0x4-0x31), 51-1
    b99c:	35 35 20 28 30 78 33 33 2d 30 78 39 42 29 2c 20     55 (0x33-0x9B), 
    b9ac:	31 35 37 2d 31 36 34 20 28 30 78 39 44 2d 30 78     157-164 (0x9D-0x
    b9bc:	41 34 29 2c 20 31 37 36 2d 32 32 31 20 28 30 78     A4), 176-221 (0x
    b9cc:	42 30 2d 30 78 44 44 29 20 6f 72 20 32 32 34 2d     B0-0xDD) or 224-
    b9dc:	32 33 31 20 28 30 78 45 30 2d 30 78 45 37 29 20     231 (0xE0-0xE7) 
    b9ec:	4e 4b 52 4f 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b     NKRO Mode: ..[1;
    b9fc:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 45 78     32mINFO.[0m - Ex
    ba0c:	74 65 72 6e 61 6c 20 41 76 61 69 6c 61 62 6c 65     ternal Available
    ba1c:	20 43 75 72 72 65 6e 74 20 43 68 61 6e 67 65 64      Current Changed
    ba2c:	2e 20 54 6f 74 61 6c 20 41 76 61 69 6c 61 62 6c     . Total Availabl
    ba3c:	65 3a 20 00 20 6d 41 0d 0a 00 6b 62 64 50 72 6f     e: . mA...kbdPro
    ba4c:	74 6f 63 6f 6c 00 6f 75 74 70 75 74 44 65 62 75     tocol.outputDebu
    ba5c:	67 00 72 65 61 64 4c 45 44 73 00 73 65 6e 64 4b     g.readLEDs.sendK
    ba6c:	65 79 73 00 73 65 74 4b 65 79 73 00 73 65 74 4d     eys.setKeys.setM
    ba7c:	6f 64 00 75 73 62 49 6e 69 74 54 69 6d 65 00        od.usbInitTime.

0000ba8b <usbInitTimeCLIDict_DescEntry>:
    ba8b:	44 69 73 70 6c 61 79 73 20 74 68 65 20 74 69 6d     Displays the tim
    ba9b:	65 20 69 6e 20 6d 73 20 66 72 6f 6d 20 75 73 62     e in ms from usb
    baab:	5f 69 6e 69 74 28 29 20 74 69 6c 6c 20 74 68 65     _init() till the
    babb:	20 6c 61 73 74 20 73 65 74 75 70 20 63 61 6c 6c      last setup call
    bacb:	2e 00                                               ..

0000bacd <CSWTCH.91>:
    bacd:	00 01 02 03 04 05 06 07                             ........

0000bad5 <CSWTCH.89>:
    bad5:	06 06 06 06 06 06 06 06 07 07 07 07 07 07 07 07     ................
    bae5:	08 08 08 08 08 08 08 08 09 09 09 09 09 09 09 09     ................
    baf5:	0a 0a 0a 0a 0a 0a 0a 0a 0b 0b 0b 0b 0b 0b 0b 0b     ................
    bb05:	0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d 0d 0d 0d 0d 0d     ................
    bb15:	0e 0e 0e 0e 0e 0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bb25:	10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11     ................
    bb35:	12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13     ................

0000bb45 <readLEDsCLIDict_DescEntry>:
    bb45:	52 65 61 64 20 4c 45 44 20 62 79 74 65 3a 0d 0a     Read LED byte:..
    bb55:	09 09 31 20 4e 75 6d 4c 63 6b 2c 20 32 20 43 61     ..1 NumLck, 2 Ca
    bb65:	70 73 4c 63 6b 2c 20 34 20 53 63 72 6c 4c 63 6b     psLck, 4 ScrlLck
    bb75:	2c 20 31 36 20 4b 61 6e 61 2c 20 65 74 63 2e 00     , 16 Kana, etc..

0000bb85 <CSWTCH.88>:
    bb85:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07 00     ................
    bb95:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07 00     ................
    bba5:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07        ...............

0000bbb4 <CSWTCH.92>:
    bbb4:	15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16     ................
    bbc4:	17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18     ................
    bbd4:	19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 1a 1a 1a     ................

0000bbe4 <CSWTCH.93>:
    bbe4:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    bbf4:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    bc04:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................

0000bc14 <sendKeysCLIDict_DescEntry>:
    bc14:	53 65 6e 64 20 74 68 65 20 70 72 65 70 61 72 65     Send the prepare
    bc24:	64 20 6c 69 73 74 20 6f 66 20 55 53 42 20 63 6f     d list of USB co
    bc34:	64 65 73 20 61 6e 64 20 6d 6f 64 69 66 69 65 72     des and modifier
    bc44:	20 62 79 74 65 2e 00                                 byte..

0000bc4b <usb_endpoint_config_table>:
    bc4b:	15 15 15 15 19 15 15 19 15 15 00 00 00              .............

0000bc58 <usb_descriptor_list>:
    bc58:	00 01 00 00 38 8f ff 1f 12 00 00 00 00 02 00 00     ....8...........
    bc68:	02 8e ff 1f af 00 00 00 00 06 00 00 f0 91 ff 1f     ................
    bc78:	01 00 00 00 00 0a 00 00 ef 91 ff 1f 01 00 00 00     ................
    bc88:	00 03 00 00 4e 90 ff 1f 00 00 00 00 01 03 09 04     ....N...........
    bc98:	86 8f ff 1f 00 00 00 00 02 03 09 04 a4 8f ff 1f     ................
    bca8:	00 00 00 00 03 03 09 04 52 90 ff 1f 00 00 00 00     ........R.......
    bcb8:	00 22 00 00 0e 90 ff 1f 3f 00 00 00 00 21 00 00     ."......?....!..
    bcc8:	14 8e ff 1f 09 00 00 00 00 22 01 00 09 8d ff 1f     ........."......
    bcd8:	7d 00 00 00 00 21 01 00 2d 8e ff 1f 09 00 00 00     }....!..-.......
    bce8:	00 22 02 00 e4 8e ff 1f 35 00 00 00 00 21 02 00     ."......5....!..
    bcf8:	46 8e ff 1f 09 00 00 00 04 03 09 04 1a 8f ff 1f     F...............
    bd08:	00 00 00 00 05 03 09 04 e4 8d ff 1f 00 00 00 00     ................
    bd18:	06 03 09 04 cc 8d ff 1f 00 00 00 00 07 03 09 04     ................
    bd28:	4a 8f ff 1f 00 00 00 00 08 03 09 04 86 8d ff 1f     J...............
    bd38:	00 00 00 00 00 22 06 00 b1 8e ff 1f 33 00 00 00     ....."......3...
    bd48:	00 21 06 00 a1 8e ff 1f 09 00 00 00 0a 03 09 04     .!..............
    bd58:	be 8d ff 1f 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bd68:	00 00 00 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49     .....[1;33mWARNI
    bd78:	4e 47 1b 5b 30 6d 20 2d 20 55 53 42 20 4c 6f 77     NG.[0m - USB Low
    bd88:	20 50 6f 77 65 72 20 4e 65 67 6f 74 61 74 69 6f      Power Negotatio
    bd98:	6e 20 44 69 73 61 62 6c 65 64 2c 20 63 6f 6e 64     n Disabled, cond
    bda8:	69 74 69 6f 6e 20 64 65 74 65 63 74 65 64 2e 00     ition detected..
    bdb8:	1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b     .[1;33mWARNING.[
    bdc8:	30 6d 20 2d 20 53 45 54 5f 46 45 41 54 55 52 45     0m - SET_FEATURE
    bdd8:	20 2d 20 44 65 76 69 63 65 20 77 56 61 6c 75 65      - Device wValue
    bde8:	28 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47     (..[1;33mWARNING
    bdf8:	1b 5b 30 6d 20 2d 20 43 4c 45 41 52 5f 46 45 41     .[0m - CLEAR_FEA
    be08:	54 55 52 45 20 2d 20 49 6e 74 65 72 66 61 63 65     TURE - Interface
    be18:	20 77 56 61 6c 75 65 28 00 29 20 77 49 6e 64 65      wValue(.) wInde
    be28:	78 28 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e     x(..[1;33mWARNIN
    be38:	47 1b 5b 30 6d 20 2d 20 53 45 54 5f 46 45 41 54     G.[0m - SET_FEAT
    be48:	55 52 45 20 2d 20 49 6e 74 65 72 66 61 63 65 20     URE - Interface 
    be58:	77 56 61 6c 75 65 28 00 1b 5b 31 3b 33 33 6d 57     wValue(..[1;33mW
    be68:	41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 55 6e 6b     ARNING.[0m - Unk
    be78:	6e 6f 77 6e 20 69 6e 74 65 72 66 61 63 65 20 2d     nown interface -
    be88:	20 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52      ..[1;5;31mERROR
    be98:	1b 5b 30 6d 20 2d 20 55 53 42 20 6e 6f 74 20 63     .[0m - USB not c
    bea8:	6f 6e 66 69 67 75 72 65 64 2e 2e 2e 0d 0a 00 1b     onfigured.......
    beb8:	5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30     [1;33mWARNING.[0
    bec8:	6d 20 2d 20 55 53 42 20 54 72 61 6e 73 6d 69 74     m - USB Transmit
    bed8:	20 54 69 6d 65 6f 75 74 2e 2e 2e 61 75 74 6f 2d      Timeout...auto-
    bee8:	72 65 73 74 61 72 74 20 64 69 73 61 62 6c 65 64     restart disabled
    bef8:	0d 0a 00 53 79 73 43 74 72 6c 5b 00 5d 20 0d 0a     ...SysCtrl[.] ..
    bf08:	00 43 6f 6e 73 43 74 72 6c 5b 00 1b 5b 31 3b 33     .ConsCtrl[..[1;3
    bf18:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 42 6f     5mDEBUG.[0m - Bo
    bf28:	6f 74 20 55 53 42 3a 20 00 1b 5b 31 3b 33 35 6d     ot USB: ..[1;35m
    bf38:	44 45 42 55 47 1b 5b 30 6d 20 2d 20 4e 4b 52 4f     DEBUG.[0m - NKRO
    bf48:	20 55 53 42 3a 20 00 1b 5b 31 3b 33 33 6d 57 41      USB: ..[1;33mWA
    bf58:	52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 55 53 42 20     RNING.[0m - USB 
    bf68:	54 72 61 6e 73 6d 69 74 20 54 69 6d 65 6f 75 74     Transmit Timeout
    bf78:	2e 2e 2e 0d 0a 00 00 00 00 00                       ..........

0000bf82 <helpCLIDict_DescEntry>:
    bf82:	59 6f 75 27 72 65 20 6c 6f 6f 6b 69 6e 67 20 61     You're looking a
    bf92:	74 20 69 74 20 3a 50 00                             t it :P.

0000bf9a <restartCLIDict_DescEntry>:
    bf9a:	53 65 6e 64 73 20 61 20 73 6f 66 74 77 61 72 65     Sends a software
    bfaa:	20 72 65 73 74 61 72 74 2c 20 73 68 6f 75 6c 64      restart, should
    bfba:	20 62 65 20 73 69 6d 69 6c 61 72 20 74 6f 20 70      be similar to p
    bfca:	6f 77 65 72 69 6e 67 20 6f 6e 20 74 68 65 20 64     owering on the d
    bfda:	65 76 69 63 65 2e 00                                evice..

0000bfe1 <resetCLIDict_DescEntry>:
    bfe1:	52 65 73 65 74 73 20 74 68 65 20 74 65 72 6d 69     Resets the termi
    bff1:	6e 61 6c 20 62 61 63 6b 20 74 6f 20 69 6e 69 74     nal back to init
    c001:	69 61 6c 20 73 65 74 74 69 6e 67 73 2e 00           ial settings..

0000c00f <clearCLIDict_DescEntry>:
    c00f:	43 6c 65 61 72 20 74 68 65 20 73 63 72 65 65 6e     Clear the screen
    c01f:	2e 00                                               ..

0000c021 <reloadCLIDict_DescEntry>:
    c021:	53 69 67 6e 61 6c 73 20 6d 69 63 72 6f 63 6f 6e     Signals microcon
    c031:	74 72 6f 6c 6c 65 72 20 74 6f 20 72 65 66 6c 61     troller to refla
    c041:	73 68 2f 72 65 6c 6f 61 64 2e 00                    sh/reload..

0000c04c <versionCLIDict_DescEntry>:
    c04c:	56 65 72 73 69 6f 6e 20 69 6e 66 6f 72 6d 61 74     Version informat
    c05c:	69 6f 6e 20 61 62 6f 75 74 20 74 68 69 73 20 66     ion about this f
    c06c:	69 72 6d 77 61 72 65 2e 00 1b 5b 32 4a 1b 5b 48     irmware...[2J.[H
    c07c:	0d 00 1b 63 00 0d 0a 1b 5b 31 3b 33 32 6d 00 1b     ...c....[1;32m..
    c08c:	5b 30 6d 0d 0a 00 20 1b 5b 33 35 6d 00 20 1b 5b     [0m... .[35m. .[
    c09c:	31 6d 52 65 76 69 73 69 6f 6e 3a 1b 5b 30 6d 20     1mRevision:.[0m 
    c0ac:	20 20 20 20 20 0d 0a 00 20 1b 5b 31 6d 42 72 61          ... .[1mBra
    c0bc:	6e 63 68 3a 1b 5b 30 6d 20 20 20 20 20 20 20 20     nch:.[0m        
    c0cc:	0d 0a 00 20 1b 5b 31 6d 54 72 65 65 20 53 74 61     ... .[1mTree Sta
    c0dc:	74 75 73 3a 1b 5b 30 6d 20 20 20 43 6c 65 61 6e     tus:.[0m   Clean
    c0ec:	0d 0a 09 0d 0a 00 20 1b 5b 31 6d 52 65 70 6f 20     ...... .[1mRepo 
    c0fc:	4f 72 69 67 69 6e 3a 1b 5b 30 6d 20 20 20 0d 0a     Origin:.[0m   ..
    c10c:	00 20 1b 5b 31 6d 43 6f 6d 6d 69 74 20 44 61 74     . .[1mCommit Dat
    c11c:	65 3a 1b 5b 30 6d 20 20 20 0d 0a 00 20 1b 5b 31     e:.[0m   ... .[1
    c12c:	6d 43 6f 6d 6d 69 74 20 41 75 74 68 6f 72 3a 1b     mCommit Author:.
    c13c:	5b 30 6d 20 0d 0a 00 20 1b 5b 31 6d 42 75 69 6c     [0m ... .[1mBuil
    c14c:	64 20 44 61 74 65 3a 1b 5b 30 6d 20 20 20 20 32     d Date:.[0m    2
    c15c:	30 31 37 2d 31 31 2d 30 32 20 31 35 3a 30 33 3a     017-11-02 15:03:
    c16c:	30 35 20 2d 30 36 30 30 0d 0a 00 20 1b 5b 31 6d     05 -0600... .[1m
    c17c:	42 75 69 6c 64 20 4f 53 3a 1b 5b 30 6d 20 20 20     Build OS:.[0m   
    c18c:	20 20 20 47 65 6e 65 72 69 63 0d 0a 00 20 1b 5b        Generic... .[
    c19c:	31 6d 41 72 63 68 69 74 65 63 74 75 72 65 3a 1b     1mArchitecture:.
    c1ac:	5b 30 6d 20 20 61 72 6d 0d 0a 00 20 1b 5b 31 6d     [0m  arm... .[1m
    c1bc:	43 68 69 70 3a 1b 5b 30 6d 20 20 20 20 20 20 20     Chip:.[0m       
    c1cc:	20 20 20 6d 6b 32 30 64 78 32 35 36 76 6c 68 37        mk20dx256vlh7
    c1dc:	0d 0a 00 20 1b 5b 31 6d 43 50 55 3a 1b 5b 30 6d     ... .[1mCPU:.[0m
    c1ec:	20 20 20 20 20 20 20 20 20 20 20 63 6f 72 74 65                corte
    c1fc:	78 2d 6d 34 0d 0a 00 20 1b 5b 31 6d 44 65 76 69     x-m4... .[1mDevi
    c20c:	63 65 3a 1b 5b 30 6d 20 20 20 20 20 20 20 20 4b     ce:.[0m        K
    c21c:	65 79 62 6f 61 72 64 0d 0a 00 20 1b 5b 31 6d 4d     eyboard... .[1mM
    c22c:	6f 64 75 6c 65 73 3a 1b 5b 30 6d 20 20 20 20 20     odules:.[0m     
    c23c:	20 20 53 63 61 6e 28 49 6e 66 69 6e 69 74 79 5f       Scan(Infinity_
    c24c:	45 72 67 6f 64 6f 78 29 20 4d 61 63 72 6f 28 50     Ergodox) Macro(P
    c25c:	61 72 74 69 61 6c 4d 61 70 29 20 4f 75 74 70 75     artialMap) Outpu
    c26c:	74 28 70 6a 72 63 55 53 42 29 20 44 65 62 75 67     t(pjrcUSB) Debug
    c27c:	28 66 75 6c 6c 29 0d 0a 00 20 1b 5b 31 6d 55 6e     (full)... .[1mUn
    c28c:	69 71 75 65 20 49 64 3a 1b 5b 30 6d 20 20 20 20     ique Id:.[0m    
    c29c:	20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30      ..[1;32mINFO.[0
    c2ac:	6d 20 2d 20 48 65 78 20 64 65 62 75 67 20 6d 6f     m - Hex debug mo
    c2bc:	64 65 20 64 69 73 61 62 6c 65 64 2e 2e 2e 0d 0a     de disabled.....
    c2cc:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    c2dc:	20 2d 20 48 65 78 20 64 65 62 75 67 20 6d 6f 64      - Hex debug mod
    c2ec:	65 20 65 6e 61 62 6c 65 64 2e 2e 2e 0d 0a 00 45     e enabled......E
    c2fc:	52 52 4f 52 00 31 3b 35 3b 33 31 00 1b 5b 00 22     RROR.1;5;31..[."
    c30c:	20 69 73 20 6e 6f 74 20 61 20 76 61 6c 69 64 20      is not a valid 
    c31c:	63 6f 6d 6d 61 6e 64 2e 2e 2e 74 79 70 65 20 1b     command...type .
    c32c:	5b 33 35 6d 68 65 6c 70 1b 5b 30 6d 00 22 00 1b     [35mhelp.[0m."..
    c33c:	5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30     [1;5;31mERROR.[0
    c34c:	6d 20 2d 20 4d 61 78 20 6e 75 6d 62 65 72 20 6f     m - Max number o
    c35c:	66 20 64 69 63 74 69 6f 6e 61 72 69 65 73 20 64     f dictionaries d
    c36c:	65 66 69 6e 65 64 20 61 6c 72 65 61 64 79 2e 2e     efined already..
    c37c:	2e 0d 0a 00 1b 5b 32 4b 0d 00 1b 5b 31 3b 33 34     .....[2K...[1;34
    c38c:	6d 3a 1b 5b 30 6d 20 00 1b 5b 31 3b 35 3b 33 31     m:.[0m ..[1;5;31
    c39c:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 53 65 72     mERROR.[0m - Ser
    c3ac:	69 61 6c 20 6c 69 6e 65 20 62 75 66 66 65 72 20     ial line buffer 
    c3bc:	69 73 20 66 75 6c 6c 2c 20 64 72 6f 70 70 69 6e     is full, droppin
    c3cc:	67 20 63 68 61 72 61 63 74 65 72 20 61 6e 64 20     g character and 
    c3dc:	72 65 73 65 74 74 69 6e 67 2e 2e 2e 0d 0a 00 1b     resetting.......
    c3ec:	5b 73 0d 0a 00 1b 5b 32 4b 00 1b 5b 75 00 08 20     [s....[2K..[u.. 
    c3fc:	08 00 63 6c 65 61 72 00 63 6c 69 44 65 62 75 67     ..clear.cliDebug
    c40c:	00 68 65 6c 70 00 6c 65 64 00 72 65 6c 6f 61 64     .help.led.reload
    c41c:	00 72 65 73 65 74 00 72 65 73 74 61 72 74 00 76     .reset.restart.v
    c42c:	65 72 73 69 6f 6e 00 00                             ersion..

0000c434 <basicCLIDict>:
    c434:	fe c3 00 00 0f c0 00 00 a1 77 00 00 04 c4 00 00     .........w......
    c444:	47 c5 00 00 79 79 00 00 0d c4 00 00 82 bf 00 00     G...yy..........
    c454:	dd 77 00 00 12 c4 00 00 a0 c4 00 00 8d 78 00 00     .w...........x..
    c464:	16 c4 00 00 21 c0 00 00 ad 77 00 00 1d c4 00 00     ....!....w......
    c474:	e1 bf 00 00 d1 77 00 00 23 c4 00 00 9a bf 00 00     .....w..#.......
    c484:	a1 78 00 00 2b c4 00 00 4c c0 00 00 a5 78 00 00     .x..+...L....x..
    c494:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

0000c4a0 <ledCLIDict_DescEntry>:
    c4a0:	45 6e 61 62 6c 65 73 2f 44 69 73 61 62 6c 65 73     Enables/Disables
    c4b0:	20 69 6e 64 69 63 61 74 6f 72 20 4c 45 44 2e 20      indicator LED. 
    c4c0:	54 72 79 20 61 20 63 6f 75 70 6c 65 20 74 69 6d     Try a couple tim
    c4d0:	65 73 20 6a 75 73 74 20 69 6e 20 63 61 73 65 20     es just in case 
    c4e0:	74 68 65 20 4c 45 44 20 69 73 20 69 6e 20 61 6e     the LED is in an
    c4f0:	20 6f 64 64 20 73 74 61 74 65 2e 0d 0a 09 09 1b      odd state......
    c500:	5b 33 33 6d 57 61 72 6e 69 6e 67 1b 5b 30 6d 3a     [33mWarning.[0m:
    c510:	20 4d 61 79 20 61 64 76 65 72 73 65 6c 79 20 61      May adversely a
    c520:	66 66 65 63 74 20 73 6f 6d 65 20 6d 6f 64 75 6c     ffect some modul
    c530:	65 73 2e 2e 2e 00                                   es....

0000c536 <basicCLIDictName>:
    c536:	47 65 6e 65 72 61 6c 20 43 6f 6d 6d 61 6e 64 73     General Commands
    c546:	00                                                  .

0000c547 <cliDebugCLIDict_DescEntry>:
    c547:	45 6e 61 62 6c 65 73 2f 44 69 73 61 62 6c 65 73     Enables/Disables
    c557:	20 68 65 78 20 6f 75 74 70 75 74 20 6f 66 20 74      hex output of t
    c567:	68 65 20 6d 6f 73 74 20 72 65 63 65 6e 74 20 63     he most recent c
    c577:	6c 69 20 69 6e 70 75 74 2e 00 00 00 00              li input.....
